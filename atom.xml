<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TimChen</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://timchen314.com/"/>
  <updated>2018-01-28T03:44:41.000Z</updated>
  <id>http://timchen314.com/</id>
  
  <author>
    <name>Tim Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jupyter</title>
    <link href="http://timchen314.com/jupyter/"/>
    <id>http://timchen314.com/jupyter/</id>
    <published>2018-01-16T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tutorial">Tutorial</h1>
<h2 id="pylab">%pylab?</h2>
<p>This sentence will give out the ‘help information’ of pylab.<br>
Note that %pylab will import</p>
<h2 id="cell-magics">cell magics</h2>
<p>Magics come in two kinds:【ct】可以简单理解为单行/多行</p>
<a id="more"></a>
<ul>
<li>
<p>Line magics: these are commands prepended by one % character and whose arguments only extend to the end of the current line.</p>
</li>
<li>
<p>Cell magics:</p>
</li>
</ul>
<h3 id="some-simple-cell-magics">Some simple cell magics</h3>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">%%writefile foo.py</div><div class="line">print(<span class="string">'foo'</span>)</div><div class="line">print(<span class="string">'Equinox'</span>)</div></pre></td></tr></table></figure>
<h3 id="magics-for-running-code-under-other-interpreters">Magics for running code under other interpreters</h3>
<p>IPython has a %%script cell magic, which lets you run a cell in a subprocess of any interpreter on your system, such as: bash, ruby, perl, zsh, R, etc.</p>
<p>To use it, simply pass a path or shell command to the program you want to run on the %%script line, and the rest of the cell will be run by that script, and stdout/err from the subprocess are captured and displayed.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In [10]: %%script python2 import sys print &apos;hello from Python %s&apos; % sys.version</div></pre></td></tr></table></figure>
<h3 id="background-scripts">Background Scripts</h3>
<p>These scripts can be run in the background, by adding the --bg flag.<br>
When you do this, output is discarded unless you use the --out/err flags to store output as above.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In [17]: %%ruby --bg --out ruby_lines for n in 1...10    sleep 1    puts &quot;line #&#123;n&#125;&quot;    STDOUT.flush end</div></pre></td></tr></table></figure>
<h2 id="shortcut-key">shortcut key</h2>
<p><a href="http://www.jianshu.com/p/72493e81a708" target="_blank" rel="external">Jupyter Notebook 的快捷键</a></p>
<h3 id="command-mode">command mode</h3>
<ul>
<li>
<p><code>ESC</code>: command mode</p>
</li>
<li>
<p><mark>h: 显示快捷键帮助</mark></p>
</li>
<li>
<p><code>Enter</code>: edit mode</p>
</li>
<li>
<p><code>ctrl+enter</code>、<code>shitf+enter</code>: 执行、执行后选中下个单元</p>
</li>
<li>
<p>b: 在下方插入新单元</p>
</li>
<li>
<p>dd: 删除当前cell</p>
</li>
<li>
<p>m: 设为markdown cell</p>
</li>
<li>
<p>y: 单元转入代码状态</p>
</li>
<li>
<p>3:     设定 3 级标题</p>
</li>
<li>
<p>x/c/v: 剪切/复制/粘贴</p>
</li>
<li>
<p>space/shift+spcae: 向下/上滚动</p>
</li>
</ul>
<h3 id="edit-mode">edit mode</h3>
<ul>
<li>
<p>shift+tab:  补全提示</p>
</li>
<li>
<p><code>ctrl + shift + -</code>: 分割cell</p>
</li>
</ul>
<hr>
<p><a href="http://nbviewer.jupyter.org/github/ipython/ipython/blob/4.0.x/examples/IPython%20Kernel/Cell%20Magics.ipynb" target="_blank" rel="external">source 1</a><br>
<a href="http://ipython.org/ipython-doc/3/notebook/notebook.html#importing-py-files" target="_blank" rel="external">source 2</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h1&gt;
&lt;h2 id=&quot;pylab&quot;&gt;%pylab?&lt;/h2&gt;
&lt;p&gt;This sentence will give out the ‘help information’ of pylab.&lt;br&gt;
Note that %pylab will import&lt;/p&gt;
&lt;h2 id=&quot;cell-magics&quot;&gt;cell magics&lt;/h2&gt;
&lt;p&gt;Magics come in two kinds:【ct】可以简单理解为单行/多行&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://timchen314.com/categories/python/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
      <category term="jupyter" scheme="http://timchen314.com/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>docker note</title>
    <link href="http://timchen314.com/docker/"/>
    <id>http://timchen314.com/docker/</id>
    <published>2018-01-01T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>Official introduction:</p>
<blockquote>
<p>Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications, whether on laptops, data center VMs, or the cloud.</p>
</blockquote>
<p>我认为可以这样介绍：docker是没有性能损失的、打包软件及其运行运行环境(包括系统在内的)的虚拟机。“Build Once, Run Anywhere!”</p>
<ul>
<li><a href="https://hub.docker.com/r/timchen314/galamost3/" target="_blank" rel="external">galamost-3.0.9 docker</a>测试</li>
</ul>
<ol>
<li>完全没有速度损失（docker vs. no-docker in 1080TI: 700 TPS vs. 700±20 TPS; IP: 101）。</li>
<li>即使host上为cuda8.0而docker上为cuda9.0，速度也基本没有损失（docker vs. no-docker in 1080: 513 TPS vs. 533 TPS; IP: 106）。</li>
</ol>
<a id="more"></a>
<h1 id="docker介绍">Docker介绍</h1>
<h2 id="首先-docker不会降低性能"><strong>首先，Docker不会降低性能！</strong></h2>
<ol>
<li>
<p>docker性能(2015年的文章)<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：</p>
<blockquote>
<p>docker利用namespace实现系统环境的隔离；利用Cgroup实现资源限制；<br>
……<br>
docker还存在着以下几个缺点：<br>
1.资源隔离方面不如虚拟机，docker是利用cgroup实现资源限制的，只能限制资源消耗的最大值，而不能隔绝其他程序占用自己的资源。<br>
2.安全性问题。docker目前并不能分辨具体执行指令的用户，只要一个用户拥有执行docker的权限，那么他就可以对docker的容器进行所有操作，不管该容器是否是由该用户创建。比如A和B都拥有执行docker的权限，由于docker的server端并不会具体判断docker cline是由哪个用户发起的，A可以删除B创建的容器，存在一定的安全风险。</p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="external">Docker Engine Utility for NVIDIA GPUs</a><br>
这是nvidia官方支持的docker项目，里面一个issue提到了正常情况下，效率没有损失</p>
</li>
<li>
<p>By default, a container has no resource constraints and can use as much of a given resource as the host’s kernel scheduler will allow.<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
</li>
</ol>
<h2 id="docker在web开发中得使用流程是怎样的？">docker在web开发中得使用流程是怎样的？<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h2>
<h3 id="使用docker的正确姿势">使用Docker的正确姿势</h3>
<p>Tomcat+Mysql,怎么做？<br>
我们构建两个镜像，一个仅安装Tomcat并部署我们的app，另一个仅安装MySQL，然后启动这两个镜像，得到两个容器，再利用Docker的容器互联技术将二者连接(Docker的容器是通过http连接的)。</p>
<h2 id="docker原理的简介：">docker原理的简介：</h2>
<h3 id="基础介绍">基础介绍</h3>
<ul>
<li>
<p>原理<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p>
<blockquote>
<p>让某些进程在彼此隔离的命名空间中运行。大家虽然都共用一个内核和某些运行时环境（例如一些系统命令和系统库），但是彼此却看不到，都以为系统中只有自己的存在。这种机制就是容器（Container），利用命名空间来做权限的隔离控制，利用 cgroups 来做资源分配。</p>
</blockquote>
</li>
<li>
<p>灵剑</p>
<blockquote>
<p>docker可以使用docker build工具链将应用和所有依赖整个安装到镜像中，部署的时候直接启动容器就是一个正确运行的服务了。docker build使用Dockerfile，Dockerfile是一个文本文件，相当于一个脚本，可以在CI系统中自动执行，做持续集成、持续部署很容易，build、test成功后直接替换线上的镜像就行。从原理上来说，docker并不是一个完全独立的虚拟化环境，而是一个有独立namespace的进程，所以启动开销就跟直接在物理机上启动服务差不多，但是保证了环境隔离。</p>
<p>作者：灵剑<br>
链接：<a href="https://www.zhihu.com/question/51134842/answer/189312743" target="_blank" rel="external">https://www.zhihu.com/question/51134842/answer/189312743</a><br>
来源：知乎<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
</li>
<li>
<p>Docker技术架构图<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup><br>
<img src="https://pic4.zhimg.com/50/v2-385d2404a0ea9dd37c00b445b3168b96_hd.jpg" alt="image"></p>
<blockquote>
<p>从Docker依赖的底层技术来看，Docker原生态是不能直接在Windows平台上运行的，只支持linux系统，原因是Docker依赖linux kernel三项最基本的技术,namespaces充当隔离的第一级，是对Docker容器进行隔离，让容器拥有独立的hostname,ip,pid，同时确保一个容器中运行一个进程而且不能看到或影响容器外的其它进程;Cgroups是容器对使用的宿主机资源进行核算并限制的关键功能。<br>
比如CPU,内存,磁盘等，union FS主要是对镜像也就是image这一块作支持，采用copy-on-write技术，让大家可以共用某一层，对于某些差异层的话就可以在差异的内存存储，Libcontainer是一个库，是对上面这三项技术做一个封装。</p>
</blockquote>
</li>
<li>
<p>rootfs<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup><br>
<img src="https://pic1.zhimg.com/50/v2-e7bf9fbb488309f38864cac909a022a5_hd.jpg" alt="image"></p>
<blockquote>
<p>内核空间是 kernel，Linux 刚启动时会加载 bootfs 文件系统，之后 bootfs 会被卸载掉。<br>
用户空间的文件系统是 rootfs，包含我们熟悉的 /dev, /proc, /bin 等目录。<br>
对于 base 镜像来说，底层直接用 Host 的 kernel，自己只需要提供 rootfs 就行了。<br>
而对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令、工具和程序库就可以了。相比其他 Linux 发行版，CentOS 的 rootfs 已经算臃肿的了，alpine 还不到 10MB。<br>
这里需要说明的是：</p>
</blockquote>
</li>
</ul>
<ol>
<li>base 镜像只是在用户空间与发行版一致，kernel 版本与发行版是不同的。<br>
例如 CentOS 7 使用 3.x.x 的 kernel，如果 Docker Host 是 Ubuntu 16.04（比如我们的实验环境），那么在 CentOS 容器中使用的实际是是 Host 4.x.x 的 kernel。</li>
<li>容器只能使用 Host 的 kernel，并且不能修改。</li>
</ol>
<ul>
<li><mark>writable container</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6:1">[6]</a></sup><br>
<img src="https://pic1.zhimg.com/50/v2-9496fbb036445cc557f95f657c5baea8_hd.jpg" alt="image">
<blockquote>
<p>当容器启动时，一个新的可写层被加载到镜像的顶部。<br>
这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。<br>
所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。<br>
只有容器层是可写的，容器层下面的所有镜像层都是只读的。<br>
下面我们深入讨论容器层的细节。<br>
镜像层数量可能会很多，所有镜像层会联合在一起组成一个统一的文件系统。如果不同层中有一个相同路径的文件，比如 /a，上层的 /a 会覆盖下层的 /a，也就是说用户只能访问到上层中的文件 /a。在容器层中，用户看到的是一个叠加之后的文件系统。</p>
</blockquote>
</li>
</ul>
<ol>
<li>添加文件 在容器中创建文件时，新文件被添加到容器层中。</li>
<li>读取文件 在容器中读取某个文件时，Docker 会从上往下依次在各镜像层中查找此文件。一旦找到，立即将其复制到容器层，然后打开并读入内存。</li>
<li>修改文件 在容器中修改已存在的文件时，Docker 会从上往下依次在各镜像层中查找此文件。一旦找到，立即将其复制到容器层，然后修改之。<br>
删除文件 在容器中删除文件时，Docker 也是从上往下依次在镜像层中查找此文件。找到后，会在容器层中记录下此删除操作。</li>
<li>只有当需要修改时才复制一份数据，这种特性被称作 Copy-on-Write。可见，容器层保存的是镜像变化的部分，不会对镜像本身进行任何修改。</li>
</ol>
<h3 id="技术细节">技术细节</h3>
<ul>
<li>
<p>runtime/runc<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></p>
<blockquote>
<p>容器 runtime<br>
runtime 是容器真正运行的地方。runtime 需要跟操作系统 kernel 紧密协作，为容器提供运行环境。<br>
如果大家用过 Java，可以这样来理解 runtime 与容器的关系：<br>
Java 程序就好比是容器，JVM 则好比是 runtime。JVM 为 Java 程序提供运行环境。同样的道理，容器只有在 runtime 中才能运行。<br>
lxc、runc 和 rkt 是目前主流的三种容器 runtime。<br>
lxc 是 Linux 上老牌的容器 runtime。Docker 最初也是用 lxc 作为 runtime。<br>
runc 是 Docker 自己开发的容器 runtime，符合 oci 规范，也是现在 Docker 的默认 runtime。<br>
rkt 是 CoreOS 开发的容器 runtime，符合 oci 规范，因而能够运行 Docker 的容器。</p>
</blockquote>
</li>
<li>
<p>image增量存储、类似git</p>
</li>
</ul>
<h2 id="概念">概念</h2>
<p>可以参考官方<a href="https://docs.docker.com/glossary/?term=layer" target="_blank" rel="external">Docker glossary</a></p>
<ul>
<li>
<p>Registry<br>
即注册服务。注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像</p>
</li>
<li>
<p>Dockerfile<br>
告诉docker build命令应该执行哪些操作。</p>
</li>
<li>
<p>NAMES<br>
自动分配的容器名称，可视为数字ID的昵称</p>
</li>
<li>
<p>layer</p>
<blockquote>
<p>In an image, a layer is modification to the image, represented by an instruction in the Dockerfile. Layers are applied in sequence to the base image to create the final image. When an image is updated or rebuilt, only layers that change need to be updated, and unchanged layers are cached locally. This is part of why Docker images are so fast and lightweight. The sizes of each layer add up to equal the size of the final image.</p>
</blockquote>
<ul>
<li>在 Dockerfile 文件中写入指令，每个指令都在映像上生成一个新的层。Docker 限制每个映像最多有 127 层，因此，要尽量优化映像层数。</li>
<li>During the ‘build’, the image is generated layer by layer. If bugs are encountered, you can start the toppest correct layer and debug the bug layer.</li>
</ul>
</li>
<li>
<p>构建缓存<sup class="footnote-ref"><a href="#fn4" id="fnref4:1">[4]</a></sup></p>
<blockquote>
<p>在执行每条指令之前，Docker 都会在缓存中查找是否已经存在可重用的镜像，如果有就使用现存的镜像。如果你不想在构建过程中使用缓存，你可以在 docker build 命令中使用 --no-cache=true 选项。遵循的基本规则如下：<br>
从一个基础镜像开始（FROM 指令指定），下一条指令将和该基础镜像的所有子镜像进行匹配，检查这些子镜像被创建时使用的指令是否和被检查的指令完全一样。如果不是，则缓存失效。<br>
然而，有些指令需要更多的检查和解释。<br>
对于 ADD 和 COPY 指令，镜像中对应文件的内容也会被检查，每个文件都会计算出一个校验和。文件的最后修改时间和最后访问时间不会纳入校验。在缓存的查找过程中，会将这些校验和和已存在镜像中的文件校验和进行对比。如果文件有任何改变，比如内容和元数据，则缓存失效。<br>
除了 ADD 和 COPY 指令，缓存匹配过程不会查看临时容器中的文件来决定缓存是否匹配。例如，当执行完 RUN apt-get -y update 指令后，容器中一些文件被更新，但 Docker 不会检查这些文件。这种情况下，只有指令字符串本身被用来匹配缓存。</p>
</blockquote>
</li>
<li>
<p>CoreOS<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></p>
<blockquote>
<p>目前最常用的用来执行Docker集装箱的Linux发行版本既不是Ubuntu、Debian也不是RedHat、Fedora，而是CoreOS。这个发行版本根本没有软件包管理程序，所以也不能通过输入某个命令来安装软件。但是CoreOS预装了Docker，所以可以制作集装箱镜像，或者下载别人发布的集装箱镜像来执行。</p>
</blockquote>
</li>
</ul>
<h2 id="应用">应用</h2>
<ul>
<li>
<p>deploy for AI<br>
There are many AI-related docker in <a href="https://hub.docker.com/r/datmo/tensorflow/" target="_blank" rel="external">Datmo docker</a></p>
</li>
<li>
<p><a href="https://hub.docker.com/r/alfpark/namd/" target="_blank" rel="external">NAMD</a><br>
==NOTE: dockerd NAMD can be used in Microsoft Azure!!! ==</p>
<blockquote>
<p>2.11-icc-mkl-intelmpi contains an optimized NAMD image compatible with Azure Infiniband/RDMA instances</p>
</blockquote>
</li>
<li>
<p><a href="https://hub.docker.com/r/ambermd/amber-build-box/" target="_blank" rel="external">Amber</a><br>
With official support!</p>
</li>
<li>
<p>nvidia/cuda</p>
</li>
<li>
<p>galamost3</p>
</li>
</ul>
<h2 id="优点-缺点">优点/缺点</h2>
<ul>
<li>
<p>优点</p>
<ol>
<li>保证了线上线下环境的一致性</li>
<li>简化了部署流程<br>
只需要从DockerHub上pull一个镜像就可以</li>
<li>实现了沙盒机制，提高了安全性<br>
由于webapp运行在容器中，与操作系统隔离开了，从而使操作系统基本不可能受到破坏，另外如果webapp因为攻击而瘫痪，并不需要重启服务器，直接重启容器或者再启动一个镜像就可以了。</li>
</ol>
</li>
<li>
<p>缺点<br>
参见<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup>和<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup></p>
<ol>
<li>调度系统的服务、环境变量<br>
例如利用cron服务，一旦将cron服务容器化后，原始的环境变数设定都会失效。<br>
你也不能使用环境变量在生成镜像的时候根据条件来改变指令(per #2637)。</li>
</ol>
</li>
</ul>
<h2 id="其他">其他</h2>
<ul>
<li>
<p><a href="https://www.projectatomic.io/blog/2015/08/why-we-dont-let-non-root-users-run-docker-in-centos-fedora-or-rhel/" target="_blank" rel="external">Why we don’t let non-root users run Docker in CentOS, Fedora, or RHEL</a></p>
</li>
<li>
<p>Docker (开源项目)改名 Moby</p>
<blockquote>
<p>今后的工作方式是：贡献Moby下的项目，然后使用Docker公司的Docker CE产品。</p>
</blockquote>
</li>
</ul>
<ul>
<li>
<p>if the image size is too large, google docker reduce image size</p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/29232090" target="_blank" rel="external">Kubernetes 是什么？</a></p>
</li>
</ul>
<h3 id="frequently-asked-questions"><a href="https://github.com/NVIDIA/nvidia-docker/wiki/Frequently-Asked-Questions#does-it-have-a-performance-impact-on-my-gpu-workload" target="_blank" rel="external">Frequently Asked Questions</a></h3>
<blockquote>
<p><mark>Does it have a performance impact on my GPU workload?</mark><br>
No, usually the impact should be in the order of less than 1% and hardly noticeable.<br>
<mark>Do you support CUDA Multi Process Service (a.k.a. MPS)?</mark><br>
No, MPS is not supported at the moment. However we plan on supporting this feature in the future, and this issue will be updated accordingly.<br>
<strong>Do you support running a GPU-accelerated X server inside the container?</strong><br>
No, running a X server inside the container is not supported at the moment and there is no plan to support it in the near future (see also OpenGL support).<br>
<strong>I have multiple GPU devices, how can I isolate them between my containers?</strong><br>
GPU isolation is achieved through a container environment variable called NVIDIA_VISIBLE_DEVICES.<br>
Devices can be referenced by index (following the PCI bus order) or by UUID (refer to the documentation).<br>
<strong>Why is nvidia-smi inside the container not listing the running processes?</strong><br>
nvidia-smi and NVML are not compatible with PID namespaces.<br>
We recommend monitoring your processes on the host or inside a container using --pid=host.</p>
</blockquote>
<h1 id="command">Command</h1>
<ul>
<li>
<p><code>docker --help</code></p>
</li>
<li>
<p><code>docker ps/start/stop</code><br>
查看/停止/启动容器</p>
</li>
<li>
<p><code>docker list/rmi</code><br>
列出/删除本地镜像</p>
</li>
<li>
<p><code>run</code><br>
<code>docker run -it -p 8080:80 centos:latest /bin/bash</code>，表示用latest版本，shell为bash，<br>
<code>-p</code> 将container8080端口映射到80端口。<br>
<code>-d</code> 守护容器，就是后台运行，退出命令窗口容器也不会停止<br>
<code>-it</code> 交互式容器 退出命令窗口容器就停止运行了<br>
<code>-P</code> 将容器内部使用的网络端口映射到我们使用的主机上。<code>docker ps</code>会显示<strong>端口是如何映射的</strong><br>
<code>--runtime=nvidia</code> without it gpu and its drive wouldn’t be found.<br>
<code>--name your_name</code> assign a name to your container</p>
<ul>
<li>run centos image in background<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup><br>
<mark><code>docker run --runtime=nvidia -t -d --name conda_hoomd timchen314/galamost3:3.0.9 /bin/bash</code></mark></li>
<li>automatically restart<br>
<code>--restart=always</code> 意味着无论容器因何种原因退出（包括正常退出），就立即重启。<br>
<code>--restart=on-failure:3</code>，意思是如果启动进程退出代码非0，则重启容器，最多重启3次。</li>
</ul>
</li>
<li>
<p><code>exec</code><br>
<code>docker exec -it your_container_name bash # login an existed container</code></p>
<ul>
<li>run source<br>
Source is not an executable (source is a bash shell built-in command that executes the content of the file passed as argument)<br>
<code>docker run --rm -ti _image_name_ bash -c 'source FILE'</code></li>
<li>Piping a file into docker run<br>
<code>echo 'export=$PATH:/opt/miniconda2/bin/' | docker exec -i conda_hoomd bash -c &quot;cat &gt;&gt; /etc/profile&quot;</code><br>
Note that it won’t work in this way: <code>docker exec -i conda_hoomd echo 'export=$PATH:/opt/miniconda2/bin/' &gt;&gt; /etc/profile</code></li>
</ul>
</li>
<li>
<p>pause/unpause</p>
</li>
<li>
<p><code>cp</code></p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker cp foo.txt mycontainer:/foo.txt</div><div class="line">docker cp mycontainer:/foo.txt foo.txt</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>rm</code><br>
remove all exited containers:<br>
<code>docker rm -v $(docker ps -aq -f status=exited)</code></p>
</li>
<li>
<p>attach<br>
直接进入容器 启动命令 的<strong>终端</strong>，不会启动新的进程。</p>
</li>
<li>
<p><code>system</code><br>
<code>docker system prune</code></p>
</li>
<li>
<p>tag<br>
每个仓库会有多个镜像，用tag标示，如果不加tag，默认使用latest镜像(不设tag，则默认为latest)<sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup>。<br>
[image name] = [repository]:[tag]<br>
注意！一个repo可以含有多个image！一个image可以打上多个tag！只有[repository]:[tag]唯一对应一个image！</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker tag myimage-v1.9.2 myrepo:1</div><div class="line">docker tag myimage-v1.9.2 myrepo:1.9</div><div class="line">docker tag myimage-v1.9.2 myrepo:1.9.2</div><div class="line">docker tag myimage-v1.9.2 myrepo:latest</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果执行下面的命令，之前的tag会自动覆盖掉。</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag myimage-v2.0.0 myrepo:latest</div></pre></td></tr></table></figure>
<ul>
<li>logs<br>
Docker daemon log: <code>/var/log/daemon.log | grep docker</code><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup></li>
</ul>
<ul>
<li>
<p>保存/加载tar格式的镜像</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker save -o centos.tar xianhu/centos:git    # 保存镜像, -o也可以是--output</div><div class="line">docker load -i centos.tar    # 加载镜像, -i也可以是--input</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>-H</code> 指定host IP<sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup></p>
<blockquote>
<p>默认配置下，Docker daemon 只能响应来自本地 Host 的客户端请求。如果要允许远程客户端请求，需要在配置文件中打开 TCP 监听，步骤如下：<br>
1.编辑配置文件 /etc/systemd/system/multi-user.target.wants/docker.service，在环境变量 ExecStart 后面添加 -H tcp://0.0.0.0，允许来自任意 IP 的客户端连接。</p>
</blockquote>
</li>
<li>
<p>根据已有容器，新建自有镜像</p>
<ol>
<li><code>docker commit -m &quot;centos with git&quot; -a &quot;your_name&quot; 72f1a8a0e394</code><br>
The last is container ID. <code>-a</code> means author<br>
<code>docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></li>
<li>Dockerfile</li>
</ol>
</li>
</ul>
<h2 id="show-info">show info</h2>
<ul>
<li><code>docker images</code> 显示已有docker</li>
<li><code>docker ps -a</code> 查看终止状态的容器</li>
<li><code>docker stats -a</code> Resource Usage</li>
<li><code>docker top NAMES</code> 查看容器内部运行的进程</li>
<li><code>docker system df</code> show the used space</li>
<li><code>docker history your_image</code></li>
<li>show tags<br>
For the images pulled to <a href="http://hub.docker.com" target="_blank" rel="external">hub.docker.com</a>, the tags can be found by：<br>
visit ‘<a href="https://hub.docker.com/r/library/debian/tags/" target="_blank" rel="external">https://hub.docker.com/r/library/debian/tags/</a>’ and you can see tags。<br>
By replace “/r/” in path to “/v2/repositories/” the tags can be downloaded and analysed.<br>
<code>curl 'https://registry.hub.docker.com/v2/repositories/library/debian/tags/'|jq '.&quot;results&quot;[][&quot;name&quot;]'</code> will <mark>List first 10 tags!</mark> <sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup><br>
Note: <code>jq</code> is a tool for processing JSON inputs. If all tags is needed, see reference<sup class="footnote-ref"><a href="#fn15" id="fnref15:1">[15]</a></sup>.<br>
VALIDATE: <code>curl 'https://registry.hub.docker.com/v2/repositories/library/python/tags/'|jq '.&quot;results&quot;[][&quot;name&quot;]'</code> does work!</li>
</ul>
<h2 id="build">build</h2>
<ul>
<li>
<p>注释符号<code>#</code></p>
</li>
<li>
<p>ADD<br>
与 COPY 类似，从 build context 复制文件到镜像。不同的是，如果 src 是归档文件（tar, zip, tgz, xz 等），文件会被自动解压到 dest。</p>
</li>
<li>
<p>ARG</p>
<blockquote>
<p>构建参数<sup class="footnote-ref"><a href="#fn4" id="fnref4:2">[4]</a></sup><br>
格式：ARG &lt;参数名&gt;[=&lt;默认值&gt;]<br>
构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。</p>
</blockquote>
</li>
</ul>
<ul>
<li>
<p>CMD<br>
三种格式<sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup></p>
<blockquote>
<ol>
<li>Exec 格式：CMD [“executable”,“param1”,“param2”]</li>
<li>这是 CMD 的推荐格式。<br>
CMD [“param1”,“param2”] 为 ENTRYPOINT 提供额外的参数，此时 ENTRYPOINT 必须使用 Exec 格式。</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>Shell 格式：CMD command param1 param2</li>
</ol>
</blockquote>
<blockquote>
<p><mark>指令就是用于指定默认的容器主进程的启动命令的。</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4:3">[4]</a></sup><br>
在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，<code>docker run -it ubuntu cat /etc/os-release</code><br>
在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 &quot;，而不要使用单引号。<br>
如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。比如：<br>
<code>CMD echo $HOME</code><br>
在实际执行中，会将其变更为：<br>
<code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</code></p>
</blockquote>
</li>
</ul>
<p>另外，docker的主程序不能是退出或后台运行的状态：</p>
<blockquote>
<p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p>
</blockquote>
<ul>
<li>COPY<br>
支持两种形式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">COPY src dest</div><div class="line">COPY [&quot;src&quot;, &quot;dest&quot;]</div></pre></td></tr></table></figure>
<ul>
<li>ENTRYPOINT<br>
<code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code><br>
ENTRYPOINT 不会被忽略，一定会被执行，即使运行 docker run 时指定了其他命令。
<blockquote>
<p><code>ENTRYPOINT [&quot;/bin/echo&quot;, &quot;Hello&quot;]</code><br>
<code>CMD [&quot;world&quot;]</code><br>
当容器通过 <code>docker run -it [image]</code> 启动时，输出为：<br>
Hello world<br>
而如果通过 <code>docker run -it [image] CloudMan</code> 启动，则输出为：<br>
Hello CloudMan</p>
</blockquote>
</li>
</ul>
<p>PS: 最佳实践<sup class="footnote-ref"><a href="#fn16" id="fnref16:1">[16]</a></sup></p>
<blockquote>
<p>使用 RUN 指令安装应用和软件包，构建镜像。<br>
如果 Docker 镜像的用途是运行应用程序或服务，比如运行一个 MySQL，应该优先使用 Exec 格式的 ENTRYPOINT 指令。CMD 可为 ENTRYPOINT 提供额外的默认参数，同时可利用 docker run 命令行替换默认参数。<br>
如果想为容器设置默认的启动命令，可使用 CMD 指令。用户可在 docker run 命令行中替换此默认命令。</p>
</blockquote>
<ul>
<li>ENV</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ENV MY_VERSION 1.3</div><div class="line">RUN apt-get install -y mypackage=$MY_VERSION</div></pre></td></tr></table></figure>
<ul>
<li>
<p>LABEL</p>
<blockquote>
<p>LABEL指令添加元数据到一个镜像。一个LABEL是一个键值对。要在LABEL值中包含空格，使用双引号和反斜杠(续行)。<br>
查看LABEL，可以用<code>docker inspect</code>。<br>
例子：</p>
</blockquote>
 <figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LABEL</span> "com.example.vendor"="ACME Incorporated"</div><div class="line"><span class="keyword">LABEL</span> com.example.label-with-value="foo"</div><div class="line"><span class="keyword">LABEL</span> version="1.0"</div><div class="line"><span class="keyword">LABEL</span> description="This text illustrates \</div><div class="line">that label-values can span multiple lines."</div></pre></td></tr></table></figure>
</li>
<li>
<p>MAINTAINER (depreciate)<br>
设置镜像的作者，可以是任意字符串。</p>
</li>
<li>
<p>其他<br>
EXPOSE VOLUME RUN</p>
</li>
</ul>
<h2 id="安装">安装</h2>
<ul>
<li>Mac OS<br>
homebrew直接安装<br>
<code>brew cask install docker</code></li>
<li>CentOS<br>
<a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/" target="_blank" rel="external">官网</a><br>
官网的方法是最正确的： <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Add the package repositories</div><div class="line">curl -s -L https://nvidia.github.io/nvidia-docker/centos7/x86_64/nvidia-docker.repo | \</div><div class="line">  sudo tee /etc/yum.repos.d/nvidia-docker.repo</div><div class="line"><span class="meta"></span></div><div class="line"># Install nvidia-docker2 and reload the Docker daemon configuration</div><div class="line">sudo yum install -y nvidia-docker2</div><div class="line">sudo pkill -SIGHUP dockerd</div><div class="line"><span class="meta"></span></div><div class="line"># Test nvidia-smi with the latest official CUDA image</div><div class="line">docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</div></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="http://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="external">CentOS runoob</a><br>
单独安装docker-ce非常麻烦的，因为需要安装和配置nvidia-container-runtime：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo</div><div class="line">sudo yum install -y docker-ce</div><div class="line">sudo systemctl start docker</div><div class="line">sudo docker run hello-world</div><div class="line"><span class="meta">#</span> install nvidia-container-runtime</div><div class="line">yum install -y nvidia-container-runtime</div><div class="line"><span class="meta">#</span> Then you should follow the troublesome setting process in https://github.com/nvidia/nvidia-container-runtime#docker-engine-setup</div></pre></td></tr></table></figure>
<ul>
<li>Docker Machine
<blockquote>
<p>Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</p>
</blockquote>
</li>
</ul>
<h2 id="configuration">configuration</h2>
<ul>
<li>
<p>bash-completion</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln -s /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion  </div><div class="line">ln -s /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion  </div><div class="line">ln -s /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>docker run hello-world</code> for test</p>
</li>
</ul>
<h2 id="error">error</h2>
<ul>
<li>&quot;Docker version reports bad response from Docker engine&quot;<br>
A lot of people encounter this error (<a href="https://forums.docker.com/t/docker-version-reports-bad-response-from-docker-engine/13395" target="_blank" rel="external">https://forums.docker.com/t/docker-version-reports-bad-response-from-docker-engine/13395</a>). For me, I sovled this by reset to factory defaults.</li>
</ul>
<h2 id="problem">problem</h2>
<h3 id="use-gcc5-x-solved"><mark>use gcc5.x (solved)</mark></h3>
<p>source /opt/rh/devtoolset-4/enable</p>
<h3 id="can-t-get-the-size-of-remote-image-unsolved">can’t get the size of remote image (unsolved)</h3>
<p>by google: docker remote image size, or docker image size in REPOSITORY, there is no cli command to do this.<br>
A complicate answer is:<br>
<a href="https://unix.stackexchange.com/questions/134186/docker-how-to-get-image-size" target="_blank" rel="external">Docker: How to get image size?</a></p>
<h1 id="reference">reference</h1>
<hr>
<ul>
<li>入门<br>
<a href="https://zhuanlan.zhihu.com/p/23599229" target="_blank" rel="external">只要一小时，零基础入门Docker</a><br>
<a href="http://www.runoob.com/docker/docker-container-usage.html" target="_blank" rel="external">runoob</a></li>
<li>进阶<br>
<a href="https://github.com/wsargent/docker-cheat-sheet#layers" target="_blank" rel="external">Docker Cheat Sheet</a><br>
<a href="https://docs.docker.com/get-started/" target="_blank" rel="external">官网 get started</a><br>
<a href="http://docker_practice.gitee.io/image/multistage-builds.html" target="_blank" rel="external">Docker — 从入门到实践</a></li>
<li>待读</li>
</ul>
<hr>
<p>Examples of Dockerfile:</p>
<ol>
<li>
<p>centos</p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> scratch</div><div class="line"><span class="keyword">ADD</span><span class="bash"> centos-7-docker.tar.xz /</span></div><div class="line"></div><div class="line"><span class="keyword">LABEL</span><span class="bash"> name=<span class="string">"CentOS Base Image"</span> \</span></div><div class="line">    vendor=<span class="string">"CentOS"</span> \</div><div class="line">    license=<span class="string">"GPLv2"</span> \</div><div class="line">    build-date=<span class="string">"20180107"</span></div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>]</span></div></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://blog.csdn.net/cbl709/article/details/43955687" target="_blank" rel="external">docker与虚拟机实现原理比较</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://docs.docker.com/engine/admin/resource_constraints/" target="_blank" rel="external">Limit a container’s resources</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://www.zhihu.com/search?q=docker&amp;type=content" target="_blank" rel="external">docker在web开发中得使用流程是怎样的？</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="http://docker_practice.gitee.io/image/multistage-builds.html" target="_blank" rel="external">Docker — 从入门到实践</a> <a href="#fnref4" class="footnote-backref">↩</a> <a href="#fnref4:1" class="footnote-backref">↩</a> <a href="#fnref4:2" class="footnote-backref">↩</a> <a href="#fnref4:3" class="footnote-backref">↩</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/30713987" target="_blank" rel="external">【 全干货 】5 分钟带你看懂 Docker ！</a> <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
<li id="fn6" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/32383774" target="_blank" rel="external">每天5分钟玩转Docker容器技术（三）</a> <a href="#fnref6" class="footnote-backref">↩</a> <a href="#fnref6:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn7" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/32324673" target="_blank" rel="external">每天5分钟玩转Docker容器技术（一）</a> <a href="#fnref7" class="footnote-backref">↩</a></p>
</li>
<li id="fn8" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/19902938" target="_blank" rel="external">分布式机器学习的故事：Docker改变世界</a> <a href="#fnref8" class="footnote-backref">↩</a></p>
</li>
<li id="fn9" class="footnote-item"><p><a href="https://yq.aliyun.com/articles/113842" target="_blank" rel="external">一年之后重新审视 Docker —— 根本性缺陷和炒作</a> <a href="#fnref9" class="footnote-backref">↩</a></p>
</li>
<li id="fn10" class="footnote-item"><p><a href="http://www.sohu.com/a/155079445_120672" target="_blank" rel="external">Docker架构优缺点大剖析</a> <a href="#fnref10" class="footnote-backref">↩</a></p>
</li>
<li id="fn11" class="footnote-item"><p><a href="https://stackoverflow.com/questions/30209776/docker-container-will-automatically-stop-after-docker-run-d/30209974#30209974" target="_blank" rel="external">Docker container will automatically stop after “docker run -d”</a> <a href="#fnref11" class="footnote-backref">↩</a></p>
</li>
<li id="fn12" class="footnote-item"><p><a href="http://blog.csdn.net/cloudman6/article/details/72603130" target="_blank" rel="external">镜像命名的最佳实践 - 每天5分钟玩转 Docker 容器技术（18）</a> <a href="#fnref12" class="footnote-backref">↩</a></p>
</li>
<li id="fn13" class="footnote-item"><p><a href="https://stackoverflow.com/questions/30969435/where-is-the-docker-daemon-log" target="_blank" rel="external">Where is the Docker daemon log?</a> <a href="#fnref13" class="footnote-backref">↩</a></p>
</li>
<li id="fn14" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/32356831" target="_blank" rel="external">每天5分钟玩转Docker容器技术（二）</a> <a href="#fnref14" class="footnote-backref">↩</a></p>
</li>
<li id="fn15" class="footnote-item"><p><a href="http://www.googlinux.com/list-all-tags-of-docker-image/index.html" target="_blank" rel="external">How to list all tags of a docker image</a> <a href="#fnref15" class="footnote-backref">↩</a> <a href="#fnref15:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn16" class="footnote-item"><p><a href="https://www.cnblogs.com/CloudMan6/p/6875834.html" target="_blank" rel="external">RUN vs CMD vs ENTRYPOINT - 每天5分钟玩转 Doc<br>
ker 容器技术（17）</a> <a href="#fnref16" class="footnote-backref">↩</a> <a href="#fnref16:1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Official introduction:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications, whether on laptops, data center VMs, or the cloud.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我认为可以这样介绍：docker是没有性能损失的、打包软件及其运行运行环境(包括系统在内的)的虚拟机。“Build Once, Run Anywhere!”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/timchen314/galamost3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;galamost-3.0.9 docker&lt;/a&gt;测试&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;完全没有速度损失（docker vs. no-docker in 1080TI: 700 TPS vs. 700±20 TPS; IP: 101）。&lt;/li&gt;
&lt;li&gt;即使host上为cuda8.0而docker上为cuda9.0，速度也基本没有损失（docker vs. no-docker in 1080: 513 TPS vs. 533 TPS; IP: 106）。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="云计算" scheme="http://timchen314.com/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="docker" scheme="http://timchen314.com/tags/docker/"/>
    
      <category term="cloud computing" scheme="http://timchen314.com/tags/cloud-computing/"/>
    
  </entry>
  
  <entry>
    <title>linux命令之service</title>
    <link href="http://timchen314.com/linux_senior_command/"/>
    <id>http://timchen314.com/linux_senior_command/</id>
    <published>2017-12-17T19:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>service</code>，顾名思义，是用于对系统服务进行管理的命令。<br>
<strong>Basically, it’s a shell script! <code>vi</code> it!</strong><br>
Besides, <code>chkconfig</code> is a closely related command.</p>
<a id="more"></a>
<p>CentOS中的介绍：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> info service</span></div><div class="line">DESCRIPTION</div><div class="line">       service  runs  a  System V init script in as predictable environment as</div><div class="line">       possible, removing most environment variables and with current  working</div><div class="line">       directory set to /.</div><div class="line"></div><div class="line">       The  SCRIPT  parameter  specifies  a  System  V init script, located in</div><div class="line">       /etc/init.d/SCRIPT.  The supported values  of  COMMAND  depend  on  the</div><div class="line">       invoked  script,  service  passes  COMMAND  and  OPTIONS it to the init</div><div class="line">       script unmodified.  All scripts should support at least the  start  and</div><div class="line">       stop  commands.   As  a special case, if COMMAND is --full-restart, the</div><div class="line">       script is run twice, first with the stop command, then with  the  start</div><div class="line">       command.</div><div class="line"></div><div class="line">       service --status-all runs all init scripts, in alphabetical order, with</div><div class="line">       the status command.</div><div class="line"></div><div class="line">       If the init script file does not exist, the script tries to use  legacy</div><div class="line">       actions.   If  there  is no suitable legacy action found and COMMAND is</div><div class="line">       one of actions specified in LSB Core Specification, input is redirected</div><div class="line">       to the systemctl.  Otherwise the command fails with return code 2.</div></pre></td></tr></table></figure>
<p>[TOC]</p>
<h2 id="service命令">service命令</h2>
<p><code>service network start</code>就相当于<code>/etc/init.d/network start</code>。</p>
<ul>
<li>
<p>An example of service command:</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> service netconsole</span></div><div class="line">Usage: /etc/init.d/netconsole &#123;start|stop|status|restart|condrestart&#125;</div></pre></td></tr></table></figure>
<p>Comman used option include “start|stop|status|restart”</p>
</li>
<li>
<p>An example of init service script:</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">case "$1" in</div><div class="line">    start)</div><div class="line">        do start-thing;</div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        do stop-thing;</div><div class="line">        ;;</div><div class="line">    restart)</div><div class="line">        do restart-thing;</div><div class="line">        ;;</div><div class="line">    ...</div><div class="line">esac</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="chkconfig命令">chkconfig命令</h2>
<p>service与chkconfig的关系归纳为：<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<blockquote>
<p>先要注册成为系统服务(即service可以调用)，然后才能使用chkconfig控制运行级别。<br>
service是chkconfig的前提条件。</p>
</blockquote>
<p><strong>注意</strong>：谨记chkconfig不是立即自动禁止或激活一个服务，它只是简单的改变了<code>/etc/rc*.d</code>中的符号连接。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<ul>
<li>
<p><code>chkconfig --list</code><br>
If you want to list systemd services use ‘systemctl list-unit-files’.</p>
</li>
<li>
<p><code>chkconfig --add/del SERVICE</code></p>
</li>
<li>
<p><code>chkconfig SERVICE on/off</code><br>
是否开机就执行</p>
</li>
<li>
<p><code>chkconfig --level SERVICE 3456</code><br>
只在3456级别下运行该SERVICE<br>
(<code>/etc/rc*.d</code>下)S开始的文件向脚本传递start参数<br>
K开始的文件向脚本传递stop参数<br>
K/S后面的数字代表开机启动脚本中的启动顺序，数组越大启动越晚。<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2]</a></sup></p>
</li>
<li>
<p>相应级别的文件在<code>/etc/rc*.d</code>之下</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ls /etc/rc*.d -d</span></div><div class="line">/etc/rc.d  /etc/rc0.d  /etc/rc1.d  /etc/rc2.d  /etc/rc3.d  /etc/rc4.d  /etc/rc5.d  /etc/rc6.d</div></pre></td></tr></table></figure>
</li>
<li>
<p>PS: <code>/etc/rc.d/rc*.d/</code>下的文件均为符号链接，最终绝大部分都是都是链接到<code>/etc/rc.d/init.d</code>下面。<code>/etc/rc.d/init.d</code>目录下面的都是开启启动脚本文件，用来启动相应的程序。</p>
</li>
<li>
<p>PPS: 开机顺序<br>
硬件自检 -&gt; 初始化启动bootloade -&gt; 加载内核 -&gt; 初始化硬件 -&gt; 加载根文件系统 -&gt; 加载驱动 -&gt; 启动一个init用户级程序</p>
</li>
<li>
<p>PPPS: 上面两次加载硬件，是因为驱动分成两种：<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p>
<blockquote>
<p>1.随内核加载的驱动，一般是中断控制器，串口，定时器，时钟，各种总线等；这种驱动的初始化函数一般会放到一个特殊的初始化段中，在内核初始化时调用；<br>
2.编译成模块的驱动，在内核初始化完成，也就是初始线程创建完成，出现shell时，根据应用程序的需要或者脚本按需加载。</p>
</blockquote>
</li>
</ul>
<h2 id="reference">reference</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://www.cnblogs.com/wangtao_20/archive/2014/04/04/3645690.html" target="_blank" rel="external">linux中注册系统服务—service命令的原理通俗</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="http://blog.csdn.net/taiyang1987912/article/details/41698817" target="_blank" rel="external">linux启动脚本和service、chkconfig</a> <a href="#fnref2" class="footnote-backref">↩</a> <a href="#fnref2:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://www.zhihu.com/question/35619555/answer/150110115" target="_blank" rel="external">古斟布衣</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;service&lt;/code&gt;，顾名思义，是用于对系统服务进行管理的命令。&lt;br&gt;
&lt;strong&gt;Basically, it’s a shell script! &lt;code&gt;vi&lt;/code&gt; it!&lt;/strong&gt;&lt;br&gt;
Besides, &lt;code&gt;chkconfig&lt;/code&gt; is a closely related command.&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://timchen314.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://timchen314.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>tools for MD analysis</title>
    <link href="http://timchen314.com/tools_for_MD_analysis/"/>
    <id>http://timchen314.com/tools_for_MD_analysis/</id>
    <published>2017-12-08T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>+</code> and <code>-</code> means pro and con of the tool!<br>
The conclusion: MDTraj seems a powerful tools, but once in a while it still feel troublesome.</p>
<a id="more"></a>
<h2 id="mdtraj">MDTraj</h2>
<p><code>+ convert files are awesome</code><br>
<code>- most of it is coded by python</code><br>
<code>- suck for xml (e.g. can't read image)</code><br>
<code>- the rotation utilities is hard to use.</code></p>
<h2 id="mdanalysis">MDAnalysis</h2>
<p><code>- Python2 only</code></p>
<h2 id="cpptraj">CPPTRAJ</h2>
<p><code>- for Amber</code></p>
<h2 id="st-analyzer">ST-analyzer</h2>
<p><code>+ with GUI</code></p>
<h2 id="loos">LOOS</h2>
<p><code>+ OO</code></p>
<p><code>- for structural analysis</code></p>
<h2 id="pteros">Pteros</h2>
<p><code>- developed by only one person</code></p>
<hr>
<p><a href="http://blog.csdn.net/garfielder007/article/details/51056048" target="_blank" rel="external">Python Tools for Machine Learning</a></p>
<ul>
<li>scikit-learn: SVM and others</li>
<li>Deep learning: Theano</li>
</ul>
<h1 id="reference">reference</h1>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; means pro and con of the tool!&lt;br&gt;
The conclusion: MDTraj seems a powerful tools, but once in a while it still feel troublesome.&lt;/p&gt;
    
    </summary>
    
      <category term="MD simulation" scheme="http://timchen314.com/categories/MD-simulation/"/>
    
    
      <category term="MD simulation" scheme="http://timchen314.com/tags/MD-simulation/"/>
    
  </entry>
  
  <entry>
    <title>solving linux problem</title>
    <link href="http://timchen314.com/linux_problem/"/>
    <id>http://timchen314.com/linux_problem/</id>
    <published>2017-11-05T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>解决各种linux问题。</p>
<a id="more"></a>
<h2 id="linux挂载2t以上硬盘">linux挂载2T以上硬盘</h2>
<ol start="0">
<li>
<p>找到硬盘编号<br>
<code>ls /dev/sd*</code><br>
结果一般为：<br>
<code>/dev/sda /dev/sda1 /dev/sda2 /dev/sda3 /dev/sdb</code><br>
后面跟很多数字的是系统盘，上面的例子中系统盘是<code>/dev/sda</code>；那么<code>/dev/sdb</code>就是新安装的备份盘。</p>
</li>
<li>
<p>root下，执行<code>parted /dev/sdb</code>以建立分区列表<br>
mklabel gpt  #(有不同选项，如MS-DOS gpt Mac) 3T/4T盘必须要手动建立分区列表<br>
mkpart + Enter键<br>
ext4 + Enter键<br>
&quot;Start&quot;&quot; 2048s + Enter键<br>
&quot;End&quot; -1s  + Enter键  #（s是单位2048s留给分区列表）<br>
<strong>可选步骤，对齐分区以最优化硬盘性能：</strong><br>
align-check TYPE + Enter键<br>
opt + Enter键<br>
&quot;partition number?&quot; 1 + Enter键</p>
</li>
<li>
<p><code>mkfs.ext4 /dev/sdb/</code> # 格式化硬盘</p>
</li>
<li>
<p><code>mount # 挂载</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir /home/your_name/backup <span class="comment">#建立文件夹</span></div><div class="line">mount -t ext4 /dev/sdb /home/your_name/backup <span class="comment">#挂载文件夹</span></div><div class="line">chown -R your_name:your_name /home/your_name/backup</div></pre></td></tr></table></figure>
</li>
<li>
<p>修改<code>/etc/fstab</code> # 设置开机后自动挂载备份硬盘<br>
得到硬盘的UUID：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@node34 ~]$ uuidgen /dev/sda</div><div class="line">c6af66d2-f6dc-4a4b-8d83-40ce2b8d0b75</div></pre></td></tr></table></figure>
<p>打开<code>/etc/fstabe</code>，加入备份盘的UUID：<br>
<code>UUID=c6af66d2-f6dc-4a4b-8d83-40ce2b8d0b75 /home/your_name/backup/ ext4 defaults 1 2</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决各种linux问题。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://timchen314.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://timchen314.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>numpy notes</title>
    <link href="http://timchen314.com/numpy/"/>
    <id>http://timchen314.com/numpy/</id>
    <published>2017-10-31T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]<br>
The fundamental package for scientific computing with Python.</p>
<a id="more"></a>
<h4 id="introduction">Introduction</h4>
<ol>
<li>
<p><mark>Best tutorial: <a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html#tricks-and-tips" target="_blank" rel="external">Quickstart tutorial</a></mark></p>
</li>
<li>
<p>Since pythoner usually do <code>import numpy as np</code>, in most scenes <mark>‘np’ measn ‘numpy’</mark></p>
</li>
<li>
<p><strong>Note: an 1d array in numpy acts like a row vector in linear algebra, but most lienar algebra textbook are written in column form!<br>
In text book: matrix x column vector = column vector<br>
In numpy: row vector x matrix.T = row vector</strong></p>
</li>
<li>
<p><mark>string type numpy array automatically encode the string to bytes!</mark></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new_a = a.astype(<span class="string">'U'</span>) <span class="comment"># get string instead of bytes</span></div></pre></td></tr></table></figure>
</li>
<li>
<p>帮助：<code>np.info</code><br>
例如<code>np.info(np.random)</code></p>
</li>
</ol>
<h4 id="broadcasting"><a href="https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html" target="_blank" rel="external">broadcasting</a></h4>
<p>Broadcasting is one of most error-prone concept in numpy.</p>
<blockquote>
<p>When operating on two arrays, NumPy compares their shapes element-wise. It starts with the trailing dimensions, and works its way forward. Two dimensions are compatible when:</p>
<ol>
<li>they are equal, or</li>
<li>one of them is 1</li>
</ol>
</blockquote>
<ol>
<li>
<p>reshape can turn off the broadcast</p>
</li>
<li>
<p>an telling example</p>
<blockquote>
<p>A      (4d array):  8 x 1 x 6 x 1<br>
B      (3d array):      7 x 1 x 5<br>
Result (4d array):  8 x 7 x 6 x 5</p>
</blockquote>
<p>So for a single dimension, the broadcast means numpy will expand (6 x 1) to (6 x 5)， and then do element-wise operation.</p>
</li>
</ol>
<h4 id="ndarray学习">ndarray学习</h4>
<p><a href="http://blog.csdn.net/qq403977698/article/details/47254597" target="_blank" rel="external">numpy中的ndarray方法和属性</a></p>
<ul>
<li>
<p>ndarray.mean(axis=None, dtype=None, out=None)：返回指定轴的数组元素均值</p>
</li>
<li>
<p>ndarray.var(axis=None, dtype=None, out=None, ddof=0)：返回数组的方差，沿指定的轴。</p>
</li>
<li>
<p>ndarray.std(axis=None, dtype=None, out=None, ddof=0)：沿给定的轴返回数则的标准差</p>
</li>
<li>
<p>ndarray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)：返回沿对角线的数组元素之和</p>
</li>
<li>
<p>ndarray.diagonal(offset=0, axis1=0, axis2=1)：返回对角线的所有元素。</p>
</li>
<li>
<p>最大/小值</p>
<ul>
<li>ndarray.argmin(axis=None, out=None):返回指定轴最小元素的索引。</li>
<li>darray.min(axis=None, out=None)：返回指定轴的最小值</li>
</ul>
</li>
<li>
<p>flat/flatten</p>
<ul>
<li>ndarray.flat 和 ndarray.T 一样不是函数调用</li>
</ul>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; x = X.flat</div><div class="line">   &gt;&gt;&gt; x</div><div class="line">&lt;numpy.flatiter object at <span class="number">0x9e82278</span>&gt;</div><div class="line">                            <span class="comment"># 不直接返回一维数组</span></div><div class="line">                            <span class="comment"># 但可直接索引</span></div></pre></td></tr></table></figure>
<ul>
<li>flatten()是函数调用，可以指定平坦化的参数。<br>
<code>ndarray.flatten(order='C')</code><br>
可选参数，order：<br>
（1）’C’：C-style，行序优先<br>
（2）’F’：Fortran-style，列序优先<br>
（3）’A’：保持<br>
（4）默认为’C’</li>
</ul>
</li>
<li>
<p>ndarray.transpose(*axes) :返回矩阵的转置矩阵</p>
</li>
<li>
<p>ndarray.take(indices, axis=None, out=None, mode=’raise’):获得数组的指定索引的数据，如：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; a.take([<span class="number">1</span>,<span class="number">3</span>],axis=<span class="number">1</span>) <span class="comment">#提取1，3列的数据</span></div><div class="line">array([[ <span class="number">1</span>,  <span class="number">3</span>],</div><div class="line">[ <span class="number">5</span>,  <span class="number">7</span>],</div><div class="line">[ <span class="number">9</span>, <span class="number">11</span>]])</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>numpy.argmax(a, axis=None, out=None)</code> <mark>非常有用</mark><br>
Returns the indices of the maximum values along an axis. <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argmax.html" target="_blank" rel="external">doc</a></p>
</li>
</ul>
<h4 id="构造矩阵">构造矩阵</h4>
<ul>
<li>arange()/linspace()</li>
<li>numpy.zeros，numpy.ones，numpy.eye, numpy.empty((2,3)), numpy.full((2,2),7) <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; <span class="keyword">print</span> np.zeros((<span class="number">3</span>,<span class="number">4</span>))</div><div class="line">[[ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]]</div><div class="line">   &gt;&gt;&gt; <span class="keyword">print</span> np.ones((<span class="number">3</span>,<span class="number">4</span>))</div><div class="line">[[ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]]</div><div class="line">   &gt;&gt;&gt; <span class="keyword">print</span> np.eye(<span class="number">3</span>)</div><div class="line">[[ <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>]]</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="矩阵indexing">矩阵indexing</h4>
<ol>
<li>
<p>automatic reshaping</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; a = np.arange(30)</div><div class="line">   &gt;&gt;&gt; a.shape = 2,-1,3  # -1 means &quot;whatever is needed&quot;</div><div class="line">   &gt;&gt;&gt; a.shape</div><div class="line">(2, 5, 3)</div></pre></td></tr></table></figure>
</li>
<li>
<p>Indexing with Arrays of Indices</p>
</li>
</ol>
<ul>
<li>Suppose a and idx is a np.array, then <code>a[i].shape == idx.shape</code></li>
<li>Supose a, idx_i and idx_j is a np.array, if <code>idx_i.shape == idx_j.shape</code>, then <code>a[i,j].shape == idx_i.shape</code>, idx_i is the first axis index of array a, idx_j is the second axis index of array a. <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list_ij=[i,j]</div><div class="line">a[list_ij] == a[i,j] <span class="comment"># this statement is true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li>Indexing with Boolean Arrays<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">   &gt;&gt;&gt; b = a &gt; <span class="number">4</span></div><div class="line">   &gt;&gt;&gt; b                                          <span class="comment"># b is a boolean with a's shape</span></div><div class="line">array([[<span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>],</div><div class="line">       [<span class="keyword">False</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>],</div><div class="line">       [ <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>]], dtype=bool)</div><div class="line">   &gt;&gt;&gt; a[b]                                       <span class="comment"># 1d array with the selected elements</span></div><div class="line">array([ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</div><div class="line">   &gt;&gt;&gt; a[b]=<span class="number">0</span></div><div class="line">   &gt;&gt;&gt; a</div><div class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">       [<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Note that a[b] is a 1d array! But a[b]=0 is a 2d array! This is because if you don’t assign a value to the ‘False’ element, there is no value for that element.</p>
<h4 id="数据添加与拷贝">数据添加与拷贝</h4>
<ul>
<li>
<p><code>c=a.copy</code>深拷贝</p>
</li>
<li>
<p>vstack和hstack函数：<br>
vstack、hstack是<mark>深拷贝</mark></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; a = np.ones((<span class="number">2</span>,<span class="number">2</span>))</div><div class="line">   &gt;&gt;&gt; b = np.eye(<span class="number">2</span>)</div><div class="line">   &gt;&gt;&gt; <span class="keyword">print</span> np.vstack((a,b))</div><div class="line">[[ <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">1.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>]]</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>row_stack(matrix,a_row)</code> 向二维矩阵尾部添加一行</p>
</li>
</ul>
<h4 id="numpy-linalg">numpy.linalg</h4>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; <span class="keyword">import</span> numpy.linalg <span class="keyword">as</span> nplg</div><div class="line">   &gt;&gt;&gt; a = np.array([[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">3</span>]])</div><div class="line">   &gt;&gt;&gt; <span class="keyword">print</span> nplg.eig(a)</div><div class="line">(array([ <span class="number">3.</span>,  <span class="number">1.</span>]), array([[ <span class="number">0.</span>        ,  <span class="number">0.70710678</span>],</div><div class="line">       [ <span class="number">1.</span>        , <span class="number">-0.70710678</span>]]))</div></pre></td></tr></table></figure>
<h4 id="comparison">comparison</h4>
<ul>
<li>a == b #逐个元素比较</li>
<li>a &lt; 2</li>
<li><code>np.array_equal(a,b)</code></li>
</ul>
<h4 id="arithmetic-operation">arithmetic operation</h4>
<ul>
<li>+, -, *, / #element-wise</li>
<li>np.dot(a,b) # matrix multiply</li>
</ul>
<h4 id="i-o">I/O</h4>
<ul>
<li>np.save(‘myarray’,a)</li>
<li>np.savez(‘myarray.npz’,a,b)</li>
<li>np.save(‘myarray.npy’,a)</li>
<li>np.loadtxt/savetxt/genfromtxt</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;br&gt;
The fundamental package for scientific computing with Python.&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://timchen314.com/categories/python/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
      <category term="编程语言" scheme="http://timchen314.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>python notes</title>
    <link href="http://timchen314.com/python_notes/"/>
    <id>http://timchen314.com/python_notes/</id>
    <published>2017-10-02T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]<br>
Python features a dynamic type system and automatic memory management and supports multiple programming paradigms.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<a id="more"></a>
<h2 id="python-syntax">Python Syntax</h2>
<h3 id="python-doc"><a href="https://docs.python.org" target="_blank" rel="external">Python doc</a></h3>
<h3 id="builtin-functions-import-builtins"><a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="external">builtin functions</a> (import builtin<strong>s</strong>)</h3>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><s>abs()</s></td>
<td><s>dict()</s></td>
<td><s>help()</s></td>
<td><s>min()</s></td>
<td><s>setattr()</s></td>
</tr>
<tr>
<td><s>all()</s></td>
<td>dir()</td>
<td><s>hex()</s></td>
<td><s>next()</s></td>
<td>slice()</td>
</tr>
<tr>
<td><s>any()</s></td>
<td>divmod()</td>
<td><s>id()</s></td>
<td><s>object()</s></td>
<td>sorted()</td>
</tr>
<tr>
<td>ascii()</td>
<td><s>enumerate()</s></td>
<td><s>input()</s></td>
<td><s>oct()</s></td>
<td>staticmethod()</td>
</tr>
<tr>
<td>bin()</td>
<td>eval()</td>
<td><s>int()</s></td>
<td><s>open()</s></td>
<td><s>str()</s></td>
</tr>
<tr>
<td><s>bool()</s></td>
<td>exec()</td>
<td><s>isinstance()</s></td>
<td>ord()</td>
<td><s>sum()</s></td>
</tr>
<tr>
<td>bytearray()</td>
<td>filter()</td>
<td>issubclass()</td>
<td>pow()</td>
<td>super()</td>
</tr>
<tr>
<td>bytes()</td>
<td><s>float()</s></td>
<td><s>iter()</s></td>
<td><s>print()</s></td>
<td><s>tuple()</s></td>
</tr>
<tr>
<td>callable()</td>
<td>format()</td>
<td><s>len()</s></td>
<td>property()</td>
<td><s>type()</s></td>
</tr>
<tr>
<td><s>chr()</s></td>
<td>frozenset()</td>
<td><s>list()</s></td>
<td><s>range()</s></td>
<td>vars()</td>
</tr>
<tr>
<td>classmethod()</td>
<td><s>getattr()</s></td>
<td>locals()</td>
<td><s>repr()</s></td>
<td><s>zip()</s></td>
</tr>
<tr>
<td>compile()</td>
<td>globals()</td>
<td><s>map()</s></td>
<td>reversed()</td>
<td>__import__()</td>
</tr>
<tr>
<td>complex()</td>
<td><s>hasattr()</s></td>
<td><s>max()</s></td>
<td>round()</td>
<td></td>
</tr>
<tr>
<td><s>delattr()</s></td>
<td>hash()</td>
<td>memoryview()</td>
<td><s>set()</s></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="sum">sum()</h4>
<p>sum(iterable[, start]) ，iterable</p>
<h4 id="max"><a href="https://docs.python.org/3/library/functions.html#max" target="_blank" rel="external">max()</a></h4>
<blockquote>
<p>max(iterable, *[, key, default])<br>
max(arg1, arg2, *args[, key])</p>
</blockquote>
<blockquote>
<p>Return the largest item in an iterable or the largest of two or more arguments.</p>
</blockquote>
<blockquote>
<p><strong>If one positional argument is provided, it should be an iterable.</strong> The largest item in the iterable is returned. <strong>If two or more positional arguments are provided, the largest of the positional arguments is returned.</strong></p>
</blockquote>
<blockquote>
<p>There are two optional keyword-only arguments. The key argument specifies a one-argument ordering function like that used for list.sort(). The default argument specifies an object to return if the provided iterable is empty. If the iterable is empty and default is not provided, a ValueError is raised.</p>
</blockquote>
<blockquote>
<p>If multiple items are maximal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as sorted(iterable, key=keyfunc, reverse=True)[0] and heapq.nlargest(1, iterable,key=keyfunc).</p>
</blockquote>
<ul>
<li><a href="http://www.cnblogs.com/whatisfantasy/p/6273913.html" target="_blank" rel="external">几个例子</a></li>
</ul>
<h4 id="next-iterator-default">next(iterator[, default])</h4>
<h4 id="all-any"><code>all()/any()</code></h4>
<blockquote>
<p>Return True if all elements of the iterable are true (or if the iterable is empty). Equivalent to:</p>
</blockquote>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(iterable)</span>:</span></div><div class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<h4 id="filter">filter</h4>
<p>把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。<br>
python3起，filter 函数返回的对象从列表改为 filter object（迭代器）。</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">[item <span class="keyword">for</span> item <span class="keyword">in</span> filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]) ]</div></pre></td></tr></table></figure>
<h4 id="getattr-setattr-hasattr-delattr">getattr()/setattr()/hasattr()/delattr()</h4>
<blockquote>
<p>getattr(x, ‘foobar’) is equivalent to x.foobar</p>
</blockquote>
<p>All these function are similar. See <strong>docs</strong> for more.</p>
<h4 id="vars">vars()</h4>
<p>From python doc:</p>
<blockquote>
<p><strong>Return the __dict__</strong> attribute for a module, class, instance, or any other object with a __dict__ attribute.</p>
</blockquote>
<h4 id="enumerate">enumerate</h4>
<p>如果mylist是一个二维数组：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i,line <span class="keyword">in</span> enumerate(mylist):</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p><strong>line是元组</strong></p>
<h4 id="staticmethod-function">staticmethod(function)</h4>
<p>PS:</p>
<blockquote>
<p>@classmethod means: when this method is called, we pass the class as the first argument instead of the instance of that class (as we normally do with methods). This means you can use the class and its properties inside that method rather than a particular instance.<br>
@staticmethod means: when this method is called, we don’t pass an instance of the class to it (as we normally do with methods). This means you can put a function inside a class but you can’t access the instance of that class (this is useful when your method does not use the instance).</p>
</blockquote>
<p>classmethod涉及类，不涉及类的实例；staticmethod两者都不涉及，但与类有紧密的联系<br>
<a href="https://www.zhihu.com/question/20021164" target="_blank" rel="external">ref:</a></p>
<h3 id="python-类属性-实例属性">Python——类属性/实例属性</h3>
<p><a href="http://blog.csdn.net/bolike/article/details/21554901" target="_blank" rel="external">Python——类属性/实例属性</a><br>
<a href="http://www.cnblogs.com/dream-for/p/5199308.html" target="_blank" rel="external">Python类属性，实例属性</a> #非常好</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">C.__name__     <span class="comment"># 类C的名字（字符串）</span></div><div class="line">C.__doc__      <span class="comment"># 类C的文档字符串</span></div><div class="line">C.__bases__    <span class="comment"># 类C的所有父类构成的元组</span></div><div class="line">C.__dict__     <span class="comment"># 类C的属性</span></div><div class="line">C.__module__   <span class="comment"># 类C定义所在的模块</span></div><div class="line">C.__class__    <span class="comment"># 实例C对应的类</span></div></pre></td></tr></table></figure>
<ul>
<li>module.<strong>file</strong><br>
<strong>含有module的路径！</strong></li>
</ul>
<h3 id="操作符特性：a-b-b-a-b">操作符特性：<code>a, b = b, a+b</code></h3>
<p>Take the calculation of Fibinacci:<br>
<code>a, b = b, a+b</code>  # a and a+b will be computed separately</p>
<h3 id="print">print</h3>
<ul>
<li><code>print(end='str')</code></li>
</ul>
<h3 id="dict">dict</h3>
<ul>
<li>
<p>mydict.iterm() 将项以list返回<br>
<code>for key,val in myd3.iterm():</code></p>
</li>
<li>
<p><s>iteriterms()返回迭代器，节省内存</s> <strong>Only for python2</strong></p>
</li>
</ul>
<h3 id="file">file</h3>
<ol>
<li>
<p><code>f.readline()/readlines()/write()/writelines()</code></p>
<ul>
<li><code>readline()</code>#每次读入一行</li>
<li><code>readlines()</code> #以list的形式存储每一行</li>
<li><code>write()</code> #自动换行</li>
<li><code>writelines()</code> #不自动换行</li>
</ul>
</li>
<li>
<p>f.closed<br>
注意closed是一个变量，值为True/False</p>
</li>
</ol>
<h3 id="list-comprehension">list comprehension</h3>
<ul>
<li>two fold list comprehension <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">content = f.readlines()</div><div class="line">word_list=[word <span class="keyword">for</span> line <span class="keyword">in</span> content <span class="keyword">for</span> word <span class="keyword">in</span> line.split()]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="string">string</h3>
<h4 id="1-strip-s-chars-去掉首尾的字符">1. strip(s[, chars]) 去掉首尾的字符</h4>
<p>默认情况下strip() 去掉首尾的whitespace 【whitespace include \n, \t and \r】。</p>
<blockquote>
<p>The charsargument is not a prefix or suffix; rather, all combinations of its values are stripped:</p>
</blockquote>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; <span class="string">'www.example.com'</span>.strip(<span class="string">'cmowz.'</span>) </div><div class="line"><span class="string">'example'</span></div></pre></td></tr></table></figure>
<h4 id="2-format">2. format</h4>
<ul>
<li>‘{0:.2f} {1:s} {2:d}’.format( v0[,v1[v2…] )</li>
<li>可以使用关键词</li>
<li>应用时转化：{!s}、{!r}</li>
<li>旧式字符串格式化符号是 %，如：{0:%.4f}</li>
</ul>
<h5 id="custom-object-define-format-in-a-class">custom object(define __format__ in a class)</h5>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HAL9000</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__format__</span><span class="params">(self, format)</span>:</span></div><div class="line">        <span class="keyword">if</span> (format == <span class="string">'open-the-pod-bay-doors'</span>):</div><div class="line">            <span class="keyword">return</span> <span class="string">"I'm afraid I can't do that."</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'HAL 9000'</span></div></pre></td></tr></table></figure>
<h5 id="datetime">datetime</h5>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="string">'&#123;:%Y-%m-%d %H:%M&#125;'</span>.format(datetime(<span class="number">2001</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</div></pre></td></tr></table></figure>
<h5 id="named-placeholder">named placeholder</h5>
<p>use key to hold the place. <strong>input the dictionary as elements</strong></p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data = &#123;<span class="string">'first'</span>: <span class="string">'Hodor'</span>, <span class="string">'last'</span>: <span class="string">'Hodor!'</span>&#125;</div><div class="line"><span class="string">'&#123;first&#125; &#123;last&#125;'</span>.format(**data)</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="string">'&#123;first&#125; &#123;last&#125;'</span>.format(first=<span class="string">'Hodor'</span>, last=<span class="string">'Hodor!'</span>)</div></pre></td></tr></table></figure>
<h5 id="getitem-and-getattr">Getitem and Getattr</h5>
<h5 id="parametrized-formats">Parametrized formats</h5>
<h4 id="3-rjust-width-fillchar-ljust-center-is-similar">3. rjust(width[, fillchar])  【ljust(), center() is similar】</h4>
<h4 id="4-zfill-n-左侧填充0至n位">4. zfill(n) 左侧填充0至n位</h4>
<p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串。</p>
<h4 id="5-split-str-num-string-count-str-str-and-num-is-not-a-kewword">5. split(str=&quot;&quot;, num=string.count(str)) # str and num is not a kewword</h4>
<ul>
<li>num – 分割次数。</li>
<li><strong>注意split后常会产生空字符</strong></li>
</ul>
<h4 id="6-join">6. join</h4>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">out.write(<span class="string">" "</span>.join(mylist))</div><div class="line"><span class="comment"># 用" "链接mylist中的iterm</span></div></pre></td></tr></table></figure>
<ul>
<li>elegant use <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">out.write(<span class="string">" "</span>.join( map(str,iterable)  ))</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="7-encode-decode">7. encode()/decode()</h4>
<ul>
<li>str.encode(encoding=“utf-8”, errors=“strict”)
<blockquote>
<p>设置不同错误的处理方案。默认为 ‘strict’,意为编码错误引起一个UnicodeError。 其他可能得值有 ‘ignore’, ‘replace’, ‘xmlcharrefreplace’, ‘backslashreplace’ 以及通过 codecs.register_error() 注册的任何值。</p>
</blockquote>
</li>
</ul>
<h3 id="ternary-operator">ternary operator</h3>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result=<span class="string">'5 is larger than 3'</span> <span class="keyword">if</span> <span class="number">5</span>&gt;<span class="number">3</span> <span class="keyword">else</span> <span class="string">'5 is not larger than 3'</span></div></pre></td></tr></table></figure>
<h3 id="cli">CLI</h3>
<ul>
<li><code>python -c &quot;print('hello world')&quot;</code></li>
<li><code>python -m mymodule</code>
<ol>
<li>sys.path is changed</li>
<li>it’s equal to <code>python mymodule.py</code></li>
</ol>
</li>
</ul>
<h2 id="module">module</h2>
<h3 id="re-module">re module</h3>
<h4 id="1-replace-str1-str2">1. replace(str1, str2)</h4>
<h3 id="sys-module">sys module</h3>
<ul>
<li>sys.version/version_info(version_info is a object)</li>
</ul>
<h3 id="os-module">os module</h3>
<h4 id="1-about-path">1. about path</h4>
<p><a href="http://www.cnblogs.com/dkblog/archive/2011/03/25/1995537.html" target="_blank" rel="external">os.path模块</a></p>
<ul>
<li>
<p>about path</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">os.getcwd()</div><div class="line">os.chdir(<span class="string">'../'</span>)</div><div class="line">os.listdir()</div><div class="line">os.chdir(<span class="string">'../'</span>)</div><div class="line">os.path.exist   <span class="comment">#determine if a file or dir exists</span></div></pre></td></tr></table></figure>
</li>
<li>
<p>os.remove<br>
remove a file; if file does not exists, an Error will be throwed out.</p>
</li>
<li>
<p>os.rmdir<br>
remove a dir</p>
</li>
<li>
<p>os.path.splitext(path)<br>
Split the pathname path into a pair (root, ext)</p>
</li>
<li>
<p>os.path.basename(your_path)</p>
</li>
</ul>
<h4 id="2-os-popen">2. <s>os.popen</s></h4>
<ol>
<li>
<p><strong>shell cmd is executed in background and you can’t change it</strong></p>
</li>
<li>
<p>inplemented by <em>subprocess.Popen</em>, so why not you use <em>subprocess</em>?</p>
</li>
</ol>
<p><a href="https://docs.python.org/3.5/library/os.html?highlight=os.popen#os.popen" target="_blank" rel="external">python doc</a></p>
<h3 id="time-calendar">time &amp; calendar</h3>
<p><a href="http://www.runoob.com/python/python-date-time.html" target="_blank" rel="external">Python 日期和时间 runoob</a></p>
<ul>
<li>time.time()	<br>
Return the current time in seconds since the Epoch.</li>
<li>mktime(tupletime)</li>
<li>localtime()		<br>
Convert seconds since the Epoch to a time tuple expressing local time.<br>
When ‘seconds’ is not passed in, convert the current time instead.</li>
<li>strftime()	<br>
strftime(format[, tuple]) -&gt; string</li>
<li>strptime()	<br>
strptime(string, format) -&gt; struct_time	<br>
Parse a string to a time tuple according to a format specification.</li>
<li>time.sleep(secs)</li>
<li>calendar.isleap(year)</li>
<li>calendar.weekday(year,month,day)</li>
</ul>
<h3 id="subprocess-module">subprocess module</h3>
<p><a href="https://docs.python.org/3.5/library/subprocess.html?highlight=subprocess#frequently-used-arguments" target="_blank" rel="external">python doc</a></p>
<h4 id="1-for-cmd-that-needn-t-stdout">1.  For cmd that needn’t stdout</h4>
<p><code>subprocess.run(&quot;cp standard_py/*py .&quot;, shell=True, check=True)</code></p>
<ul>
<li><em>shell=True</em><br>
you can use a string instead of a series of args!</li>
<li><em>check=True</em><br>
throw an Error if shell cmd exit wrong!</li>
</ul>
<h4 id="2-for-cmd-needing-stdout">2. For cmd needing stdout</h4>
<p>An example:</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ret = subprocess.run(<span class="string">"ls standard_py/*py"</span>, shell=<span class="keyword">True</span>, check=<span class="keyword">True</span>, universal_newlines=<span class="keyword">True</span>, stdout=PIPE)</div><div class="line">print(ret.stdout, end=<span class="string">""</span>)</div></pre></td></tr></table></figure>
<ul>
<li>
<p><em>universal_newlines=True</em><br>
stdout<br>
Captured stdout from the child process. A bytes sequence, or a string if run() was called with universal_newlines=True. None if stdout was not captured.</p>
</li>
<li>
<p>stdout=PIPE<br>
without this argument, stdout will be printed as stdout of python script, instead of captured, as from python doc:</p>
<blockquote>
<p>This(ct: means <em>run</em>) does not capture stdout or stderr by default. To do so, pass PIPE for the stdout and/or stderr arguments.</p>
</blockquote>
</li>
</ul>
<h3 id="glob-module">glob module</h3>
<p>The glob module finds all the pathnames matching a specified pattern</p>
<ul>
<li>glob.glob(pathname, *, recursive=False)</li>
<li>glob.iglob(pathname, recursive=False)<br>
Return an iterator which yields the same values as glob()</li>
</ul>
<h3 id="collections-module-廖雪峰"><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431953239820157155d21c494e5786fce303f3018c86000" target="_blank" rel="external">collections module 廖雪峰</a></h3>
<ul>
<li>Counter</li>
</ul>
<h3 id="pil">PIL</h3>
<ul>
<li><code>img = Image.open(‘origin.png’) #支持多种格式</code><br>
注意：类似于.htm和.html，.jpg和.jpeg没有区别，只是两种写法</li>
<li>font<br>
<code>font = ImageFont.truetype(&quot;FreeMono.ttf&quot;, 28, encoding=&quot;unic&quot;)</code></li>
<li><code>img2.save('./test_image_data/cat_001_blur.jpeg','jpeg')</code> #save(‘path’,‘format’)</li>
<li>resize()、rotate()、convert(mode=‘your_mode’)</li>
<li>Coordinates (0, 0) in the upper left corner.</li>
<li><code>draw = ImageDraw.Draw(img)</code> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#img is from:</div><div class="line">#img = Image.open(&apos;./test_image_data/cat_001.jpg&apos;)</div><div class="line">draw.text((width - add_width, 0), number, font=font, fill=fillcolor) # first parameter is the start point of the draw</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="random-doc">random <a href="https://docs.python.org/3/library/random.html" target="_blank" rel="external">doc</a></h3>
<ul>
<li>random.seed(a=None, version=2)</li>
</ul>
<h4 id="functions-for-integers">functions for integers</h4>
<ul>
<li>random.randrange(start, stop[, step])</li>
<li>random.randint(a, b)
<blockquote>
<p>return a random integer N such that a &lt;= N &lt;= b. Alias for randrange(a, b+1).</p>
</blockquote>
</li>
</ul>
<h4 id="real-valued-distributions">real-valued distributions</h4>
<ul>
<li>random.random()
<blockquote>
<p>Return the next random floating point number in the range [0.0, 1.0).</p>
</blockquote>
</li>
<li>random.uniform(a, b)</li>
<li>random.gauss(mu, sigma)</li>
</ul>
<h3 id="shutil">shutil</h3>
<blockquote>
<p>The shutil module offers a number of high-level operations on files and collections of files. In particular, functions are provided which support file copying and removal.</p>
</blockquote>
<p><code>shutil.copyfile(src, dst)</code></p>
<h2 id="other-useful-things">other useful things</h2>
<h3 id="ipython">ipython</h3>
<ol>
<li><a href="https://www.cnblogs.com/cuiyubo/p/6823478.html" target="_blank" rel="external">入门</a></li>
</ol>
<ul>
<li>“?” 帮助与显示信息<br>
<code>?save</code> 会给出save命令的用法、对象的签名<br>
<code>??your_function</code> 显示源代码</li>
<li><code>!pwd</code> 加!执行shell command</li>
<li><code>%hist</code></li>
<li><code>%edit</code> 使用编辑器打开</li>
</ul>
<ol start="2">
<li><code>%save your_filename 1-30</code></li>
</ol>
<h3 id="conda">conda</h3>
<ul>
<li>minicoda<br>
<code># pip install conda # does not work!</code><br>
<mark>You have to download miniconda to use conda as package manager.</mark></li>
<li><a href="https://zhuanlan.zhihu.com/p/22678445" target="_blank" rel="external">使用conda管理python环境</a></li>
<li>anaconda<br>
<a href="http://python.jobbole.com/86236/" target="_blank" rel="external">Anaconda使用总结</a></li>
<li>conda install scipy #安装scipy
<ul>
<li><code>conda install --download-only ipython-notebook</code></li>
<li><code>conda install --offline -f ***.tar.bz2</code> 离线安装</li>
</ul>
</li>
<li>conda list #列出已安装的包</li>
<li>环境<br>
<code>conda create -n env_name python=2.7 # create new env</code><br>
<code>conda env list # list all env</code><br>
<code>conda env export &gt; environment.yml # export to file</code><br>
<code>source activate your_env_name # enter your env.</code><br>
<code>source activate root # to switch back</code></li>
</ul>
<h3 id="pip">pip</h3>
<ul>
<li>Usage：<code>pip --help</code><br>
<a href="http://www.tuicool.com/articles/NFV3yaJ" target="_blank" rel="external">for more info</a></li>
<li>install<br>
<a href="https://www.cnblogs.com/mangoVic/p/6428369.html" target="_blank" rel="external">centos7下使用yum安装pip</a>
<blockquote>
<p>首先安装epel扩展源：<br>
　　yum -y install epel-release<br>
　　更新完成之后，就可安装pip：<br>
　　yum -y install python-pip<br>
　　安装完成之后清除cache：<br>
　　yum clean all</p>
</blockquote>
</li>
</ul>
<h4 id="error">error</h4>
<ul>
<li>
<p>Could not fetch URL <a href="https://pypi.python.org/simple/pytest-cov/" target="_blank" rel="external">https://pypi.python.org/simple/pytest-cov/</a>…</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   Could not fetch URL https://pypi.python.org/simple/pytest-cov/: There was a problem confirming the ssl certificate: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:600) - skipping</div><div class="line">  Could not find a version that satisfies the requirement pytest-cov (from versions: )</div><div class="line">No matching distribution found for pytest-cov</div></pre></td></tr></table></figure>
<p>解决：</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --trusted-host pypi.python.org pytest-xdist</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="需要的工具">需要的工具</h2>
<ul>
<li>circleci2.0</li>
</ul>
<h2 id="工程能力">工程能力</h2>
<h3 id="工程-oop">工程/OOP</h3>
<ul>
<li>
<p><a href="https://stackoverflow.com/questions/20661448/python-should-all-member-variables-be-initialized-in-init" target="_blank" rel="external">setting all instance variables in the __init__ is cleaner</a></p>
</li>
<li>
<p>工厂函数<br>
见python核心编程：工厂函数看上去有点像函数，实质上他们是类，当你调用它们时，实际上是生成了该类型的一个实例，就像工厂生产货物一样.</p>
</li>
</ul>
<h3 id="debug">debug</h3>
<p>要融汇的方法<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>：</p>
<blockquote>
<p>回答先在本地重现的就算了吧……那么容易就能重现通常说明最基本的代码逻辑覆盖测试都没做好。相比起C/C++来说，动态语言还是比较幸福的，异常都有详细的堆栈，只要打印到日志里就行了，错误信息通常也比较明确。要点在于该打印的日志一点都不能少，严禁在出现异常的时候只打印错误信息而不打堆栈。但归根结底来说，发现和解决bug靠的是良好的程序结构，必要的defensive（关键函数的参数合法性校验等），自动化的测试流程，线上调试只是亡羊补牢。</p>
</blockquote>
<h3 id="test">test</h3>
<p>pytest比较好！从它入门 ！<br>
<a href="https://stackoverflow.com/questions/28408750/unittest-vs-pytest-vs-nose" target="_blank" rel="external">unittest vs pytest vs nose </a><br>
<a href="http://pythontesting.net/transcripts/2-pytest-vs-unittest-vs-nose/" target="_blank" rel="external">Pytest vs Unittest vs Nose</a> 【详细的对比】<br>
待读！：<br>
<a href="https://stackoverflow.com/questions/3371255/writing-unit-tests-in-python-how-do-i-start" target="_blank" rel="external">Writing unit tests in Python: How do I start? </a><br>
<a href="https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing/" target="_blank" rel="external">Improve Your Python: Understanding Unit Testing</a><br>
<a href="http://www.cnblogs.com/beer/p/5075619.html" target="_blank" rel="external">python自动化测试</a> 【先读】<br>
<a href="http://www.cnblogs.com/yufeihlf/p/5752146.html" target="_blank" rel="external">最完整的自动化测试流程</a></p>
<h2 id="python缺点">python缺点</h2>
<ul>
<li>efficiency
<ul>
<li>slow than java</li>
<li>global lock, which makes multi-threads suck</li>
</ul>
</li>
<li>hard to distribution (compare to JAVA et al., python is dependent to package)</li>
<li>easily decompiled</li>
</ul>
<h3 id="和其他语言的对比">和其他语言的对比</h3>
<ul>
<li>ruby<br>
ruby最大的优势在于Ruby on Rails</li>
</ul>
<h3 id="我的经验">我的经验</h3>
<ul>
<li>都说python有很多包、方便，然而包里有可能有很多坑（bug or bad practice），比如Pillow中遇到过<code>**karg</code>的滥用。这些特点使得python很容易开发原型，但很难构建稳定、高效、一致的大型应用。</li>
<li>有不少不符合直觉的&quot;feature&quot;<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup><br>
例如： <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; a = ([<span class="number">1</span>], [<span class="number">2</span>])</div><div class="line">   &gt;&gt;&gt; a[<span class="number">0</span>] += [<span class="number">3</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">""</span>, line <span class="number">1</span>, <span class="keyword">in</span> </div><div class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</div><div class="line">   &gt;&gt;&gt; a</div><div class="line">([<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>])</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="reference">reference</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)#Features_and_philosophy" target="_blank" rel="external">Python</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://www.zhihu.com/people/ling-jian-94/answers" target="_blank" rel="external">老程序员解bug有那些通用套路？</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://www.zhihu.com/question/66941121" target="_blank" rel="external">有哪些明明是 bug，却被说成是 feature 的例子？</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;br&gt;
Python features a dynamic type system and automatic memory management and supports multiple programming paradigms.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://timchen314.com/categories/python/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
      <category term="编程语言" scheme="http://timchen314.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>vmd笔记</title>
    <link href="http://timchen314.com/vmd%E7%AC%94%E8%AE%B0/"/>
    <id>http://timchen314.com/vmd笔记/</id>
    <published>2017-09-29T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>
<p>什么是VMD？<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<blockquote>
<p>VMD is a molecular visualization program for displaying, animating, and analyzing large biomolecular systems using 3-D graphics and built-in scripting.</p>
</blockquote>
</li>
<li>
<p><a href="http://www.ks.uiuc.edu/Gallery/Science-New/" target="_blank" rel="external">VMD官网的图片示例展览</a></p>
</li>
<li>
<p><strong>本文定位</strong>：本文不适合作为入门教程，适合于在进阶阶段作为参考。本文偏重于VMD脚本；图形界面(GUI)上的操作因为比较简单，讨论的较少。</p>
</li>
</ul>
<a id="more"></a>
<h2 id="显示">显示</h2>
<ol start="0">
<li>
<p><mark>console中，输入命令且不加参数，就会显示帮助信息</mark><br>
tcl语言作为脚本语言，tcl语法可以参考<a href="https://wenku.baidu.com/view/aaf5d6d449649b6648d74771.html" target="_blank" rel="external">TCL脚本入门教程</a>【当然没必要学完】<br>
如何进入console：Extension -&gt; Tk Console<br>
例子：</p>
<ul>
<li><code>console% measure</code>结果<a href="https://res.cloudinary.com/do7yb5qw4/image/upload/v1506587376/%E6%9D%82/vmd_measure.jpg" target="_blank" rel="external">见图</a></li>
<li><code>console% mol</code></li>
<li><code>pbc</code>…</li>
</ul>
</li>
<li>
<p>pbc</p>
<ul>
<li>pbc是周期性边界条件的缩写（periodic boundary condition）</li>
<li><code>pbc wrap -all 【将粒子折回盒子内】</code></li>
<li>pbc wrap -shiftcenterrel {-0.5 -0.5 -0.5}<br>
我们希望wrap后坐标的中心在{0 0 0}处，然而，默认情况下，wrap的中心在{L/2 L/2 L/2}处，所以我们要将其平移回来！</li>
<li><code>pbc set {1308.998 1278.998 1281.998} -all</code>：手动定义盒子</li>
<li>画盒子<br>
pbc box -on 【画出盒子】<br>
pbc box -center origin 【设定盒子中心的位置为{0 0 0}，而默认的盒子{0 0 0}点在盒子角上】<br>
pbc box -center origin -style tubes -width 1 -color gray</li>
<li>pbc join res -border 5 【接上由于pbc导致的盒子边界处的断键】</li>
</ul>
</li>
<li>
<p>display</p>
<ul>
<li>display projection orthographic<br>
【相当于在display选项卡中选择orthographic】</li>
<li>display distance x<br>
设置东西与屏幕的距离，越大则分子离屏幕越近，相当于放大。不可太小比如几十，否则有凸镜的效果</li>
</ul>
</li>
<li>
<p>背景设置为白色<br>
（Graphics-&gt;Colors-&gt;Categories栏-&gt;选Display-&gt;再在name栏选Background）时，图像会显得比较浅。修正这个问题的方法是：去掉Display-&gt;Depth Cueing</p>
</li>
<li>
<p>graphics<br>
graphics top list【to show a list of number, standing for the ID of each object】<br>
graphics top text {40 0 20} “my drawing objects”  # 文字<br>
graphics top info ID  # The detailed information about each object<br>
graphics top delete ID<br>
<mark>box is also considered as graphics in VMD</mark></p>
<ul>
<li>draw shapes【画图形】<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup><br>
graphics top color COLORID【先设定颜色后画图形才能设定成功】【colorid for each color can be found in Graphics -&gt; Colors -&gt; menu 】<br>
graphics top sphere {10 10 10} radius 10 resolution 80<br>
graphics top line {10 0 0} {0 0 0} width 5 style dashed<br>
graphics top material transparent<br>
graphics top delete all/ID【delete shapes】<br>
<strong>NOTE</strong>: vmd看gromacs文件（*.gro）时，会把单位自动换位埃，比如在.gro文件中，坐标为1，则vmd中坐标为10，画图形时，可能会用到</li>
</ul>
</li>
<li>
<p>colorinfo colors<br>
显示有多少种预置颜色，比如red</p>
</li>
<li>
<p>旋转<br>
rotate x by/to 90</p>
</li>
</ol>
<h2 id="script">Script</h2>
<h3 id="基本命令">基本命令</h3>
<ol>
<li>~/.vmdrc ： 配置文件</li>
<li>logfile my.log<br>
在console中输入此命令,可以将你在图形界面中的操作保存成脚本，存储在my.log中    <strong><em>有用又简单的命令</em></strong> !!!</li>
<li>console中导入脚本<br>
source yourscript.tcl</li>
<li>不显示图形界面的执行脚本<br>
<code>sh$ vmd -dispdev none -e script.tcl</code><br>
需要注意到的是，使用<code>-dispdev none</code>选项后，用<code>pbc</code>命令的脚本回报错：<br>
<code>invalid command name &quot;pbc&quot;</code><br>
在脚本中添加下列命令即可解决该错误：<br>
<code>package require pbctools</code></li>
</ol>
<h3 id="mol">mol</h3>
<p>mol的用法帮助：如前面第0节所述，在console中输入mol并且不加参数，就会显示mol的用法。<br>
这里要介绍VMD中两个重要的概念：<strong>molid</strong>（molecular ID）和<strong>repid</strong>（representation ID）。<br>
<mark>molid</mark>：对单个frame，molid恒等于0<br>
<mark>repid</mark>：打开一个frame，默认的repid为0<br>
如果你想添加第二种呈现方式（representation），可以用：<code>mol addrep 0</code>向molid为0的图中，新增一种representation，这一representation的repid等于之前最大的repid+1。<br>
GUI中，Graphics -&gt; Representations -&gt; Create Rep 就相当于下列命令：</p>
   <figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mol addrep <span class="number">0</span></div><div class="line">mol modselect <span class="number">1</span> <span class="number">0</span> <span class="string">"type 1"</span></div></pre></td></tr></table></figure>
<ul>
<li>
<p><mark>注意：写脚本时，尤其要注意的一点是如果打开一个frame成功，会隐式的执行一次<code>mol addrep 0</code>！</mark><br>
例如，我们将类型为A的原子显示成蓝色（ColorID 0）、将B类型的原子显示成红色（ColorID 1），脚本这样写：</p>
 <figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># mol addrep 0     # <span class="doctag">NOTE:</span> VMD has execute this statement invisibly. If  </span></div><div class="line"><span class="comment">#                    you add this "mol addrep 0" manually, there will </span></div><div class="line"><span class="comment">#                    be an error. </span></div><div class="line">mol modselect <span class="number">0</span> <span class="number">0</span> <span class="string">"type A"</span></div><div class="line">mol modcolor <span class="number">0</span> <span class="number">0</span> ColorID <span class="number">0</span></div><div class="line">mol addrep <span class="number">0</span></div><div class="line"><span class="comment"># now there are two "rep". The index of second "rep" is 1.</span></div><div class="line">mol modselect <span class="number">1</span> <span class="number">0</span> <span class="string">"type B"</span></div><div class="line">mol modcolor <span class="number">0</span> <span class="number">0</span> ColorID <span class="number">0</span></div></pre></td></tr></table></figure>
</li>
<li>
<p>mol default style {CPK}<br>
【相当于Graphical选项卡中选择Representations,再在Draw style中Drawing Method下选择CPK】</p>
</li>
<li>
<p>mol default material {Diffuse}<br>
【相当于Graphical选项卡中选择Representations,再在Draw style中Material下选择Diffuse】</p>
</li>
<li>
<p>mol list<br>
列出目前所有representation</p>
</li>
<li>
<p>mol delrep 3 0<br>
与mol addrep 0相对，删除molid=0，repid=3的mol</p>
</li>
<li>
<p>molinfo list/num<br>
显示全部分子的molid</p>
</li>
</ul>
<h3 id="atomselect">atomselect</h3>
<p>例子：</p>
   <figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> particle [atomselect <span class="number">0</span> <span class="string">"index&lt;13000"</span>]</div><div class="line">$particle <span class="keyword">set</span> resname CD  #默认是空</div><div class="line">$particle <span class="keyword">set</span> chain X</div><div class="line">$particle <span class="keyword">set</span> resid <span class="number">1</span>     #默认是<span class="number">0</span></div><div class="line">$particle <span class="keyword">set</span> radius <span class="number">0.6</span></div><div class="line">$particle num # 输出particle中原子个数</div><div class="line">$particle delete</div></pre></td></tr></table></figure>
<ol start="0">
<li>atomselect有单独的编号<br>
比如atomselect345，我们可以用编号atomselect345来调用它;它的各种信息都可以输出出来。</li>
<li>atomselect macro<br>
macro指的就是那些charged、acidic、amino之类的，比如<code>atomselect charged</code>会选择体系中带电荷的原子。蛋白质体系容易用到，聚合物体系不容易用到。<br>
atomselect macro 显示所有macro</li>
<li>atomselect keywords<br>
<code>atomselect 3 &quot;resid 25&quot; frame last</code> 选择molid为3、最后一帧的resid 25。molid可以是数字或者top，所选内容就是普通的selection，用双引号或者{}括住，帧号可以是数字、first、last、now。<br>
atomselect list会列出所有的atomselect</li>
<li>index<br>
除了上文中<code>set particle [atomselect 0 &quot;index&lt;13000&quot;]</code>的筛选方法，index选择原子时还支持多种筛选方式：
<ul>
<li>“(index&gt;100 &amp;&amp; index&lt;200) || index = 66”</li>
<li>“index 1 3 5”</li>
<li><code>&quot;index = [ expr 250 * $i ]&quot;</code> # index 支持expr表达式求值，<code>i</code>为自定义变量</li>
</ul>
</li>
</ol>
<h3 id="script-syntax">Script Syntax<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h3>
<h4 id="0-注释">0. 注释</h4>
<blockquote>
<p>TCL中的注释符是’＃’，’＃’和直到所在行结尾的所有字符都被TCL看作注释，TCL解释器对注释将不作任何处理。不过，要注意的是，’＃’必须出现在TCL解释器期望命令的第一个字符出现的地方，才被当作注释。</p>
</blockquote>
<p>例如：<br>
%＃This is a comment<br>
%set a 100 # Not a comment<br>
%set b 101 ; # this is a comment</p>
<h4 id="1-for语句">1. for语句</h4>
   <figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">for</span> &#123;<span class="keyword">set</span> i <span class="number">0</span>&#125; &#123;$i &lt; [<span class="keyword">llength</span> $list]&#125; &#123;<span class="keyword">incr</span> i&#125;</div></pre></td></tr></table></figure>
<h4 id="2-list">2. list</h4>
<p><code>set list { Opaque Transparent ... }</code><br>
<code>[llength $list] # get index</code><br>
<code>[lindex $list $i] # reference the list</code></p>
<h4 id="3-measure">3. measure</h4>
<p>measure的功能非常多，从相对简单的求质心、几何中心、均方回转半径、RDF（vmd中叫gofr）、rmsd和rmsf(RMS fluctuation)，到比较专业的<strong>氢键分析、sasa</strong>（solvent-accessible surface area）等。<br>
全部功能见图：<a href="https://res.cloudinary.com/do7yb5qw4/image/upload/v1506587376/%E6%9D%82/vmd_measure.jpg" target="_blank" rel="external">https://res.cloudinary.com/do7yb5qw4/image/upload/v1506587376/杂/vmd_measure.jpg</a></p>
<ul>
<li>measure center $sel</li>
<li>measure minmax $sel</li>
<li><code>measure bond { index_1 index_2}</code>
<ul>
<li>GUI下<br>
Mouse &gt; Label &gt; Bonds， 或是在激活3D 窗口的条件下按2<br>
鼠标形状会变成+，然后依次点击2个原子即可，<br>
Graphics &gt; Label 可以进行更多的操作</li>
</ul>
</li>
</ul>
<h4 id="4-xyz-coordinate-is-storaged-as-list">4. xyz(coordinate) is storaged as list!</h4>
<p>When you  get multiple atom attributes (in this case, x, y, and z), the result is always returned as a nested list, even if that list contains only one element.<br>
As somebody may think the code below is very intuitive:</p>
   <figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> sel [atomselect <span class="number">0</span> <span class="string">"index = 250"</span>]</div><div class="line">graphics top text [ $sel get &#123;x y z&#125; ] <span class="string">"words i want to say"</span></div></pre></td></tr></table></figure>
<p>However, <code>$sel get {x y z} ]</code> is actually a <strong>list</strong>, but there need a vector.<br>
It’s like you give：</p>
   <figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">graphics top text &#123; &#123;<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>&#125; &#125; <span class="string">"words i want to say"</span></div></pre></td></tr></table></figure>
<p>But actually we need:</p>
   <figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">graphics top text &#123;<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>&#125; <span class="string">"words i want to say"</span></div></pre></td></tr></table></figure>
<p>The solution is ugly:</p>
   <figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">foreach</span> coor [ $sel get &#123;x y z&#125; ] &#123;</div><div class="line">  graphics top text $coor <span class="string">"words i want to say"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Beside that, coordiante should be used like below:<br>
<code>graphics top text [list $x $y $z] &quot;words i want to say&quot;</code><br>
<a href="http://www.ks.uiuc.edu/Research/vmd/mailing_list/vmd-l/17294.html" target="_blank" rel="external">source: vmd mailing list</a></p>
<h4 id="5-get-one-coor-of-three-only-one-element-in-pxyz">5. get one coor of three(only one element in pxyz)</h4>
   <figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> pxyz [atomselect top <span class="string">"index = [ expr 250 * $i ]"</span> ]</div><div class="line"><span class="keyword">set</span> px [$pxyz get x]</div></pre></td></tr></table></figure>
<h3 id="vmd传参数">vmd传参数</h3>
<p>vmd本身是一个csh脚本!</p>
<ol>
<li><code>[lindex $argv 0]</code><br>
<code>vmd -e yourscript.tcl -args your_first_arg</code></li>
<li><code>env YOUR_ARG=&quot;ba la ba la&quot; vmd -e yourscript.tcl</code><br>
<a href="http://www.ks.uiuc.edu/Research/vmd/mailing_list/vmd-l/7839.html" target="_blank" rel="external">http://www.ks.uiuc.edu/Research/vmd/mailing_list/vmd-l/7839.html</a></li>
</ol>
<h2 id="存高质量图片">存高质量图片<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h2>
<ul>
<li>render TachyonInternal name.tga<br>
convert name.tga name.png<br>
这样得到的图片效果有限<br>
<mark>尝试了各种方法，似乎tga转换png的质量不能控制</mark><br>
<mark>要想得到高质量的图片，方法如下</mark></li>
<li>File-&gt;render(这里有三行)
<ul>
<li>(第一行选择)Tachyon</li>
<li>(第三行加上，设置分辨率) -res 1024 1024<br>
res代表resolution，设为1024*1024时，tga大小为3.1M，png大小为680K</li>
<li>最后convert vmdscene.tga vmdscene.png（转成jpg格式也可以）</li>
<li>ambient occlusion（AO,环境光遮蔽）效果会很好</li>
</ul>
</li>
<li>script:<br>
render Tachyon <mark>vmdscene.dat</mark> “/usr/local/lib/vmd/tachyon_LINUXAMD64” -aasamples 12 %s -format TARGA <mark>-res 1024 1024</mark> -o %s.tga</li>
<li><strong>culling</strong>
<blockquote>
<p>culling actually reduces performance on some hardware renderers<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></p>
</blockquote>
</li>
<li><strong>Depth Cueing</strong>
<blockquote>
<p>Depth cueing causes distant objects to blend into the background color, in order to aid in 3-D depth perception</p>
</blockquote>
</li>
</ul>
<h2 id="存动画">存动画</h2>
<p>（1）进入  Extensions -&gt; Visualization -&gt; Movie Maker<br>
（2）Render -&gt; Tachyon<br>
（3）Movie Settings -&gt; Trajectory<br>
（4）Format -&gt; Animated GIF</p>
<h2 id="color-scale-颜色梯度">color scale【颜色梯度】</h2>
<h3 id="trajectory-with-color-gradient">trajectory with color gradient</h3>
<ol>
<li>load a trajectory <!-- (e.g. oneNPmovie.tcl)--></li>
<li>设置颜色随frame变化<br>
Graphical -&gt; Representations -&gt; Draw style -&gt; Coloring method -&gt; Timestep<br>
Graphical -&gt; Representations -&gt; Trajectory -&gt; 选择&quot;update color every frame&quot;; 修改&quot;Color Scale Data Range&quot;</li>
<li>设置Color Scale Bar<br>
Extensions -&gt; Visuilizition -&gt; Color Scale Bar</li>
<li>选择颜色<br>
Graphical -&gt; Colors -&gt; Color Scale -&gt; 这个设置还可以以&quot;RWB(Read Whie Blue) Offset -0.09, Midpoint 0.5 &quot;</li>
</ol>
<h3 id="frame-with-color-gradient">frame with color gradient</h3>
<ol>
<li>load a frame</li>
<li>设置颜色随index变化<br>
Graphical -&gt; Representations -&gt; Draw style -&gt; Coloring method -&gt; index<br>
Graphical -&gt; Representations -&gt; Trajectory -&gt; “Color Scale Data Range 0 ~ total_monomer_number”</li>
<li>设置Color Scale Bar和选择颜色与上面&quot;trajectory with color gradient&quot;相同</li>
</ol>
<h2 id="其他">其他</h2>
<ul>
<li>
<p><s>compound（<strong>似乎没什么用</strong>）</s><br>
只用于pbc中<br>
supported compound types: segment, residue, chain, fragment, connected</p>
</li>
<li>
<p>问题</p>
<ol>
<li>pbc join<br>
pbc join res -border 5 -sel “resname 0&quot;好使，但不明白为什么？<br>
但是注意，resname一个不存在的名字，比如&quot;resname 1000000”，也不会报错。<br>
pbc join res -sel尝试了各种办法也没有成功<br>
最后解决：还是在xml文件中删除多余的bond和angle，就是join的时候很慢，要等很久。</li>
</ol>
</li>
<li>
<p>vmd有很多功能，如：</p>
<ol>
<li>VMD extensions: membrane builder</li>
<li>Molecular Surface Representations</li>
</ol>
</li>
<li>
<p>对vmd脚本的感觉<br>
优点：vmd本身功能非常多，使用者多。<br>
缺点：以tcl为基础的vmd脚本，坑很多，体现了很多动态弱类型语言的缺点。</p>
</li>
</ul>
<h2 id="reference">reference</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://www.ks.uiuc.edu/Research/vmd/" target="_blank" rel="external">VMD官网</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="http://www.ks.uiuc.edu/Training/Tutorials/vmd/tutorial-html/index.html" target="_blank" rel="external">VMD Tutorial</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="http://www.ks.uiuc.edu/Training/Tutorials/vmd/tutorial-html/node4.html" target="_blank" rel="external">VMD Tutorial: Scripting in VMD</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://ourphysics.org/wiki/index.php/How_to_make_images_for_publication_using_VMD" target="_blank" rel="external">非常好的效果的vmd作图</a><br>
<mark>NOTE</mark>：该CBMSG网站还有很多有用的教程和资源（Computational Biophysics and Materials Science Group） <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="http://www.ks.uiuc.edu/Research/vmd/vmd-1.8.7/ug/node43.html" target="_blank" rel="external">manual culling</a> <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是VMD？&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VMD is a molecular visualization program for displaying, animating, and analyzing large biomolecular systems using 3-D graphics and built-in scripting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ks.uiuc.edu/Gallery/Science-New/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VMD官网的图片示例展览&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;本文定位&lt;/strong&gt;：本文不适合作为入门教程，适合于在进阶阶段作为参考。本文偏重于VMD脚本；图形界面(GUI)上的操作因为比较简单，讨论的较少。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="linux" scheme="http://timchen314.com/categories/linux/"/>
    
    
      <category term="画图" scheme="http://timchen314.com/tags/%E7%94%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>如何快速的向Word格式的硕士/博士论文中，添加引用文献？</title>
    <link href="http://timchen314.com/Word%E6%A0%BC%E5%BC%8F%E8%AE%BA%E6%96%87%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%BC%95%E7%94%A8/"/>
    <id>http://timchen314.com/Word格式论文中添加引用/</id>
    <published>2017-09-24T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常，很多理工科硕士/博士的毕业论文，是将自己Paper翻译成汉语再稍作组织而写成的。由于论文要求是Word格式的，重新向Word中添加引用文献是一项繁琐的工作。这里我介绍一种方法，利用Latex写Paper时准备的<strong>bib文件</strong>，向Word中添加引用文献。该方法有几个好处:</p>
<ol>
<li>几乎所有文献引用在.bib文件中都是现成的，不用再重新下载引用</li>
<li>latex中采用的bibtex key（“@article{paper_name,”中paper_name即为bibtex key）可以直接用到Word中。</li>
<li>不用跳转到EndNote等其他软件</li>
</ol>
<a id="more"></a>
<p>必要软件bibtex4word的安装请参考：<br>
<a href="https://wenku.baidu.com/view/4bb336d3b14e852458fb576d.html" target="_blank" rel="external">用Bibtex4Word实现Word写作时参考文献的插入和排版</a><br>
多数高校一般都要求采用《GB/T 7714-2005 文后参考文献著录规则》作为毕业论文的引文规则，上面连接中给出的下载已经不可用了，戳这里可以找到<a href="http://blog.sina.com.cn/s/blog_7139ed830102vi6y.html" target="_blank" rel="external">下载</a></p>
<p>至此，软件的准备工作就完成了。我们将我们几篇Paper中用到的.bib文件合并到一起（如果有少量重复的引用，手动删除就可以；重复引用较多的话，可以用bib文件管理软件删除，比如我用的JabRef），就可以愉快的插入文献啦。插入方法很简单，见Bibtex4Word的介绍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常，很多理工科硕士/博士的毕业论文，是将自己Paper翻译成汉语再稍作组织而写成的。由于论文要求是Word格式的，重新向Word中添加引用文献是一项繁琐的工作。这里我介绍一种方法，利用Latex写Paper时准备的&lt;strong&gt;bib文件&lt;/strong&gt;，向Word中添加引用文献。该方法有几个好处:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;几乎所有文献引用在.bib文件中都是现成的，不用再重新下载引用&lt;/li&gt;
&lt;li&gt;latex中采用的bibtex key（“@article{paper_name,”中paper_name即为bibtex key）可以直接用到Word中。&lt;/li&gt;
&lt;li&gt;不用跳转到EndNote等其他软件&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术杂烩" scheme="http://timchen314.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E7%83%A9/"/>
    
    
      <category term="office" scheme="http://timchen314.com/tags/office/"/>
    
  </entry>
  
  <entry>
    <title>专利申请</title>
    <link href="http://timchen314.com/%E7%94%B3%E8%AF%B7%E4%B8%93%E5%88%A9/"/>
    <id>http://timchen314.com/申请专利/</id>
    <published>2017-09-07T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前想把研究结果申请成专利(化工领域)，所以做了下列功课，在此分享给有相同需求的人。</p>
<a id="more"></a>
<p>在拿到专利申请号之前，相关论文是不能被公开发表的。而我们正好着急发论文，所以特意问了加急申请的费用和拿到专利号的时间。</p>
<h2 id="申请专利的顺序">申请专利的顺序</h2>
<ol>
<li>准备好纸面材料<br>
一般长度为几页，需要介绍清楚相关的技术，让专利代理明白。</li>
<li>专利代理进行撰写<br>
就算你选择加急，也需要至少一周时间。如果时间太短，可能会有写出来的文书的效果不好、专利保护范围不广等问题。</li>
<li>提交申请<br>
材料都准备好之后，一到两天就能拿到专利申请号。</li>
</ol>
<h2 id="专利方面律师事务所">专利方面律师事务所</h2>
<p>来源：<a href="https://www.zhihu.com/question/24316847" target="_blank" rel="external">中国在知识产权服务行业有哪些著名的公司？</a><br>
<img src="https://res.cloudinary.com/do7yb5qw4/image/upload/v1504681882/%E6%9D%82/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7_2017-09-06_%E4%B8%8B%E5%8D%883.01.30.png" alt="image"></p>
<hr>
<h2 id="第一集团">第一集团</h2>
<ol>
<li>柳沈律师事务所<br>
2万包杆（包含全部费用），一个月内，加3000半个月。该律师建议我们可以先投文章，因为文章不可能在一个月之内发表的，另外拿到专利号的时间可以写在合同内。<br>
联系方式：010-62681616</li>
<li>中国国际贸易促进委员会专利商标事务所<br>
正常1.8万包杆，30个工作日，11-15工作日10%加急费，6-10工作日20%加急费。<br>
联系方式：010-66046763</li>
<li>中国专利代理（香港）有限公司<br>
香港公司，没有联系</li>
</ol>
<hr>
<h2 id="第二集团">第二集团</h2>
<ol>
<li>中科专利商标代理有限责任公司<br>
给底稿到拿到申请号，需要一周时间，拿到专利号的时间可以写在合同内。价格为8000-10000(应该不是包杆，只是申请费，不包括官费等)。<br>
联系方式：010-68619696</li>
<li>中原信达知识产权代理有限责任公司<br>
10天，包杆一万八到一万九<br>
联系方式：010-66576688</li>
<li>金杜<br>
只做公司和机构</li>
<li>中咨<br>
联系方式：010-66091188<br>
至少15天。申请费120000，官费900高校优惠到300 另外费用2450高校优惠到700</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前想把研究结果申请成专利(化工领域)，所以做了下列功课，在此分享给有相同需求的人。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂烩" scheme="http://timchen314.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E7%83%A9/"/>
    
    
      <category term="专利" scheme="http://timchen314.com/tags/%E4%B8%93%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>All about Digital Currency</title>
    <link href="http://timchen314.com/digital_currency/"/>
    <id>http://timchen314.com/digital_currency/</id>
    <published>2017-08-30T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>What a bubble!<br>
<img src="https://res.cloudinary.com/do7yb5qw4/image/upload/v1512135626/%E6%9D%82/bitcoin.png" alt="bitcoin"></p>
<a id="more"></a>
<h1 id="info">Info</h1>
<p><img src="https://res.cloudinary.com/do7yb5qw4/image/upload/v1515308629/%E6%9D%82/Percentage_of_Total_Market_Capitalization_Dominance.png" alt="image"></p>
<script type="text/javascript" src="https://files.coinmarketcap.com/static/widget/currency.js"></script><div class="coinmarketcap-currency-widget" data-currency="bitcoin" data-base="USD" data-secondary="" data-ticker="true" data-rank="true" data-marketcap="true" data-volume="true" data-stats="USD" data-statsticker="false"></div>
<script type="text/javascript" src="https://files.coinmarketcap.com/static/widget/currency.js"></script><div class="coinmarketcap-currency-widget" data-currency="ripple" data-base="USD" data-secondary="" data-ticker="true" data-rank="true" data-marketcap="true" data-volume="true" data-stats="USD" data-statsticker="false"></div>
<script type="text/javascript" src="https://files.coinmarketcap.com/static/widget/currency.js"></script><div class="coinmarketcap-currency-widget" data-currency="cardano" data-base="USD" data-secondary="" data-ticker="true" data-rank="true" data-marketcap="true" data-volume="true" data-stats="USD" data-statsticker="false"></div>
<script type="text/javascript" src="https://files.coinmarketcap.com/static/widget/currency.js"></script><div class="coinmarketcap-currency-widget" data-currency="ethereum" data-base="USD" data-secondary="" data-ticker="true" data-rank="true" data-marketcap="true" data-volume="true" data-stats="USD" data-statsticker="false"></div>
<h2 id="source">source</h2>
<ol start="0">
<li><a href="https://coinmarketcap.com" target="_blank" rel="external">Cryptocurrency Market Capitalizations</a></li>
<li><a href="http://www.8btc.com" target="_blank" rel="external">www.8btc.com</a></li>
<li><a href="http://trans.chbtc.com/markets/eth" target="_blank" rel="external">trans.chbtc.com/markets/eth</a> 有长期数据，可以画周线</li>
</ol>
<h1 id="其他币">其他币</h1>
<p>薛蛮子认为：</p>
<blockquote>
<p>对于ICO的投资标准，薛蛮子表示，首先是人靠谱，此前投资的比原链是国内区块链最大的社区巴比特发起的，墨链是纸贵科技发起的，BEX是美豹金融发起的，这些项目的团队本身已经有了成功的创业案例，且在细分领域处于排头兵的地位。</p>
</blockquote>
<blockquote>
<p>拿比原链来说，薛蛮子表示，“我认为，比原链的创始团队很年轻，富有朝气，大家都很努力，但是比原链的技术挑战挺大，需要天时地利人和，很多条件具备才能做成，不是轻描淡写，一挥而就的。团队最要紧的是不断试错，踏踏实实做事情，不要辜负投资人的信任。我不看好的是，有的小伙子一辈子没赚过大钱，也没花过100万以上的钱，突然通过ICO拿了几个亿，这些人hold不住。”</p>
</blockquote>
<h1 id="问题与挑战">问题与挑战</h1>
<h2 id="1-税收">1. 税收</h2>
<p>美国国税局（IRS, Internal Revenue Service）在努力调查bitcoin避税，这是bitcoin正式应用所面临的一个问题。</p>
<blockquote>
<p>像达世（Dash）、门罗（Monero）和ZCash等币都部署了隐私功能，其交易是很难被追踪到的。</p>
</blockquote>
<h1 id="待读-进展">待读&amp;进展</h1>
<h2 id="待读">待读</h2>
<p>非常好：<a href="http://www.8btc.com/reinvent-the-currency" target="_blank" rel="external">http://www.8btc.com/reinvent-the-currency</a><br>
<a href="http://blog.csdn.net/m0_37327416/article/details/72885395" target="_blank" rel="external">以太坊（1）–在CentOS 6.5上搭建以太坊私有链的步骤（图文详细）</a><br>
<a href="http://blog.csdn.net/m0_37327416/article/details/72885521" target="_blank" rel="external">以太坊（3）：以太坊私有链环境下的智能合约的编写、编译、创建与执行</a><br>
<a href="http://www.8btc.com/smart-contract-solidity" target="_blank" rel="external">教程</a><br>
<a href="http://m.blog.csdn.net/vinsuan1993/article/details/75208203" target="_blank" rel="external">Geth搭建私有链</a><br>
<a href="https://www.zhihu.com/question/48049768" target="_blank" rel="external">中国在区块链领域有哪些专家或公认的牛人？【帮助弄懂bitcoin技术】</a></p>
<h2 id="进展">进展</h2>
<p>按照https://ethereum.stackexchange.com/questions/13547/how-to-set-up-a-private-network-and-connect-peers-in-geth对json进行了设置，</p>
<h1 id="digital-currency">digital currency</h1>
<h2 id="ethereum-new-set">ethereum (new_set)</h2>
<p>My understanding:</p>
<ol>
<li>init first block.</li>
<li>then you can mine.</li>
</ol>
<h3 id="problem">problem</h3>
<ul>
<li>what is private network?</li>
</ul>
<h2 id="cardano">cardano</h2>
<p><a href="https://zhuanlan.zhihu.com/p/32874568" target="_blank" rel="external">cardano简介</a></p>
<h1 id="资料-引用">资料&amp;引用</h1>
<h2 id="资料">资料</h2>
<p><a href="https://www.zhihu.com/question/37290469" target="_blank" rel="external">区块链是什么，如何简单易懂地介绍区块链？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What a bubble!&lt;br&gt;
&lt;img src=&quot;https://res.cloudinary.com/do7yb5qw4/image/upload/v1512135626/%E6%9D%82/bitcoin.png&quot; alt=&quot;bitcoin&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="block chain" scheme="http://timchen314.com/categories/block-chain/"/>
    
    
      <category term="block chain" scheme="http://timchen314.com/tags/block-chain/"/>
    
  </entry>
  
  <entry>
    <title>gnuplot笔记（下）</title>
    <link href="http://timchen314.com/gnuplot%E7%AC%94%E8%AE%B0%E4%B8%8B/"/>
    <id>http://timchen314.com/gnuplot笔记下/</id>
    <published>2017-08-16T12:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>gnuplot笔记下半部分。</p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="gnuplot命令">gnuplot命令</h2>
<h3 id="1-terminal">1. terminal</h3>
<p>gnuplot可以将画出的结果输出到不同terminal中。所谓terminal，既可以是png、eps等图片格式，也可以是x11、qt等窗口格式。</p>
<ul>
<li>
<p>x11 支持像素大小<br>
<code>set terminal x11 enhanced lw 3.0 dashlength 5.0 size 1080,755</code> 可以使用interactive脚本<br>
<code>set terminal x11 font &quot;Helvetica,45&quot;</code> 加上font后，就不能使用了</p>
</li>
<li>
<p>eps 不支持支持像素大小<br>
eps默认是以inch为单位，默认大小是10,6；我的图因为还要放大1.8倍，所以是18,10.8<br>
All PostScript printers or viewers should know about the standard set of Adobe fonts <mark>Times-Roman, Helvetica, Courier, and Symbol.</mark></p>
</li>
<li>
<p>eps ps、eps格式不支持transparent，png支持</p>
</li>
<li>
<p>eps不支持transparent<br>
ps、eps格式不支持transparent，可以用png格式。</p>
</li>
</ul>
<h3 id="2-数据筛选-处理">2. 数据筛选/处理</h3>
<h4 id="2-1-awk等预处理">2.1. awk等预处理</h4>
<ul>
<li>下面两条命令是等价的<br>
<code>plot 't1.dat'</code><br>
<code>p '&lt; cat t1.dat'</code></li>
<li>我用过<br>
<code>p &quot;&lt;awk '{if(NR&gt;13) print}' q.log&quot;</code></li>
</ul>
<h4 id="2-2-pi-pointinterval-for-linespoints-plot">2.2. pi（pointinterval） for linespoints plot</h4>
<p>只用于linespoints plot。决定点的symbol的稀疏，用法例子：<code>pi 2</code>，“means that point symbols are drawn only for every Nth point”</p>
<h4 id="2-3-every">2.3. every</h4>
<p><mark><strong>注意every不能简写成e</strong></mark><br>
5个冒号，最后一个数字之后的冒号<mark>必须要省略</mark><br>
正确写法是：<br>
<code>p 'PS500_26w_1/msd-PS_1.dat'every 10::::90000 w l</code><br>
而不是：<br>
<code>p 'PS500_26w_1/msd-PS_1.dat'every 10::::90000: w l</code><br>
<strong>意思是每10个数据点画一个，一共画到第九万个点</strong><br>
具体参看gnuplot5.0.1 P85或<code>help every</code></p>
<h4 id="2-4-index-column-2">2.4. index( column(-2) )</h4>
<p>用于一个文件中多块数据<a href="http://stackoverflow.com/questions/12818797/gnuplot-plotting-several-datasets-with-titles-from-one-file" target="_blank" rel="external">stackoverflow</a></p>
<blockquote>
<p>&quot;p = 0.1&quot;<br>
1 1<br>
3 3<br>
4 1</p>
<p>&quot;p = 0.2&quot;<br>
1 3<br>
2 2<br>
5 2</p>
</blockquote>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plot &apos;test.dat&apos; i 0 u 1:2 w lines title columnheader(1),\</div><div class="line">     &apos;test.dat&apos; i 1 u 1:2 w lines title columnheader(1)</div></pre></td></tr></table></figure>
<p>需要注意的是光用空格来分割两个data block是不够的。<br>
column(-2)是Pseudocolumns，可以在manual中搜索是Pseudocolumns。</p>
<h3 id="3-保存交互模式下的命令为脚本">3. 保存交互模式下的命令为脚本</h3>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gnuplot&gt; save &apos;name.plt&apos;</div><div class="line">gnuplot&gt; load &apos;name.plt&apos;</div></pre></td></tr></table></figure>
<h3 id="4-函数及设置定义域">4. 函数及设置定义域</h3>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">g(x)=3*x**2 # 普通函数</div><div class="line">f(x,min,max)=( (x&gt;min &amp;&amp; x&lt;max) ? (3*x**2) : 1/0 ) # 定义一个带定义域的函数</div><div class="line">p f(x,1,100) w l # 在[1,100]的定义域内，画出3*x**2</div></pre></td></tr></table></figure>
<p><code>f(x,min,max)=( (x&gt;min &amp;&amp; x&lt;max) ? (3*x**2) : 1/0 )</code>的解释：<br>
min，max只是自定义的变量，<code>? :</code>是经典三元表达式，<code>1/0</code>在gnuplot中不会被画出。综合起来<code>f(x,min,max)</code>的定义相当于：如果<code>(x&gt;min &amp;&amp; x&lt;max)</code>，就画出<code>3*x**2</code>，否则不画。<br>
<strong>这里用到的几个技巧很有用，不光可以用来定义域。</strong></p>
<h3 id="5-自带函数">5. 自带函数</h3>
<ul>
<li>log() &amp; log10()</li>
<li>exp</li>
<li>sin()等三角函数</li>
<li>gamma()</li>
</ul>
<h3 id="6-fit">6. fit</h3>
<ul>
<li>自变量要设定成x、y等，如<code>f(x)=exp(-(x/tau)**beta)</code>，因为gnuplot似乎对变量名敏感</li>
<li>fit范围 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f(x)=a*x**b</div><div class="line">fit [0:300] f(x) &apos;msd.dat&apos;u 1:5 via a,b</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="7-传入参数到脚本">7. 传入参数到脚本</h3>
<p>命令行（CLI）下，</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gnuplot -c script.plt hehestr1 str2 str3</div></pre></td></tr></table></figure>
<p>“script.plt” 就是ARG0，以此类推&quot;hehestr1&quot;就是ARG1…</p>
<h3 id="8-how-to-set-the-config-file">8. how to set the config file?</h3>
<p>show loadpath will show where the configuration file locate at<br>
gerenal configuration is in app-defaults dir.<br>
e.g., write <code>set loadpath 'your_path'</code> into .gnuplotrc will avoid every time work.</p>
<h3 id="9-smooth-csplines-可以解决由于点多画不出虚线的问题">9. smooth csplines 可以解决由于点多画不出虚线的问题</h3>
<h3 id="少用的命令">少用的命令</h3>
<ul>
<li>
<p><a href="http://www.gnuplotting.org/tag/interactive/" target="_blank" rel="external">Interactive label placing</a></p>
</li>
<li>
<p>parametric mode</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set parametric</div><div class="line">set trange [-pi:pi]</div><div class="line">plot sin(t),cos(t)</div><div class="line">unset parametric</div></pre></td></tr></table></figure>
</li>
<li>
<p>MOUSE_BUTTON<br>
点左键 MOUSE_BUTTON==1；<br>
中键 ==2；<br>
右键 ==3;<br>
光点击的话，其他三个自带变量（MOUSE_SHIFT,MOUSE_ALT,MOUSE_CTRL）==0</p>
</li>
</ul>
<h2 id="显示信息型命令">显示信息型命令</h2>
<h3 id="1-show">1. show</h3>
<p>show variables<br>
show all</p>
<h3 id="2-history">2. history</h3>
<p><code>history 5</code>  #显示最近5条命令<br>
<code>history ?load</code>  #显示所有以load开头的命令<br>
<code>history ?&quot;set label&quot;</code>  #显示所有以set label开头的命令<br>
<code>history !&quot;set label&quot;</code>  #执行所有以set label开头的命令</p>
<h3 id="3-test">3. test</h3>
<p>test可以展示当前terminal或palette的画图效果<br>
<code>test (terminal | palette)</code></p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gnuplot&gt; help test</div><div class="line"> This command graphically tests or presents terminal and palette capabilities.</div><div class="line"> ...</div></pre></td></tr></table></figure>
<ul>
<li>x11 test<br>
<code>test x11</code><br>
<img src="https://img.alicdn.com/imgextra/i1/95029972/TB2Zr_ShXXXXXcTXpXXXXXXXXXX_!!95029972.jpg" alt="x11 test"></li>
<li>eps test<br>
<img src="https://img.alicdn.com/imgextra/i1/95029972/TB2uWEAhXXXXXaRXXXXXXXXXXXX_!!95029972.jpg" alt="eps test"></li>
<li>png test<br>
<img src="https://img.alicdn.com/imgextra/i4/95029972/TB2k97ihXXXXXalXpXXXXXXXXXX_!!95029972.jpg" alt="png test"></li>
</ul>
<h2 id="各种plot">各种plot</h2>
<h3 id="multiplot">multiplot</h3>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> set size 3,1.5</div><div class="line"> set multiplot</div><div class="line"> </div><div class="line">#set the parameter of 1st subfigure</div><div class="line"> set origin 0,0</div><div class="line"> set size 1.5,1,5</div><div class="line"> p ......</div><div class="line">#set the parameter of 2nd subfigure</div><div class="line"> set origin 1.5,0</div><div class="line"> set size 1.5,1,5</div><div class="line"> p ......</div></pre></td></tr></table></figure>
<ul>
<li>
<p>对齐subfig<br>
用set lmargin 进行对齐</p>
</li>
<li>
<p>调整所有subfig的scale大小<br>
set tics scale 3</p>
</li>
<li>
<p>取消前面的设置<br>
因为后面的subfig会继承前面subfig的设置，有时候需要取消前面的设置。<br>
时常需要取消的有：label, arrow, scale等。<br>
最常用的取消方式是unset<br>
<strong>对于key</strong>–set key default<br>
<strong>对于tics</strong>– set xtics autofreq</p>
</li>
</ul>
<h3 id="3d-plot">3D plot</h3>
<ul>
<li>
<p>view<br>
view用来设定3d图的观察角度<br>
<code>set view &lt;rot_x&gt;, &lt;rot_z&gt;</code><br>
默认值是：<br>
<code>set view 60, 30</code></p>
</li>
<li>
<p>设置Z轴起点<br>
<code>set xyplane at 0.6</code></p>
</li>
<li>
<p>设置背景网格<br>
<code>set grid x y z back</code></p>
</li>
<li>
<p>自定义渐变色<br>
<code>set palette define (0.6 &quot;#FF0000&quot;,1.1 &quot;blue&quot;)</code></p>
</li>
<li>
<p>External Link<br>
<a href="http://jswails.wikidot.com/using-gnuplot" target="_blank" rel="external">using gnuplot</a><br>
<a href="http://www.gnuplotting.org/tag/splot/" target="_blank" rel="external">Plot functions using the special-filenames property</a></p>
</li>
</ul>
<ul>
<li><strong>colorbox</strong><br>
<strong>自定义colorbox</strong>： <code>set colorbox vertical user origin 1.1,0.5 size .06,.4</code><br>
<strong>设定colorbox的tics</strong>： <code>set cbtics 0.1</code><br>
<strong>set logscale cb</strong><br>
<strong>set cbrange [0.001:1]</strong></li>
</ul>
<h3 id="filled-curve">filled curve</h3>
<p><img src="http://gnuplot.sourceforge.net/demo_4.6/fillbetween.1.png" alt="示意图"><br>
<code>plot 'silver.dat' u 1:2:3 w filledcu</code></p>
<h3 id="time-series">time series</h3>
<p>To plot data in time series, you need several special sets.</p>
<blockquote>
<p><strong>From manual5.1</strong><br>
Xtics timedata<br>
In case of timeseries data, axis tic position values must be given as quoted dates or times according to the<br>
formattimefmt. If the <start>, <incr>, <end>form is used,<start>and<end>must be given according<br>
to timefmt, but <incr>must be in seconds. Times will be written out according to the format given on<br>
set format, however.</incr></end></start></end></incr></start></p>
</blockquote>
<p>Example:</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">set xdata time</div><div class="line">set timefmt &apos;%Y-%m-%d&apos;</div><div class="line">set datafile separator &quot;,&quot;  # data is from &quot;.csv&quot; file</div><div class="line"></div><div class="line">set xrange [&quot;2012-06-01&quot;:]</div><div class="line">set format x &quot;%m\n%y&quot;</div><div class="line">set xtics 604800*26 #604800 is the number of second in a week</div><div class="line">set xlabel &quot;month\nyear&quot;</div></pre></td></tr></table></figure>
<p><img src="https://res.cloudinary.com/do7yb5qw4/image/upload/v1512135626/%E6%9D%82/bitcoin.png" alt="bitcoin"></p>
<h2 id="user-defined-function">User-defined function</h2>
<ol>
<li>
<p>auto name</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># convert incoming parameter &quot;ARG1&quot; to eps name automatically.</div><div class="line"># e.g., if &quot;ARG1&quot; is &quot;price.plt&quot;, then automatic name is &quot;price.eps&quot;</div><div class="line"> name_length=strlen(ARG1)-4</div><div class="line"> name=ARG1[:name_length]</div><div class="line"> set output name.&quot;.eps&quot;</div></pre></td></tr></table></figure>
</li>
<li>
<p>save as eps with specific format</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set size 1.8,1.8</div><div class="line">set termoption dash</div><div class="line">set terminal postscript eps enhanced color lw 4.0 dashlength 8.0 &quot;Helvetica,45&quot;</div><div class="line">call &quot;auto-eps-name.gnu&quot; ARG1</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Add <code>call &quot;size1.8-font45-lw4-eps.gnu&quot; ARG0</code> to your gnuplot script and that’s it!</p>
<h2 id="error-问题：">Error &amp; 问题：</h2>
<ul>
<li>输出文件的大小为0——解决方法：<br>
The eps file doesn’t get written until a plot command is specified after specifing the output. Possible solutions:</li>
</ul>
<ol>
<li>Move your plot command after your set output command</li>
<li>add a replot command to the end of your script</li>
</ol>
<h2 id="reference">Reference</h2>
<p>An amazing web: <a href="http://www.gnuplotting.org/tag/palette/" target="_blank" rel="external">gnuplotting.org</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gnuplot笔记下半部分。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://timchen314.com/categories/linux/"/>
    
    
      <category term="画图" scheme="http://timchen314.com/tags/%E7%94%BB%E5%9B%BE/"/>
    
      <category term="linux" scheme="http://timchen314.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>gnuplot笔记（上）</title>
    <link href="http://timchen314.com/gnuplot%E7%AC%94%E8%AE%B0%E4%B8%8A/"/>
    <id>http://timchen314.com/gnuplot笔记上/</id>
    <published>2017-08-16T12:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>gnuplot笔记，包含中高级使用方法，方便入门之后的进阶学习。</p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="note-about-version-5">Note about Version 5</h2>
<h3 id="1-dashtype需要单独设置">1. dashtype需要单独设置</h3>
<p>与4.x版本不同，现在linetype画出的都是实线了。<br>
例子：<code>p sin(x) dt 2 #设为2型虚线</code></p>
<h3 id="2-size的用法">2. size的用法</h3>
<ul>
<li>eps to png<br>
when eps size is set to 1.0,1.0，png的像素为600,420<br>
eps：size 1.8,1.8 那么png的像素为1080,755</li>
<li><mark><strong>x11</strong></mark> set terminal x11 size 600,420应该是默认大小<br>
size 2,2 会导致图像超过窗口大小</li>
</ul>
<h3 id="3-新加入几个命令">3. 新加入几个命令</h3>
<p><code>plot ... smooth mcsplines</code><br>
<code>plot &lt;datafile&gt; skip N</code>    # skip lines at start of ascii data file<br>
<code>set colorsequence default|classic|podo</code> # colors used by successive plot elements</p>
<h3 id="4-变量的引用">4. 变量的引用</h3>
<p>For 4.6:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var=123</div><div class="line">set label 1 &apos;var&apos; at 1,1</div></pre></td></tr></table></figure>
<p>For 5.0:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var=123</div><div class="line">set label 1 var at 1,1</div></pre></td></tr></table></figure>
<h2 id="format">format</h2>
<h3 id="1-set-logscale-y">1. <code>set logscale y</code></h3>
<p><code>set logscale</code> # x和y轴都设置成logscale</p>
<h3 id="2-set-format">2. set format</h3>
<p>设置坐标轴上数字的格式。<br>
以1000为例：</p>
<pre><code class="language-gnuplot">set format x &quot;10^{%L}&quot; 
</code></pre>
<p>显示出来的格式为10^3</p>
<pre><code class="language-gnuplot">set format x &quot;%2.0t{\327}10^{%T}&quot; 
</code></pre>
<p>显示为1×10^3</p>
<p>需要注意的是：</p>
<ul>
<li><code>{\327}</code>是乘号，需要将编码指定为<code>set encoding iso_8859_1</code>才可以使用</li>
<li><code>%t</code>与<code>%T</code><br>
比如1200, %t=1.2 %T=3。这种写法可以方便的描线性标度下的较大的刻度。</li>
</ul>
<h3 id="3-offset-x-y">3. offset x,y</h3>
<p>设置label到坐标轴的距离， 0,0 是默认距离 e.g. <code>set xlabel &quot;123&quot; offset 1,0</code></p>
<h3 id="4-set-ticscale-n-m">4. <code>set ticscale n m</code></h3>
<blockquote>
<p>Command set ticscale n m changes the length (size) of tics. The major tics are multiplied by the provided value n, while the minor tics are multiplied by m.</p>
</blockquote>
<p>只改major tics:<code>set tic scale 2</code></p>
<h3 id="5-字体font">5. 字体font:</h3>
<p>(1) gnuplot-5.0.1 manual:</p>
<blockquote>
<p>All PostScript printers or viewers should know about the standard set of Adobe fonts Times-Roman, Helvetica, Courier, and Symbol.</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/36527847" target="_blank" rel="external">注意：TimesNewRoman和Times（又称TimesRoman）是几乎一样的</a><br>
(2) TimesRoman和TimesNewRoman都是一样的<br>
For other fonts, 尽管程序不会报错，但也显示不出来<br>
但是可以加粗/斜体 （可以参看http://www.manpagez.com/info/gnuplot/gnuplot-4.4.0/gnuplot_390.php）</p>
<h3 id="6-tc-textcolor">6. tc (textcolor)</h3>
<h3 id="7-border">7. border</h3>
<p><code>set border lw 3</code> 只改变线的宽度</p>
<h3 id="8-key">8. key</h3>
<p><strong>set key height #调节key与坐标轴的距离</strong><br>
set key spacing 1.3 #调节两行之间的距离<br>
set key maxcols/maxrow<br>
set key autotitle</p>
<h3 id="9-label">9. label</h3>
<ul>
<li>设定位置时候，是设定的左下角的坐标</li>
<li>用法：·set label 1 ‘20%wt’ at graph 0.42,0.92 font ‘,50’·</li>
</ul>
<h3 id="10-arrow">10. arrow</h3>
<ul>
<li>
<p>控制起始/终止位置<br>
set arrow from 坐标 to 坐标<br>
e.g.:<br>
<code>set arrow from 9.5,3.8 to 9.5,1.8 nohead lt 5 lc rgb &quot;black&quot;</code><br>
<code>set arrow 1 from (log10(50000)),-1 to (log10(50000)),2 nohead lt 5 lc rgb &quot;black&quot;</code>  &quot;arrow 1&quot;中&quot;1&quot;是一个标记数组，方便arrow的管理，比如<code>unset arrow 1</code>就取消arrow 1。</p>
</li>
<li>
<p>控制head<br>
e.g.:<br>
<code>set arrow from -4,-4 to 4,-4 head filled size screen 1,30,55 lw 2 lt 2 lc rgb &quot;cyan&quot;</code><br>
其中head filled size 1,30,55 为控制head的格式。<br>
<code>size &lt;length&gt;,&lt;angle&gt;{,&lt;backangle&gt;}</code><br>
length是长度,加上screen是代表屏幕长度，也就是相对长度；后面两个是箭头与线的角度</p>
</li>
</ul>
<h3 id="11-lmargin-rmargin-tmargin-bmargin-左右上下">11. lmargin rmargin tmargin bmargin(左右上下)</h3>
<p>以lmargin为例，lmargin是左侧坐标轴到图左边边界的距离</p>
<h2 id="style：颜色-形状等与审美相关的设置">style：颜色、形状等与审美相关的设置</h2>
<h3 id="1-line-and-point-types">1. line and point types</h3>
<p><a href="https://img.alicdn.com/imgextra/i4/95029972/TB21hDfhpXXXXbrXpXXXXXXXXXX_!!95029972.png" target="_blank" rel="external">gnuplot-line-and-point-types</a></p>
<h3 id="2-most-useful-point-type">2. most useful point type</h3>
<table>
<thead>
<tr>
<th>shape</th>
<th>full id</th>
<th>empty  id</th>
</tr>
</thead>
<tbody>
<tr>
<td>square</td>
<td>5</td>
<td>64</td>
</tr>
<tr>
<td>sphere</td>
<td>7</td>
<td>65</td>
</tr>
<tr>
<td>up-tri</td>
<td>9</td>
<td>66</td>
</tr>
<tr>
<td>down-tri</td>
<td>11</td>
<td>67</td>
</tr>
<tr>
<td>diamond</td>
<td>13</td>
<td>68</td>
</tr>
<tr>
<td>pentagon</td>
<td>15</td>
<td>69</td>
</tr>
</tbody>
</table>
<p>e.g.:<br>
<code>p sin(x) w p pt 5</code></p>
<h3 id="3-点的颜色的设置方法：">3. 点的颜色的设置方法：</h3>
<p><code>lc rgb &quot;red&quot;</code>，或者<code>ls 1</code>也可以！</p>
<h3 id="4-several-color-set">4. several color set</h3>
<p><img src="https://img.alicdn.com/imgextra/i3/95029972/TB2RODgopXXXXbSXXXXXXXXXXXX_!!95029972.png" alt="my color"></p>
<h2 id="dsl-domain-specific-language-in-dsl">DSL(domain-specific language) in DSL</h2>
<p>有时候一个图里可能有一次画10条线，如果一条一条的画太麻烦了。为此gnuplot内置了自己的DSL。包括循环、逻辑等语句。</p>
<h3 id="0-for-字符串数组">0. for、字符串数组</h3>
<ul>
<li>for循环：<br>
<code>p for [i = 1:9] sample.i.'.dat' u 1:2 w l ls i t 'p='.i #一次画九条先，每条线有不同的title和linesytle（sytle是自己定义的）</code></li>
<li>字符串数组<br>
`a=&quot;2 3 4 6 8 9 12 16 24&quot;<br>
a被当成字符串数组,word(a,n)是字符串类型。整数可以除字符串，例如864/word(a,1)。sprintf内的变量也可以用864/word(a,1)。<br>
**.**点：字符串连接操作符，只能用于处理字符串和变量，不能处理表达式！！！<br>
<strong>注意：sprintf与C++的sprintf一样，百分号的转义字符是%%。</strong><br>
<strong>总结：字符串和文件名都用sprinf；无论是字符类型还是数字类型，都可以用在ls，column这些地方，并且可以进行数学运算。例子可见Paper3_segMSD.plt</strong></li>
</ul>
<h3 id="1-escape-charactor">1. escape charactor</h3>
<p>In postscript eps enhanced terminal, use <code>&quot;\\&quot;</code> before an escape charactor to keep its basic form, e.g. , <code>&quot;\\_&quot;</code>  representation <code>&quot;_&quot;</code>.</p>
<h3 id="2-各种字符的表达方式-可以google-syntax-for-postscript-enhanced-option">2.各种字符的表达方式，可以google “Syntax for postscript enhanced option”</h3>
<p>（0）例子：<code>set terminal postscript eps enhanced color lw 3.0 dashlength 3.0 &quot;TimsRoman,50&quot;</code><br>
（1）PostScript Character Codes的模式是T模式；输入&quot;set encoding&quot;后是E模式<br>
（2）希腊字母写法的例子：<code>{/Symbol r}</code><br>
（3）上下标同时出现：<code>t@^{\*}_{p}</code>，多用了一个@字符</p>
<h3 id="3-string">3. string</h3>
<ul>
<li>单引号内的字符串不转义，双引号内的字符串转义</li>
<li>set title noenhanced #让title的内容直接输出，不进行转义</li>
<li>“.”, “eq” and “ne&quot;<br>
Three binary operators require string operands: the string concatenation operator”.&quot;, the string equality operator&quot;eq&quot;and the string inequality operator&quot;ne&quot;. The following example will print TRUE.<br>
<code>if (&quot;A&quot;.&quot;B&quot; eq &quot;AB&quot;) print &quot;TRUE&quot;</code></li>
</ul>
<h3 id="4-print-hello-world">4.<code>print &quot;hello world!&quot;</code></h3>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gnuplot笔记，包含中高级使用方法，方便入门之后的进阶学习。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://timchen314.com/categories/linux/"/>
    
    
      <category term="画图" scheme="http://timchen314.com/tags/%E7%94%BB%E5%9B%BE/"/>
    
      <category term="linux" scheme="http://timchen314.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vim笔记</title>
    <link href="http://timchen314.com/vim%E7%AC%94%E8%AE%B0/"/>
    <id>http://timchen314.com/vim笔记/</id>
    <published>2017-08-01T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录用过的命令，方便以后查找。不包含太简单的或太难的。</p>
<a id="more"></a>
<p>删除线代表已经非常熟练的掌握，不需要再看了。</p>
<h2 id="vim下命令：">vim下命令：</h2>
<p><s>(3)</s> <code>:.,$ s/str1/str2/g</code> 用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1<br>
其中<code>.</code>代表当前行，<code>$</code>代表最后一行，而<code>.,$</code>就代表从当前行到最后一行<br>
也可以这样 <code>:.,.+8 s/str1/str2/g</code>， 其中<code>.,.+8</code>代表从当前行到从当前行开始下面第8行。<br>
例如：如果当前行是第二行，那么<code>:.,.+8 s/str1/str2/g</code>等价于<code>:2,10 s/str1/str2/g</code></p>
<p><s>(4)</s> <code>s/\(love\)able/\1er/</code> # 会将loveable替换成lover，<code>\1</code>代表第一对小括号内的匹配项<br>
(6) 读入文件<br>
<code>:23r input_file</code>，在当前文件23行将<code>input_file</code>的内容插入近来<br>
(7) <code>&lt;leader&gt;</code> is backlash<br>
(8) “+y  复制到系统剪贴板<br>
(11) Vu(VU) # V mode下，大小写转换</p>
<p>(14) vim中的g(global)和%的区别：</p>
<ul>
<li>
<p>g:全局的<br>
s/pattern/replacement/  : 替换行中出现的每一个pattern<br>
g/pattern/s/pattern/replacement/g : 开始处的g是全局命令，意味着对所有与地址匹配的行进行改变。结尾处的g是一个标志，意味着改变一行上的每个。<br>
linux中的grep = g/rep/p</p>
</li>
<li>
<p>%:代表这文件本身每一行</p>
</li>
</ul>
<p>(15) 全部格式化: gg=G<br>
(16) vi如何关闭打开的多个文件中的一个?<br>
切换到你想关闭的 文件窗口.<br>
然后输入 :bd<br>
即 : buffers delete<br>
就可以关闭了.<br>
(17) 两条命令合在一起用<br>
<code>:%s/abc/def/ | wq</code></p>
<h3 id="移动">移动</h3>
<ul>
<li>zz 光标所在行居中</li>
<li>20| 到第20列！【Normal mode】</li>
</ul>
<h3 id="多个文件同时处理">多个文件同时处理</h3>
<ul>
<li>
<p>文件以tab打开</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:args *.c</div><div class="line">:tab all</div></pre></td></tr></table></figure>
<p>or <code>vim -p *.h *cc</code></p>
</li>
<li>
<p>Run a command in multiple buffers<br>
将所有文件进行格式化，并写入所有文件</p>
   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">tabdo</span> Autoformat</div><div class="line">:<span class="keyword">wa</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="替换-查找">替换、查找</h3>
<ul>
<li>
<p>去掉换行符^M: 输入以下字符串: <code>%s/^M//g</code>  (注意，^M = Ctrl v + Ctrl m，而不是手动输入^M)</p>
</li>
<li>
<p>换行符可以<strong>用\n直接匹配，用\r添加</strong></p>
</li>
<li>
<p>对文件内含有特定字符的行操作。<br>
g/-/s/^/#/ 是把所有含‘-’的行注释掉</p>
</li>
</ul>
<ul>
<li>/open\c<br>
其中 \c表示忽略大小写</li>
<li>vi（lzy0xa@192.9.207.102）的正则表达式中<code>H[1-9]*</code>并不能match H20 ,因为这里vi认为<code>*</code>是匹陪[1-9]中的数，而不是匹配所有的字符。要想匹配H20、H320、H308之类的字符串就需要用<code>H[0-9]*</code></li>
</ul>
<h3 id="代码折叠">代码折叠</h3>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">set foldmethod=indent                                                        </div><div class="line">set foldnestmax=10                                                           </div><div class="line">set nofoldenable &quot; makes sure that when opening, files are &quot;normal&quot;, i.e. not</div><div class="line">folded.                                                                      </div><div class="line">set foldlevel=0</div></pre></td></tr></table></figure>
<ul>
<li>zM/zR zm/zr<br>
大/小写 – 所有/逐层<br>
m/r – 折叠/打开</li>
<li>（对当前折叠）zc/zo zC/zO<br>
大/小写 – 所有/逐层</li>
<li>zf/zd 创建/删除折叠</li>
<li>zj/zk</li>
<li>[z / ]z       到当前打开的折叠的开始/结尾处。</li>
</ul>
<h3 id="显示信息">显示信息</h3>
<ul>
<li>历史命令<br>
<code>q:</code>或<code>:hist</code></li>
<li>是否具有某种特性 <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">echo</span> <span class="built_in">has</span>(<span class="string">'python3'</span>) #<span class="number">0</span> <span class="keyword">is</span> false, <span class="number">1</span> means true #判断是否支持<span class="keyword">python3</span></div><div class="line">:<span class="keyword">echo</span> <span class="built_in">has</span>(<span class="string">'viminfo'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="shell-cmd-in-vim"><mark>shell cmd in vim</mark></h3>
<ul>
<li><code>:!pwd</code> # Execute the pwd unix command, then returns to Vi</li>
<li><code>!!pwd</code> # Execute the pwd unix command and insert output in file</li>
<li><code>:r !command</code></li>
<li><code>:起始行号,结束行号 !command</code><br>
将起始行号和结束行号指定的范围中的内容输入到shell命令command处理，并将处理结果替换起始行号和结束行号指定的范围中的内容<br>
例如<br>
<code>:62,72 !sort #，将62行到72行的内容进行排序</code></li>
<li><code>:起始行号,结束行号 w !command</code><br>
将起始行号和结束行号所指定的范围的内容作为命令command的输入。不会改变当前编辑的文件的内容</li>
</ul>
<h2 id="vimrc">vimrc</h2>
<h3 id="plugin">Plugin</h3>
<ul>
<li>auto-pairs<br>
github readme里，有括号包裹单词这个功能，但我尝试多次也没有使用成功。<br>
<a-e>或<m-e>对应这一功能（A means Alt, M means Meta, in present context Alt and Meta is the same ），但我在Xshell中用的时候，<a-e>并没有激活auto-pairs，激活的是linux自带的快捷键–向右移动到词尾。<br>
最终我输入单个括号是用：ctrl+v，（</a-e></m-e></a-e></li>
<li>markdown插件 vim-markdown<br>
<a href="http://www.jianshu.com/p/24aefcd4ca93" target="_blank" rel="external">http://www.jianshu.com/p/24aefcd4ca93</a><br>
<a href="https://github.com/plasticboy/vim-markdown" target="_blank" rel="external">https://github.com/plasticboy/vim-markdown</a><br>
有用的命令：c <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:Toc</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="youcompleteme">YouCompleteMe</h3>
<ul>
<li>
<p>需要进入bundle文件夹进行编译</p>
</li>
<li>
<p>错误<code>YouCompleteMe unavailable: requires Vim compiled with Python (2.6+ or 3.3+) support</code><br>
明明安装VIM时已经选择支持python3了，为什么还会报错？而且：</p>
 <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">echo</span> <span class="built_in">has</span>(<span class="string">'python3'</span>) #返回值为<span class="number">0</span>，说明在<span class="keyword">vim</span>中不能正常支持<span class="keyword">python</span></div></pre></td></tr></table></figure>
<p>这很可能是因为：python运行时找不到库。解决方法就是添加python库的路径到LD_LIBRARY_PATH环境变量：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:/opt/anaconda3/lib/</div></pre></td></tr></table></figure>
<p>然而，这样又会导致其他程序找到的是<code>/opt/anaconda3/lib/</code>里的库，而非系统自带的库，例如：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ evince</div><div class="line">evince: symbol lookup error: /lib64/libgdk-3.so.0: undefined symbol: cairo_surface_set_device_scale</div></pre></td></tr></table></figure>
<p><strong>最终解决方法，是分别设置环境变量</strong>，例如：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> evince=<span class="string">'LD_LIBRARY_PATH="" evince'</span></div></pre></td></tr></table></figure>
<p>这样evince启动时，就不会去anaconda的路径里面找库了。</p>
</li>
</ul>
<h3 id="cmd">cmd</h3>
<ul>
<li>颜色<br>
.vim/colors/中放置配置文件<br>
:colo 查看当前颜色</li>
<li>noremap：绑定键的时候，不迭代绑定<br>
五中模式代号：nvoic</li>
</ul>
<h2 id="reference">reference</h2>
<p><a href="https://danielmiessler.com/study/vim/#why" target="_blank" rel="external">vim tutorial</a><br>
<a href="http://developer.51cto.com/art/201308/406941.htm" target="_blank" rel="external">超过130个你需要了解的vim命令</a> 【好】<br>
<a href="http://www.cnblogs.com/lq0729/archive/2011/12/24/2300189.html" target="_blank" rel="external">vim map nmap</a>【非常好，介绍vimrc的一些基本命令】</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录用过的命令，方便以后查找。不包含太简单的或太难的。&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="http://timchen314.com/categories/vim/"/>
    
    
      <category term="vim" scheme="http://timchen314.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令记录</title>
    <link href="http://timchen314.com/linux_command/"/>
    <id>http://timchen314.com/linux_command/</id>
    <published>2017-07-31T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录用过的命令，方便以后查找。不包含太简单的或太难的。<br>
长度感人。</p>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="正则表达式">正则表达式</h2>
<p>1.&lt; #匹配词头 &gt; #匹配词尾<br>
2.+<br>
匹配1或多个<br>
3.？<br>
匹配0或1个<br>
4.x|y<br>
匹配x或y<br>
5.x{5,10}<br>
匹配x出现5到10次</p>
<h2 id="一句话介绍一个命令：">一句话介绍一个命令：</h2>
<ul>
<li>
<p>shell 内置<br>
<code>--</code>: a double dash (<code>--</code>) is used to signify the end of command options. 例如<code>ls -- -l</code>中会把<code>-l</code>当成文件名<br>
<code>echo $((a%b))</code>: 余数</p>
</li>
<li>
<p>资源管理<br>
<code>ulimit</code>: 管理用户占用的资源<br>
<code>nice &amp; renice 命令</code>: 管理任务优先级<br>
<code>pkill -kill -t pts/5</code>: 踢掉相应的用户<br>
<code>sudo sh -c &quot;echo 1 &gt; /proc/sys/vm/drop_caches&quot;</code>: 清理硬盘<br>
<code>iostat -x sdb1 1 3</code>: 显示sdb1的状态，每1秒显示一次，一共显示3次。</p>
</li>
<li>
<p>键盘<br>
<code>bind -p</code>:  查看所有的键盘绑定<br>
<code>stty -a</code>: 查看下默认的键位设置<br>
<code>toe /usr/share/terminfo/</code>: supported terminal; you can compare two terminal by <code>infocmp vt100 vt220</code></p>
</li>
<li>
<p>其他<br>
<code>tac</code>: cat倒过来写，是将文件反向输出的命令<br>
<code>join命令</code>: 横向连接文件，可以合并第一列<br>
<code>tee</code>: <code>tee file1 file2 -</code>  #将标准输出，输出到file1、file2和标准输出（“-”就是代表标准输出）（<strong>注意</strong> 该命令本身会向标准输出 输出一次，所以tee file1 file2 - 会将标准输出 输出两次）<br>
<code>basename &amp; dirname</code>: 从路径名得到root部分和文件名部分<br>
<code>read</code>: <code>read -p &quot;make dir now?[y/n]:&quot; select</code>#直接读入变量值<br>
<code>df -T</code>: 显示硬盘分区类型<br>
lsof:  <code>lsof -p 456,123</code> 列出进程456和123所有打开的文件。<code>lsof -i 6</code> 列出所有IPv6协议的网络文件<br>
<code>ssh -X</code>:   <code>Enables X11 forwarding</code>然后就可以用vmd、gnuplot等软件了。<br>
<code>env</code>: 输出所有环境变量<br>
<code>ldd ./exe</code>:  给出链接的库<br>
<code>systemctl start atd</code>: arch中用at，需要开启<br>
<code>gimp</code>: 看图png,jpg,bmp都能看<br>
<code>info &amp; whatis</code>: they tell the information of a command; Note that in OS, info whatis will get “search database …”</p>
</li>
</ul>
<h2 id="linux-command-line">linux Command line</h2>
<p>Ctrl + a, Ctrl + e, alt + f 前进一个单词、alt + b(通过xshell并不好使):  谁用谁知道<br>
Ctrl + f, Ctrl + b 前进一个字母/后退一个字母<br>
Ctrl + 方向键左键    光标移动到前一个单词开头<br>
Ctrl + 方向键右键    光标移动到后一个单词结尾<br>
<code>^oldstr^newstr</code>    替换前一次命令中字符串<br>
同时head&amp;tail: <code>ls | (head;tail)</code> 或者 <code>(head; tail) &lt; file</code></p>
<h3 id="系列命令">!系列命令</h3>
<ul>
<li>
<p><code>!-n</code>， 重复执行倒数第 n 条命令，n 为正整数；</p>
</li>
<li>
<p><code>!!</code>， 重复执行上一条命令。该命令等价于 !-1；!?str，重复执行最近一条包含字符串 str 的命令；</p>
</li>
<li>
<p><code>!#</code>，引用当前的命令行，例如：<code>cp filename filename.bak</code> 可以写为 <code>cp filename !#:1.bak</code></p>
</li>
<li>
<p><code>!^</code>/<code>!$</code><br>
重用上一条命令的第一个参数/最后一个参数；<br>
<code>ls /usr/share/doc /usr/share/man; cd !^</code># 即 cd /usr/share/doc</p>
</li>
<li>
<p><code>!*</code><br>
重用上一条命令的所有参数； <code>touch a.txt b.txt c.txt</code><br>
<code>vim !*</code>  # 即 vim a.txt b.txt c.txt</p>
</li>
<li>
<p><code>!!:n</code><br>
重用上一条命令中的第 n 个参数，n 为正整数。<br>
<code>vim {a..c}.txt</code><br>
<code>vim !!:2</code>   # 即 vim b.txt</p>
</li>
<li>
<p><code>!str:x-y</code><br>
重用上一条以 str 开头的命令的第 x 到第 y 个参数；<br>
<code>touch a.txt b.txt c.txt d.txt</code><br>
<code>vim !touch:2-3</code>   # 即 vim b.txt c.txt</p>
</li>
<li>
<p><code>!?str:n*</code><br>
重用上一条包含 str 的命令的从第 n 个到最后一个参数；<br>
<code>vim foo.h foo.cc bar.h bar.cc</code><br>
<code>wc !?vim:2*</code># 即 wc <a href="http://foo.cc" target="_blank" rel="external">foo.cc</a> bar.h <a href="http://bar.cc" target="_blank" rel="external">bar.cc</a></p>
</li>
</ul>
<h3 id="参数的子字符串">参数的子字符串</h3>
<ul>
<li>
<p>利用 :h 截取路径开头，相当于 dirname</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls /usr/share/fonts/truetype/dejavu    </div><div class="line"><span class="built_in">cd</span> !$:h  <span class="comment"># 即 cd /usr/share/fonts/truetype</span></div></pre></td></tr></table></figure>
</li>
<li>
<p>利用 :t 截取路径结尾，相当于 basename<br>
<code>tar zxf !$:t # 相当于 tar zxf nginx-1.4.7.tar.gz</code></p>
</li>
<li>
<p>利用 :r 截取文件名</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gunzip filename.gzip</div><div class="line"><span class="built_in">cd</span> !$:r  <span class="comment"># 即 cd filename</span></div></pre></td></tr></table></figure>
</li>
<li>
<p>利用 :e 截取文件扩展名</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls file.jpg</div><div class="line"><span class="built_in">echo</span> !$:e  <span class="comment"># 即 echo jpg&lt;b&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>简单记忆：<br>
<code>h|t</code><br>
<code>r|e</code></p>
<h3 id="参数的补全">参数的补全</h3>
<h4 id="引子">引子</h4>
<p>我们用<code>which &quot;command&quot;</code>命令时，可能感觉到<code>which</code>后面的命令无法补全，很不方便，比如<code>which python3</code>就需要手动输入python3。因此我们不禁希望参数也可以用[tab]补全。<br>
实际上，linux是可以补全参数的。比如zsh就自带补全参数。最主流的bash经过设置，也是可以补全参数的。<br>
bash 中标准补全功能包含了<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：</p>
<ul>
<li>路径补全</li>
<li>文件名补全</li>
<li>变量补全</li>
<li>用户名补全</li>
<li>主机名补全<br>
很多人比较熟悉的补全可能只有前两项。此外，我们还可以通过complete命令，自定义补全参数。<br>
以<code>which</code>为例，<code>$ complete -c which</code>，就可将所有命令作为<code>which</code>的参数进行补全了。<br>
complete具有强大的补全功能，更多设置可以参考<sup class="footnote-ref"><a href="#fn1" id="fnref1:1">[1]</a></sup>。</li>
</ul>
<h4 id="complete">complete</h4>
<ul>
<li>CentOS 7.3，在<code>/etc/bash_completion.d/</code>进行设置。</li>
<li><code>-F</code>设定补全函数</li>
</ul>
<h3 id="alt">alt</h3>
<p>如果不是直接在终端上操作，alt键需要进行设置才能使用。**比如Xshell中，在“属性–键盘–将Alt键作为Meta仿真”打钩，才能使用；OS X上，无法用alt键。**PS：win键盘一般alt键当做Meta键；ALt GR：有些老键盘左边是Alt，右边是ALt GR键<br>
Alt+./Esc+. (!^ !$): 将最近一条命令的参数输出<br>
Alt+ f/b: 向前/后移动一个词</p>
<h3 id="其他">其他</h3>
<ul>
<li>Brace Expansion<br>
<code>ls /usr/{,local}/bin</code>，会列出&quot;/usr/bin&quot;和&quot;/usr/local/bin&quot;</li>
<li>shell特殊变量<br>
<code>$0</code>     当前shell程序的名字<br>
<code>$1 ~ $9</code>    命令行上的第一到第九个参数<br>
<code>$#</code>    命令行上的参数个数<br>
<code>$*, $@</code>   命令行上的所有参数<br>
<code>$?</code>    上一条命令的退出状态<br>
<code>$$</code>    当前进程的进程标识号(PID)<br>
<code>$!</code>    最后一个后台进程的进程标识号</li>
</ul>
<h3 id="外部资源链接">外部资源链接</h3>
<p>更多牛逼命令：           <a href="http://www.zhihu.com/question/20140085" target="_blank" rel="external">http://www.zhihu.com/question/20140085</a><br>
<a href="http://www.zhihu.com/question/20273259" target="_blank" rel="external">http://www.zhihu.com/question/20273259</a><br>
<a href="http://www.zhihu.com/question/25910725/answer/31951050" target="_blank" rel="external">http://www.zhihu.com/question/25910725/answer/31951050</a><br>
linux shell 快捷键:      <a href="http://blog.chinaunix.net/uid-361890-id-342066.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-361890-id-342066.html</a></p>
<h3 id="编码-ctrl-h；终端-f1">编码 ctrl+h；终端 F1</h3>
<ul>
<li><strong>ascii中Backspace的值为010（八进制），而ASCII values can be represented in several equivalent ways.</strong><br>
而ctrl+h的值也为010。<br>
<br>
terminal区分不了二者，因此输入以ascii编码，则ctrl+h变为Backspace；而输入不以ascii编码，Backspace也会显示成^H，即ctrl+h</li>
<li>terminal类型的选择也会影响快捷键<br>
Xshell中，文件–属性–键盘–功能键类型 选择xterm R6，则VIM中可以绑定F1；如果选linux，则不可以</li>
</ul>
<h2 id="系统信息：">系统信息：</h2>
<ul>
<li>cpu information<br>
<code>cat /proc/cpuinfo</code></li>
<li>列出内核版本、主机名等信息<br>
<code>uname -a</code></li>
<li>发行版信息<br>
<code>cat /etc/redhat-release</code></li>
</ul>
<h2 id="alias命令：">alias命令：</h2>
<p><a href="http://stackoverflow.com/questions/22537699/cannot-use-alias-while-executing-a-command-via-ssh" target="_blank" rel="external">http://stackoverflow.com/questions/22537699/cannot-use-alias-while-executing-a-command-via-ssh</a></p>
<blockquote>
<p>Quoted from the man page of bash: Aliases are not expanded when the shell is not interactive, unless the expand_aliases shell option is set using shopt …</p>
</blockquote>
<h2 id="apt-get">apt-get</h2>
<ul>
<li>Usage: <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get update \</div><div class="line"> &amp;&amp; apt-get upgrade -y \</div><div class="line"> &amp;&amp; apt-get install -y \</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>update</code>：第一步，获得最近的软件包的列表；列表中包含一些包的信息，比如这个包是否更新过。<br>
<code>upgrade</code>：第二步，如果这个包没有发布更新，就不管它；如果发布了更新，就把包下载到电脑上，并安装。</p>
<ul>
<li>
<p>apt-cache can search package</p>
</li>
<li>
<p>common package name<br>
libboost-all-dev</p>
</li>
</ul>
<h2 id="at命令：">at命令：</h2>
<p>介绍：定时执行一次命令。如果想周期地执行命令，请使用crontab</p>
<ol>
<li><code>at -f work.sh now +3 min</code><br>
3分钟后执行脚本 <a href="http://work.sh" target="_blank" rel="external">work.sh</a>    -f指的是从文件读入命令<br>
其他的时间表示法：at 17:30 2/24/99</li>
<li>atq （等于at -l）<br>
查看at任务队列</li>
<li>atrm+任务号</li>
<li>似乎没有单命令行的用法，一般用法都是“at 时间”然后进入at命令，输入要执行的命令，然后退出</li>
</ol>
<h2 id="awk命令：">awk命令：</h2>
<p><strong>替换操作在awk中不易执行。</strong></p>
<ol>
<li>
<p><code>awk '/pattern/ {print $0 }' filename</code><br>
e.g.  <code>awk '/abc/ {print $0 }' filename</code>, 则含有 abcde 的行也会被输出。</p>
</li>
<li>
<p><code>awk 'NR==2 {print $0}' aver.tmp</code></p>
</li>
<li>
<p><code>awk '$1!~/match_str/ {print $0 }' filename</code></p>
</li>
<li>
<p>去掉重复的单词</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/awk -f</span></div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= NF; i++)</div><div class="line">  &#123;</div><div class="line">      ++word[<span class="variable">$i</span>]</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (word[<span class="variable">$i</span>] == <span class="number">1</span>)</div><div class="line">          printf(<span class="string">"%s "</span>, <span class="variable">$i</span>)</div><div class="line">  &#125;</div><div class="line">  printf(<span class="string">"\n"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li>
<p>awk script</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/awk -f</span></div><div class="line"><span class="comment">#是注释符号</span></div><div class="line"><span class="keyword">BEGIN</span> &#123;</div><div class="line">......</div><div class="line">&#125;</div><div class="line">&#123; <span class="comment">#这个中括号不能省略</span></div><div class="line">......</div><div class="line">&#125;</div><div class="line"><span class="keyword">END</span> &#123;</div><div class="line">......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li>
<p>引用外部变量的几种方式：<br>
【来自：<a href="http://club.topsage.com/thread-393615-1-1.html%E3%80%91" target="_blank" rel="external">http://club.topsage.com/thread-393615-1-1.html】</a></p>
<blockquote>
<p>（1）<code>&quot;'&quot;var&quot;'&quot; ——错。应该是&quot;'&quot;$var&quot;'&quot;</code><br>
（2）<code>awk '{print a, b}' a=111 b=222 yourfile</code><br>
（3）<code>awk –v a=111 –v b=222 ‘{print a,b}’ yourfile</code><br>
（4）【ct】<code>pid=$(ps -f | awk '/gpu='&quot;$gpu&quot;'/ &amp;&amp; !/awk/ {print $2}')</code>   ——在//之间，引用外部变量的正确方式是’&quot;$v&quot;’</p>
</blockquote>
</li>
<li>
<p>引用外部命令的两种方式：【<a href="http://hi.baidu.com/gubuntu/blog/item/050398ceb010513fb700c8d0.html%E3%80%91" target="_blank" rel="external">http://hi.baidu.com/gubuntu/blog/item/050398ceb010513fb700c8d0.html】</a><br>
例:<code>awk '{if(/Beren/) {print $0 | &quot;cut -b 2-&quot; } else print $0}' job.plm</code><br>
但糟糕的是，上面这条命令的输出顺序与你设想的并不一致</p>
</li>
<li>
<p>求最大值、最小值、求方差等</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'&#123;if (max=="")  &#123;max=$3&#125; else &#123;if ($3&gt;max) max=$3&#125;&#125; END &#123;print max&#125;'</span> file1 </div><div class="line">awk <span class="string">'&#123;if (min=="")  &#123;min=$2&#125; else &#123;if ($2&lt;min) min=$2&#125;&#125; END &#123;print min&#125;'</span> file1 </div><div class="line">awk <span class="string">'&#123;sum+=$1; sumsq+=$1*$1&#125; END &#123;print sqrt(sumsq/NR-(sum/NR)**2)&#125;'</span> file1 </div><div class="line">【注意】：中间不能有空行或短行，否则<span class="variable">$3</span>=null，而系统会认为null比负数还小，如果数列中含有负数，那么上式就会出现问题</div></pre></td></tr></table></figure>
</li>
<li>
<p>求和</p>
<ul>
<li>对六百列分别求和</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>((i=1;i&lt;=600;i++))</div><div class="line"><span class="keyword">do</span></div><div class="line">  awk <span class="string">'&#123;sum+=$'</span><span class="string">"<span class="variable">$i</span>"</span><span class="string">'&#125;END&#123;print sum/"'</span><span class="string">"<span class="variable">$num_exc</span>"</span><span class="string">'"&#125;'</span> ttt1.tmp &gt;&gt; data</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<ul>
<li>对行求和</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">awk -v FS=<span class="string">","</span> -v OFS=<span class="string">"+"</span> <span class="string">'&#123;$1="";system("echo $["$0"]")&#125;'</span></div><div class="line">awk -F<span class="string">','</span> <span class="string">'&#123;for(i=2;i&lt;=NF;i++)sum[NR]+=$i;print $1","sum[NR]&#125;'</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>【来自】<a href="http://bbs.chinaunix.net/thread-1384345-1-1.html" target="_blank" rel="external">http://bbs.chinaunix.net/thread-1384345-1-1.html</a></p>
<ol start="10">
<li>printf用法<br>
<code>printf &quot;%s %s %s &quot;,$1,$2,$3</code></li>
<li>求最大值、最小值、求方差等</li>
</ol>
   <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'&#123;if (max=="")  &#123;max=$3&#125; else &#123;if ($3&gt;max) max=$3&#125;&#125; END &#123;print max&#125;'</span> file1 </div><div class="line">awk <span class="string">'&#123;if (min=="")  &#123;min=$2&#125; else &#123;if ($2&lt;min) min=$2&#125;&#125; END &#123;print min&#125;'</span> file1 </div><div class="line">awk <span class="string">'&#123;sum+=$1; sumsq+=$1*$1&#125; END &#123;print sqrt(sumsq/NR-(sum/NR)**2)&#125;'</span> file1 </div><div class="line">【注意】：中间不能有空行或短行，否则<span class="variable">$3</span>=null，而系统会认为null比负数还小，如果数列中含有负数，那么上式就会出现问题</div></pre></td></tr></table></figure>
<ol start="12">
<li>awk中 ‘’ 和 “” 【单引号和双引号】<br>
&quot;&quot;是直接输出<br>
’'是转义输出,'C1’就有特殊的含义</li>
<li><a href="https://stackoverflow.com/questions/16529716/awk-save-modifications-in-place" target="_blank" rel="external">gawk 4.1.0之后才可以原位修改文件</a></li>
</ol>
<h2 id="bc命令：">bc命令：</h2>
<p>1.m的n次方<br>
<code>echo &quot;m^n&quot;|bc</code><br>
2.计算π：<br>
<code>echo &quot;scale=100; a(1)*4&quot; | bc -l</code><br>
【附一部分man】</p>
<blockquote>
<p>MATH LIBRARY<br>
If bc is invoked with the -l option, a math library is preloaded and the default  scale  is  set  to  20.<br>
The  math  functions  will  calculate their results to the scale set at the time of their call.  The math<br>
library defines the following functions:<br>
s (x)  The sine of x, x is in radians.    正玄函数<br>
c (x)  The cosine of x, x is in radians.  余玄函数<br>
a (x)  The arctangent of x, arctangent returns radians. 反正切函数<br>
l (x)  The natural logarithm of x.  log函数(以2为底)<br>
e (x)  The exponential function of raising e to the value x.  e的指数函数<br>
j (n,x)<br>
The bessel function of integer order n of x.   贝塞尔函数</p>
</blockquote>
<p>3.做加减法时（比如<code>a*b+c</code>）bc不会读入scale信息，所以要想设定scale，可以写成<code>(a*b+c）/1</code>,除法是一定会读入scale的。（<code>(a*b+c）*1</code>）没有效果，但<code>a*b</code>有效果）<br>
【第二次测试，不存在这个问题了】</p>
<ol start="4">
<li>bc不能识别形式为科学计数法的输入，如1.2345e+06</li>
</ol>
<h2 id="convert命令：">convert命令：</h2>
<ol>
<li>
<p><code>convert ${i%plt}eps -density 100x100 ${i%plt}tif</code></p>
</li>
<li>
<p><code>convert ${i%plt}eps -density 300 ${i%plt}png</code>  #300代表dpi</p>
</li>
<li>
<p><code>convert -loop 1</code>中loop是播放次数；0代表无限循环<br>
<code>-pause 200</code>：暂停200毫秒，再进行下一轮播放。</p>
</li>
<li>
<p>animated gif</p>
<blockquote>
<p><code>convert -delay 120 -loop 0 *.png animated.gif</code><br>
The delay parameter specifies the delay between frames in 0.01s, while the loop parameter determines how many times the animation runs (the 0 value will run the loop infinitely).</p>
</blockquote>
<p><a href="http://www.linux-magazine.com/Online/Blogs/Productivity-Sauce/Create-Animated-GIFs-with-ImageMagick" target="_blank" rel="external">source</a></p>
</li>
</ol>
<h2 id="cp命令：">cp命令：</h2>
<ol>
<li><a href="http://blog.chinaunix.net/uid-9525959-id-2303690.html" target="_blank" rel="external">cp自动创建层级结构</a><br>
例子: <code>cp --parents parentdir1/parentdir2/sourcefile destdir/</code></li>
</ol>
<h2 id="cut命令：">cut命令：</h2>
<p>cut命令很好用<br>
<code>awk '/Beren/ {print $0}' tt1 | cut -b 2-</code>cut部分的意思是截取第二个到最后一个字符。</p>
<h2 id="diff命令">diff命令</h2>
<p>1.对比两个文件夹的不同<br>
<code>diff -ruN tmp_galamost-3.0.6/ galamost-3.0.6_origin/ &gt; diff_text</code></p>
<h2 id="echo命令：">echo命令：</h2>
<ul>
<li><code>-e</code> 开启反斜杠转义字符</li>
<li><code>-E</code> 关闭反斜杠转义字符</li>
<li><code>-n</code> 去掉echo默认输出的换行符</li>
<li>测试 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> -e <span class="string">"a\tb\tc\n"</span></div><div class="line">a	b	c</div><div class="line">$ <span class="built_in">echo</span> -E <span class="string">"a\tb\tc\n"</span></div><div class="line">a\tb\tc\n</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="gprof：">gprof：</h2>
<p><a href="http://blog.csdn.net/linquidx/article/details/5916701" target="_blank" rel="external">http://blog.csdn.net/linquidx/article/details/5916701</a><br>
<a href="http://blog.csdn.net/stanjiang2010/article/details/5655143" target="_blank" rel="external">http://blog.csdn.net/stanjiang2010/article/details/5655143</a></p>
<ol>
<li>gprof -b -A -p -q test gmon.out &gt; x<br>
-b选项的作用是输出程序说明，对比加-b选项和不加的情况就明白了</li>
</ol>
<h2 id="grep命令：">grep命令：</h2>
<ul>
<li><code>-i</code>： 忽略大小写</li>
<li><code>-v</code>： 不显示匹配的项</li>
<li>同时匹配str1<mark>或</mark>str2:<br>
<code>grep &quot;str1\|str2&quot;</code></li>
<li>同时匹配str1<mark>与</mark>str2:<br>
<code>grep str1 filename | grep str2 # I tried, but there's no elegant way to do this.</code></li>
</ul>
<h2 id="kill命令：">kill命令：</h2>
<p>如果要让它恢复到后台，用kill -CONT 1234 （很多在前台运行的程序这样是不行的）<br>
kill -STOP 1234<br>
如果要恢复到前台，请在当时运行该进程的那个终端用jobs命令查询暂停的进程</p>
<h2 id="ls命令：">ls命令：</h2>
<p>1.只显示文件<br>
<code>ls -l | grep ^- | awk '{print $9}'</code><br>
<code>ls -1 -F | grep -v [/$]</code></p>
<p>2.只显示文件夹<br>
只显示文件夹： <code>ls -d */</code><br>
<code>-d</code>的意义:      显示目录本身的信息，而不是列出目录下的文件<br>
<code>ls *</code>：         显示所有文件、文件夹及其中的文件(文件夹)<br>
<code>ls -d *</code>:       显示所有文件、文件夹</p>
<h3 id="查看linux进程的执行文件路径">查看linux进程的执行文件路径</h3>
<blockquote>
<pre><code>      1、以超级用户登陆
</code></pre>
</blockquote>
<pre><code>       2、进入/proc目录
       3、ps查看所有符合./cmd的进程，找出其对应的PID进程号
       4、用ll命令： ll 进程号 
          如下显示一个示例：
          [root@Cluster1 proc]# ll 22401 (proc文件夹中有对应PID码的文件名,进入即可)
   total 0
   -r--r--r--    1 zhouys    zhouys     0 Dec 11 11:10 cmdline
   -r--r--r--    1 zhouys    zhouys     0 Dec 11 11:10 cpu
   lrwxrwxrwx    1 zhouys    zhouys     0 Dec 11 11:10 cwd -&gt; /home/zhouys/sbs/bin
   -r--------    1 zhouys    zhouys     0 Dec 11 11:10 environ
   lrwxrwxrwx    1 zhouys    zhouys     0 Dec 11 11:10 exe -&gt; /home/zhouys/sbs/bin/cbs (deleted)
   dr-x------    2 zhouys    zhouys     0 Dec 11 11:10 fd
   -r--------    1 zhouys    zhouys     0 Dec 11 11:10 maps
   -rw-------    1 zhouys    zhouys     0 Dec 11 11:10 mem
   -r--r--r--    1 zhouys    zhouys     0 Dec 11 11:10 mounts
   lrwxrwxrwx    1 zhouys    zhouys     0 Dec 11 11:10 root -&gt; /
   -r--r--r--    1 zhouys    zhouys     0 Dec 11 11:10 stat
   -r--r--r--    1 zhouys    zhouys     0 Dec 11 11:10 statm
   -r--r--r--    1 zhouys    zhouys     0 Dec 11 11:10 status
          /proc文件系统下的 进程号目录 下面的文件镜像了进程的当前运行信息，
          从中可以看到：
          cwd符号链接的就是进程22401的运行目录；
          exe符号连接就是执行程序的绝对路径；
          cmdline就是程序运行时输入的命令行命令；本例为：./cbs
          cpu记录了进程可能运行在其上的cpu；显示虚拟的cpu信息
          environ记录了进程运行时的环境变量
          fd目录下是进程打开或使用的文件的符号连接
          ...
    通过cwd直接进入进程运行目录，通过查看相关信息就可以定位此目录对应那个端口号，以及
定位是那个应用才使用此服务程序。       
       5、`ps -aux` 命令
       ps也可打印其路径,但不是万能的,有些路径只能使用以上两种方法取得
</code></pre>
<h2 id="ln">ln</h2>
<ul>
<li>ln source target</li>
<li>hard link<br>
hard link是两个文件共享一个inode，然而各种编辑器编辑文件时（例如vi, Mou），是会重新生成一个文件并删除老文件的，这导致inode变化。所以hard link是几乎没用的功能：因为文件的inode经常会变。</li>
<li><strong>删除文件夹的软链接</strong><br>
例如mydir是一个文件夹的软链接，如果想删除软链接，我们一般的操作为，<code>rm my[tab]</code>以补全文件名，结果为：<br>
<code>rm mydir/</code><br>
然而这样删除会提示：<code>rm: cannot remove ‘test’: Is a directory</code>。<br>
<strong>这时候千万不能加上<code>-r</code>，如果加上，会把软链接的源文件删除掉！</strong><br>
正确删除文件夹软链接的命令为：<code>rm mydir</code></li>
</ul>
<h2 id="mkdir命令：">mkdir命令：</h2>
<p>在预设情况下目录得一层一层的建立，但通过-p参数，就可以之间建立。</p>
<h2 id="netstat">netstat</h2>
<p>Settings</p>
<ul>
<li><code>-t</code>/<code>-u</code>: tcp protocol/udp protocol</li>
<li><code>-r</code>: display routing table</li>
</ul>
<p>Common command</p>
<ul>
<li><code>netstat -nr</code><br>
show IP routing table</li>
<li><code>netstat -tnpl</code><br>
show the listened port</li>
</ul>
<h2 id="ping">ping</h2>
<p>Check connection of whole web segment.<br>
<code>ping 192.9.204.$i -c2 | grep -q &quot;ttl=&quot; &amp;&amp; echo &quot;$i yes&quot; || echo &quot;$i no&quot;</code></p>
<h2 id="printf命令：">printf命令：</h2>
<p>1.补零<br>
<code>printf &quot;%05d&quot; 123</code><br>
结果是：00123<br>
参考：<a href="http://blog.csdn.net/truelie/article/details/1692942" target="_blank" rel="external">http://blog.csdn.net/truelie/article/details/1692942</a></p>
<h2 id="ps命令">ps命令</h2>
<ol>
<li>linux查看进程启动时间(运行多长时间)<br>
<code>ps -eo pid,lstart,etime | grep your_pid</code></li>
</ol>
<h2 id="scp命令">scp命令</h2>
<ol>
<li><code>scp</code>与软链接<br>
会把软链接的文件都拷贝过去！正确的拷贝方法为：<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo tar -czvf test.tgz test</div><div class="line">scp ~/test.tgz </div><div class="line">sudo tar -xzvf test.tgz -C .</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="sed命令：">sed命令：</h2>
<p><a href="http://www.cnblogs.com/ctaixw/p/5860221.html" target="_blank" rel="external">sed命令详解</a></p>
<ol>
<li>
<p>抓取第m 到 第n行：<br>
<code>sed -n &quot;m,np&quot; filename</code><br>
<code>sed -n &quot;$[$fl*($i-1)+1],$[$fl*$i]p&quot; ../../precopy/h-tail-10 &gt; frame$i</code></p>
</li>
<li>
<p>在file1第3行之后插入file2:<br>
<code>sed '3 r file2' file1</code></p>
</li>
<li>
<p>将“vel[i].x vel[i].y vel[i].z”替换成“velx[i] vely[i] velz[i]”<br>
<code>s/\[i\]\.\([xyz]\)/\1[i]/g</code></p>
</li>
<li>
<p>&amp;字符 : 代表其前 pattern 字串<br>
例：<code>sed -e 's/test/&amp; my car/'</code>替换后变为：test my car</p>
</li>
<li>
<p>在有字符串33的行的行首，添加<br>
<code>sed -i '/33/s/^/#&amp;/' t1.plm</code><br>
注意为什么要有^：<br>
有“^”，“&amp;”代表的是有字符串33存在的整行<br>
没有“^”，“&amp;”代表的是字符串33</p>
</li>
<li>
<p>将原来的所有空行删除并在每一行后面增加一空行<br>
<code>sed '/^$/d;G' file3</code></p>
</li>
<li>
<p>在指定(export)行前面加行<br>
<code>sed '/export/i xxx' file</code>或<code>sed '/export/i \xxx' file</code><br>
在指定(export)行前面后行<br>
<code>sed '/export/a xxx' file</code>或<code>sed '/export/a \xxx' file</code></p>
</li>
<li>
<p>单引号的转义<br>
<code>'\''</code><br>
<code>sed 's/'\''//g'</code># 将单引号替换为空格</p>
</li>
<li>
<p>匹配空行<br>
正常匹配空行是<code>^$</code>；但是对于从windows拷贝过来的文件，要用<code>^.$</code>匹配<br>
而vim（版本8.0）内置的sed，不论文件来自哪种系统，都可以用<code>^$</code>匹配<br>
<code>sed '/^[[:space:]]*$/d' file</code> 可以去掉由空格、Tab和换行组成的空行!</p>
</li>
<li>
<p>指定行添加内容<br>
<code>sed -i '1 i \#!/home/ct/bin/gnuplot5/bin/gnuplot5/' gnu.plt</code></p>
</li>
<li>
<p>外部变量<br>
<code>sed 's/standard/'&quot;$i&quot;'/'</code></p>
</li>
<li>
<p><code>sed -i</code>会使软链接失效<br>
<code>--follow-symlinks</code>可以保持软连接</p>
</li>
<li>
<p>同时取代多个字符串<br>
<code>sed -e 's/str1//;s/str2//' filename</code></p>
</li>
</ol>
<h2 id="set命令">set命令</h2>
<p><mark><code>set</code> is important, but always neglected!</mark><br>
<code>set -u</code>: if a varible does not exist, report an error.<br>
<code>set -x</code>: print the corresponding command before output.<br>
<code>set -e</code>: stop the script when  an error is encountered.<br>
<code>set -o pipefail</code>: Without this option, the error during a pipeline will not be reported.</p>
<p>These 4 setting should be used at all times.<br>
In script: add <code>set -euxo pipefail</code> in the beginning of script.<br>
In cli: <code>$ bash -euxo pipefail script.sh</code></p>
<ul>
<li>bash option<br>
<code>-l</code>: Make bash act as if it had been invoked as a login shell. <mark>the profile file will be loaded!</mark> E.g., <code>/etc/profile</code>.</li>
</ul>
<h2 id="sort命令">sort命令</h2>
<ol>
<li>按第二行排序<br>
<code>sort -n -k2 file</code></li>
</ol>
<h2 id="ssh命令">ssh命令</h2>
<p>通过ssh执行命令时，由于没有登录，是不会执行<code>source .bash_profile</code>的。可以手动执行解决这个问题：<br>
例如：<code>sshpass -p 'password' ssh -o StrictHostKeyChecking=no -l lzy&quot;$i&quot; 192.9.207.204 &quot;source .bash_profile;/opt/sge/sge6_2u4/bin/lx24-amd64/qstat&quot;</code></p>
<h2 id="su命令：">su命令：</h2>
<p>1.关于login<br>
（1）.直接登录root<br>
（2）.由其他用户名登录到root:  su -，否则就是没有login<br>
（3）<code>su -c 'command'</code></p>
<h2 id="time命令">time命令</h2>
<ol>
<li><code>time ./program</code><br>
参数：<strong>-p</strong> 以秒为默认单位来进行输出</li>
</ol>
<h2 id="top命令：">top命令：</h2>
<p>1.查看内存<br>
可以直接使用top命令后，查看%MEM的内容<br>
查看用户ct的进程的内存： <code>top -u ct</code><br>
查看特定进程的内存：<code>top -d 1 -p pid [,pid ...]</code> //设置为delay 1s，默认是delay 3s；如果想根据内存使用量进行排序，可以shift + m（Sort by memory usage）</p>
<h2 id="uniq命令">uniq命令</h2>
<ol>
<li><code>uniq -c</code><br>
在每行行首加上本行在文件中出现的次数(count)。它可取代-u加-d。</li>
</ol>
<h2 id="unzip">unzip</h2>
<p>unzip -O GBK you_zip_file.zip<br>
For more ways to tickle with gibberish: [Linux文件乱码]](<a href="https://zhuanlan.zhihu.com/p/25988628" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/25988628</a>)</p>
<h2 id="xargs命令-find命令：">xargs命令 &amp; find命令：</h2>
<ol>
<li><code>awk '{print }' filenames | xargs du -h</code><br>
文件filenames中存储了一些文件名，用这种方式，可以看到每个文件的大小</li>
<li><code>find . -name &quot;pa*.xml&quot; | xargs -n 10000 rm -f</code><br>
find + xargs 是“Argument list too long”问题的标准解决方法，find命令是持续输出的，而xargs再将find的出处分成若干段，再进行下一步处理</li>
<li>`find -name *.dcd | tee -a dcd_name | xargs rm &amp;<br>
删除文件，并将删除的文件的路径输入到dcd_name中</li>
<li>批量转换文件格式<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls *.jpg | xargs -I&#123;&#125; -P 8 convert <span class="string">"&#123;&#125;"</span> `<span class="built_in">echo</span> &#123;&#125; | sed <span class="string">'s/jpg$/png/'</span>`</div></pre></td></tr></table></figure>
</li>
</ol>
<p>其中-P代表进程数；<br>
-i 或者是-I，这得看linux支持了，将xargs的每项名称，一般是一行一行赋值给{}，可以用{}代替。”<br>
在当前这个命令下，以tmp.jpg为例，实际上执行的是 convert tmp.jpg tmp.png</p>
<h2 id="yum命令">yum命令</h2>
<ol>
<li><code>yum install foo</code></li>
<li><code>yum remove foo</code></li>
<li><code>yum search *foo*</code></li>
<li><code>yum info *foo*</code></li>
<li><code>yum list *foo* # the available packages</code></li>
<li><code>yum localinstall foo.rpm</code></li>
<li><code>yum install -y --downloadonl --downloaddir=/opt</code><br>
But by this method, if the newest package has been installed, then nothing will be done. To solve this problem, you can do :<br>
<code>yum install yum-utils</code><br>
<code>yumdownloader &lt;package&gt;</code> # will download directly.</li>
<li>package name and virsion name should be concatenated by ‘-’</li>
<li>install openmpi<br>
<code>yum install -y openmpi openmpi-dev</code></li>
<li>update &amp; upgrade<br>
<code>yum -y update</code><br>
升级所有包，改变软件设置和系统设置，系统版本内核都升级<br>
<code>yum -y upgrade</code><br>
升级所有包，不改变软件设置和系统设置，系统版本升级，内核不改变<br>
<mark>Note!</mark> apt-get的update、upgrade与yum的非常不同。</li>
<li><code>yum whatprovides autoconf</code><br>
<code>wget https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=3</code><br>
<a href="http://kaifage.com/notes/112/centos-yum-source.html" target="_blank" rel="external">CentOS yum中科大源 </a></li>
</ol>
<h2 id="逻辑表达式与-和-：">逻辑表达式与<code>&amp;&amp;</code>和<code>||</code>：</h2>
<ul>
<li>
<p>逻辑表达式<br>
（1）C语言中写法：<br>
<code>if (a == b &amp;&amp; a == c)</code></p>
<p>shell 中的写法：<br>
<code>if ([ $a -eq $b ] &amp;&amp; [ $a -eq $c ]); then</code><br>
(2) C 语言中的写法：<br>
<code>if (a == b &amp;&amp; a == c &amp;&amp; b == c)</code><br>
shell 中的写法：<br>
<code>if [ $a -eq $b -o $a -eq $c -o $b -eq $c ]; then</code><br>
<code>if [ $a -eq $b ] &amp;&amp; [ $a -eq $c ] &amp;&amp; [ $b -eq $c ]; then</code><br>
注意：“[”或“]”与表达式之间必须要有空格。</p>
</li>
<li>
<p><code>[[ ]]</code> vs. <code>[ ]</code> <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup><br>
<code>[ ]</code>是shell built-in，而<code>[[ ]]</code>不属于POSIX；<br>
<code>[ ]</code>会展开<code>a*</code>，所以用它的时候需要加双引号：<code>[ &quot;$var&quot; ]</code>；<code>[[ ]]</code>不需要<br>
<code>[ ]</code>会fork a new process，<code>[[ ]]</code>不会</p>
</li>
</ul>
<ul>
<li><code>&amp;&amp;</code>和<code>||</code><br>
<code>&amp;&amp;</code>和<code>||</code>与逻辑表达式表面相似，实则完全不同，如果混淆了会导致严重的错误。<br>
<code>command1 &amp;&amp; command2</code>，如果command1返回值为真（<code>$?==0</code>），才会执行command2。一般命令正确执行了，都会返回0。<br>
<code>command1 || command2</code>则是command1返回值为假（<code>$? != 0</code>）才执行command2。<br>
关于这两个算符，还<strong>有个隐僻但重要的问题</strong>是<code>command1 &amp;&amp; command2</code>的返回值，如果command1返回值为假，<strong>整个表达式的返回值也为假，表达式所在的脚本的返回值也为假！</strong>。<br>
有不少人认为<code>[ ... ] &amp;&amp; ...</code>和<code>if</code>语句效果一样但更简洁，这种想法是错误的，因为前一种用法会影响程序返回值，而<code>if</code>语句不会。如果在脚本中用前一种方法，会莫名其妙的导致返回值为假又没有任何报错。</li>
</ul>
<h2 id="脚本注意事项：">脚本注意事项：</h2>
<ol>
<li>
<p><code>declare -A var # 声明为关联数组</code><br>
<code>declare -a var # 声明为数组</code><br>
二者很不同</p>
</li>
<li>
<p>关联数组定义的后面不能加#<br>
例如：<code>array=([seg]=100)# 这样会出问题</code></p>
</li>
<li>
<p>命令中blank space是不能随便加的<br>
Because blank space is usually used as the separater of command or agruments.<br>
<code>&lt;&lt;block #</code>&lt;&lt; 和 block之间不能有空格</p>
</li>
</ol>
<ol start="4">
<li>脚本的长度<br>
不要把不同功能写到一个脚本中，尤其是脚本较大的时候。<br>
即使你可以非常顺利的写出脚本的每一句，也不意味着你的脚本可以正常执行。<br>
所以要分块编写:<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">!/bin/sh</div><div class="line">  part1.sh</div><div class="line">  part2.sh</div><div class="line">  part3.sh</div><div class="line"><span class="built_in">exit</span></div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>优点：<br>
这样编写把part1-3的内容写在一个脚本里执行起来是一样的，但是，像这样将脚本分割，有利于调试脚本。由于脚本过于灵活，所以非常容易出错，而出错几率是和大小成指数关系的。所以要把脚本分化，使每一部分都有明确的意义，一来方便检查脚本是否有误，二来增加代码的重复利用率。</li>
<li>缺点：<br>
传递参数麻烦。</li>
</ul>
<h3 id="常见错误">常见错误</h3>
<ul>
<li>循环变量的错误使用<br>
比如说循环变量i，在其他地方是否被改动了？<br>
这种错误shell是不会检查出来的</li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://www.linuxidc.com/Linux/2015-09/123568.htm" target="_blank" rel="external">Linux 中 10 个有用的命令行补全例子</a> <a href="#fnref1" class="footnote-backref">↩</a> <a href="#fnref1:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://stackoverflow.com/questions/669452/is-preferable-over-in-bash" target="_blank" rel="external">Is double braket preferable over single braket in Bash? </a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录用过的命令，方便以后查找。不包含太简单的或太难的。&lt;br&gt;
长度感人。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://timchen314.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://timchen314.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python mechanism</title>
    <link href="http://timchen314.com/python_mechanism/"/>
    <id>http://timchen314.com/python_mechanism/</id>
    <published>2017-07-28T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="0-is-与-的区别">0. is 与 <code>==</code>的区别</h2>
<p>python对象有三个要素：id、type、value。is 比较的是id；==比较的是value<br>
而id实际上是内存地址，<code>(ob1 is ob2)</code> 等价于 <code>(id(ob1) == id(ob2))</code></p>
<a id="more"></a>
<p>另外，一些具体的问题，结果不确定，<a href="http://xn--python-hh4kj42jdtr.py" target="_blank" rel="external">比如用python.py</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; x = 500</div><div class="line">   &gt;&gt;&gt; y = 500</div><div class="line">   &gt;&gt;&gt; x is y</div><div class="line">True</div><div class="line">   ```language</div></pre></td></tr></table></figure>
<p>然而用python或者IPython，结果为False</p>
<h2 id="1-mutable-immutable">1. mutable &amp; immutable</h2>
<p>不可变（immutable）：int、字符串(string)、float、（数值型number）、元组（tuple)</p>
<p>可变（mutable）：字典型(dictionary)、列表型(list)</p>
<h2 id="2-with-语句">2. with 语句</h2>
<p><strong>自动进行对象的生命周期进行管理</strong><br>
Python中的with语句中要求对象实现<code>__enter__</code>和<code>__exit__</code>函数。调用with语句时，会先分析该语句，执行<code>__enter__</code>函数，然后在当前suite退出时，会调用<code>__exit__</code>函数。<code>__exit__</code>函数中除了可以做释放资源的操作之外，同时也是异常处理的地方。如果当前suite正常退出，没有抛出任何异常，<code>__exit__</code>的几个参数均为None。否则，则将此异常的type、value、traceback作为参数传递给<code>__exit__</code>函数，同时，如果<code>__exit__</code>返回false，此异常会再次抛出，上一级代码suite可以继续处理，如果<code>__exit__</code>返回true，那么此异常就不会被再次抛出了。</p>
<ul>
<li>同时打开多个文件 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(filename1, <span class="string">'rb'</span>) <span class="keyword">as</span> fp1, open(filename2, <span class="string">'rb'</span>) <span class="keyword">as</span> fp2, open(filename3, <span class="string">'rb'</span>) <span class="keyword">as</span> fp3:</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fp1:</div><div class="line">        j = fp2.readline()</div><div class="line">        k = fp3.readline()</div><div class="line">        print(i, j, k)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-list参数传递">3. list参数传递</h2>
<p>python中的默认变量是定义时得到的，类似于static，<strong>其它的时候无论调用几次函数，如果没有传参进来，就会一直用这个默认参数了</strong>。<br>
正确做法：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(element, mylist=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> mylist <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        mylist = []</div><div class="line">    mylist.append(element)</div><div class="line">    <span class="keyword">return</span> mylist</div></pre></td></tr></table></figure>
<h2 id="4-python中函数的参数传递与可变长参数">4*. <a href="http://www.cnblogs.com/xudong-bupt/p/3833933.html" target="_blank" rel="external">Python中函数的参数传递与可变长参数</a></h2>
<p>【tricky】可变长度参数：<code>*tupleArg,**dictAr</code><br>
<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000" target="_blank" rel="external">廖雪峰的更详细的介绍</a><br>
ct总结：参数绑定优先级：</p>
<ol>
<li>指定参数名</li>
<li>顺序</li>
<li>不符合前两条的可以被<strong>可变长度参数</strong>捕捉</li>
<li><strong>可变长度参数</strong>是通过拷贝传到函数内的！与一般机制不同</li>
<li><strong>限制关键字参数的名字</strong></li>
</ol>
<p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div></pre></td></tr></table></figure>
<h2 id="5-generator">5. generator</h2>
<p>最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</p>
<h2 id="6-zip-unpacking-argument-lists">6. zip() &amp; Unpacking Argument Lists——&quot;*&quot; &amp; “**”</h2>
<p><strong>The implementation of zip is very beautiful：</strong><br>
来自<a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="external">python doc</a></p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip</span><span class="params">(*iterables)</span>:</span></div><div class="line">    <span class="comment"># zip('ABCD', 'xy') --&gt; Ax By</span></div><div class="line">    sentinel = object()</div><div class="line">    <span class="comment"># ct: iterators is a "Iterator" point to the "Iterator" of different parameters(形参)</span></div><div class="line">    <span class="comment">#     e.g., at first, iterators is the "Iterator" of 'ABCM';</span></div><div class="line">    <span class="comment">#     iterators.next() is the "Iterator" of 'xy';</span></div><div class="line">    iterators = [iter(it) <span class="keyword">for</span> it <span class="keyword">in</span> iterables]</div><div class="line">    <span class="keyword">while</span> iterators:</div><div class="line">        result = []</div><div class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> iterators:</div><div class="line">            elem = next(it, sentinel)</div><div class="line">            <span class="keyword">if</span> elem <span class="keyword">is</span> sentinel:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            result.append(elem)</div><div class="line">        <span class="keyword">yield</span> tuple(result)</div></pre></td></tr></table></figure>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#zip() in conjunction with the * operator can be used to unzip a list:</span></div><div class="line">   &gt;&gt;&gt; x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">   &gt;&gt;&gt; y = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">   &gt;&gt;&gt; zipped = zip(x, y)</div><div class="line">   &gt;&gt;&gt; list(zipped)</div><div class="line">[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</div><div class="line">   &gt;&gt;&gt; x2, y2 = zip(*zip(x, y))</div><div class="line">   &gt;&gt;&gt; x == list(x2) <span class="keyword">and</span> y == list(y2)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<ul>
<li>Unpacking Argument Lists <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; list(range(<span class="number">3</span>, <span class="number">6</span>))            <span class="comment"># normal call with separate arguments</span></div><div class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">   &gt;&gt;&gt; args = [<span class="number">3</span>, <span class="number">6</span>]</div><div class="line">   &gt;&gt;&gt; list(range(*args))            <span class="comment"># call with arguments unpacked from a list</span></div><div class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="7-iterable和iterator">7. Iterable和Iterator</h2>
<p>凡是可作用于for循环的对象都是Iterable类型，它有__getitem__()方法；<br>
凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列，它有__next__()和__iter__()方法；<br>
集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。<br>
Python的for循环本质上就是通过不断调用next()函数实现的，例如：<br>
for x in [1, 2, 3, 4, 5]:<br>
pass<br>
实际上完全等价于：<br>
首先获得Iterator对象:<br>
<code>it = iter([1, 2, 3, 4, 5])</code><br>
循环:</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># 获得下一个值:</span></div><div class="line">        x = next(it)</div><div class="line">    <span class="keyword">except</span> StopIteration:</div><div class="line">        <span class="comment"># 遇到StopIteration就退出循环break</span></div></pre></td></tr></table></figure>
<ul>
<li>while my_iterator（参见zip的实现）<br>
iterator最终会返回StopIteration对象，而while可以对其进行判断。</li>
</ul>
<h2 id="8-内存">8. 内存</h2>
<h3 id="8-1-释放内存">8.1. 释放内存</h3>
<p>先del再gc.collect()</p>
<h2 id="9-python类">9. Python类</h2>
<h3 id="9-1-和静态语言不同-python允许对实例变量绑定任何数据">9.1. 和静态语言不同，Python允许对<strong>实例变量</strong>绑定任何数据</h3>
<p>也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">59</span>)</div><div class="line">   &gt;&gt;&gt; lisa = Student(<span class="string">'Lisa Simpson'</span>, <span class="number">87</span>)</div><div class="line">   &gt;&gt;&gt; bart.age = <span class="number">8</span></div><div class="line">   &gt;&gt;&gt; bart.age</div><div class="line"><span class="number">8</span></div><div class="line">   &gt;&gt;&gt; lisa.age</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'age'</span></div></pre></td></tr></table></figure>
<h3 id="9-2-python的伪私有属性">9.2. <a href="http://www.cnblogs.com/blackmatrix/p/5600830.html" target="_blank" rel="external">Python的伪私有属性</a></h3>
<p>Note that user defined attributes shall not end with ‘__’</p>
<h3 id="9-3-私有变量的访问方法">9.3. 私有变量的访问方法</h3>
<p>不能直接访问__name是因为Python解释器对外把__name变量改成了_Student__name，所以，仍然可以通过_Student__name来访问__name变量。<br>
注意下面的这种错误写法：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; bart = Student(<span class="string">'Bart Simpson'</span>, <span class="number">98</span>)</div><div class="line">   &gt;&gt;&gt; bart.get_name()</div><div class="line"><span class="string">'Bart Simpson'</span>&gt;&gt;&gt; bart.__name = <span class="string">'New Name'</span> <span class="comment"># 设置__name变量！</span></div><div class="line">   &gt;&gt;&gt; bart.__name</div><div class="line"><span class="string">'New Name'</span></div></pre></td></tr></table></figure>
<p>表面上看，外部代码“成功”地设置了__name变量，但实际上这个__name变量和class内部的__name变量不是一个变量！内部的__name变量已经被Python解释器自动改成了_Student__name，而外部代码给bart新增了一个__name变量。</p>
<h3 id="9-4-特殊函数-call-模糊了对象与函数的区别">9.4. <a href="http://www.cnblogs.com/superxuezhazha/p/5793536.html" target="_blank" rel="external">特殊函数<code>__call__</code>模糊了对象与函数的区别</a></h3>
<h3 id="9-5-类类型的检查-不检查">9.5. 类类型的检查–不检查</h3>
<p>静态语言 vs 动态语言<br>
对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。</p>
<p>对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span><span class="params">(object)</span>:</span><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Start...'</span>)</div></pre></td></tr></table></figure>
<p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p>
<p>Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个read()方法，返回其内容。但是，许多对象，只要有read()方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了read()方法的对象。</p>
<h2 id="10-为什么-python-的类不构成作用域-scope-？-待深入">10. <mark><a href="https://www.zhihu.com/question/263811118" target="_blank" rel="external">为什么 Python 的类不构成作用域（scope）？</a></mark> 待深入</h2>
<h3 id="10-1-exec与eval的奇特之处">10.1 exec与eval的奇特之处</h3>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span> <span class="comment">#运行抛异常</span></div><div class="line">    a = <span class="number">123</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">    ¦   exec(<span class="string">"print(a)"</span>)</div><div class="line">    g()</div><div class="line">    </div><div class="line">f()</div></pre></td></tr></table></figure>
<p>然而：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span> <span class="comment">#运行正常</span></div><div class="line">    a = <span class="number">123</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">()</span>:</span></div><div class="line">    ¦   exec(<span class="string">"print(a)"</span>)</div><div class="line">    ¦   print(a)</div><div class="line">    g()</div><div class="line">    </div><div class="line">f()</div></pre></td></tr></table></figure>
<h3 id="10-2-注意区分list-comprehension与generator">10.2 <mark>注意区分list comprehension与generator！</mark></h3>
<ul>
<li>list comprehension是当时计算的</li>
<li>而<code>list(a+i for i in range(10))</code>中，里面属于generator</li>
</ul>
<h2 id="11-super-and-mro">11. super and MRO</h2>
<p>MRO: Method Resolution Order. For more details see this great introdcution: <a href="https://segmentfault.com/a/1190000007426467" target="_blank" rel="external">Python: 你不知道的 super</a></p>
<blockquote>
<p>super 的一个最常见用法可以说是在子类中调用父类的初始化方法了，比如：</p>
</blockquote>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a, b, c)</span>:</span></div><div class="line">        super(A, self).__init__(a, b)  <span class="comment"># Python3 可使用 super().__init__(a, b)</span></div><div class="line">        self.c = c</div></pre></td></tr></table></figure>
<blockquote>
<p>实际上，super(cls, inst) 获得的是 cls 在 inst 的 MRO 列表中的下一个类。</p>
</blockquote>
<h3 id="12-python-interpreter">12. Python Interpreter</h3>
<ul>
<li>CPython<br>
IPython based on CPython, and is enhanced in interactive.</li>
<li>PyPy<br>
Use Jit, and can be different with CPython.</li>
<li>Jython<br>
Compile python to Java bytecode.</li>
<li>IronPython<br>
Compile python to .net bytecode</li>
</ul>
<h2 id="style-guide">Style guide</h2>
<h3 id="argument">argument</h3>
<ul>
<li><code>**kwargs</code> is a bad practice:
<ol>
<li>you don’t know how <code>**kwargs</code> affect.</li>
<li><strong>wrong keywrod arguments is no longer reported by the interpreter.</strong><br>
<code>TypeError 'x' is an invalid keyword argument for this function</code><br>
<a href="http://ivory.idyll.org/blog/on-kwargs.html" target="_blank" rel="external">reference:The Use and Abuse of Keyword Arguments in Python</a></li>
</ol>
</li>
</ul>
<h2 id="for-more">For more:</h2>
<p>[我眼中一个好的Pythoneer应该具备的品质]*(<a href="https://zhuanlan.zhihu.com/p/33266239" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/33266239</a>)<br>
<a href="https://www.gitbook.com/book/eastlakeside/interpy-zh/details" target="_blank" rel="external">Python进阶 - gitbook</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;0-is-与-的区别&quot;&gt;0. is 与 &lt;code&gt;==&lt;/code&gt;的区别&lt;/h2&gt;
&lt;p&gt;python对象有三个要素：id、type、value。is 比较的是id；==比较的是value&lt;br&gt;
而id实际上是内存地址，&lt;code&gt;(ob1 is ob2)&lt;/code&gt; 等价于 &lt;code&gt;(id(ob1) == id(ob2))&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://timchen314.com/categories/python/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>人工智能简介</title>
    <link href="http://timchen314.com/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%AE%80%E4%BB%8B/"/>
    <id>http://timchen314.com/人工智能简介/</id>
    <published>2017-07-28T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="备忘">备忘</h1>
<h2 id="三巨头介绍：geoffrey-hinton-yann-lecun-yoshua-bengio-年级由大到小">三巨头介绍<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：Geoffrey Hinton、Yann LeCun、Yoshua Bengio（年级由大到小）</h2>
<ul>
<li>Hinton 多伦多大学<br>
DBN</li>
<li>LeCun<br>
CNN</li>
<li>Bengio<br>
attention、GAN</li>
</ul>
<h2 id="神经网络简介">神经网络简介</h2>
<p><img src="http://res.cloudinary.com/do7yb5qw4/image/upload/v1500626522/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9E%81%E7%AE%80%E5%88%86%E7%B1%BB_qygbx8.jpg" alt="极简分类"></p>
<a id="more"></a>
<p><img src="http://res.cloudinary.com/do7yb5qw4/image/upload/v1500626520/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9E%81%E7%AE%80%E5%8F%B21_trnlla.jpg" alt="极简史"><br>
<img src="http://res.cloudinary.com/do7yb5qw4/image/upload/v1500626520/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9E%81%E7%AE%80%E5%8F%B22_f7v7jy.jpg" alt="极简史2"></p>
<h2 id="技术特点和技巧的备忘">技术特点和技巧的备忘</h2>
<ul>
<li>单层线性、双层非线性<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>
<blockquote>
<p>隐藏层的参数矩阵的作用就是使得数据的原始坐标空间从线性不可分，转换成了线性可分。</p>
</blockquote>
</li>
<li>层数的影响<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2]</a></sup>
<blockquote>
<p>参数数量一样的情况下，更深的网络往往具有比浅层的网络更好的识别效率。这点也在ImageNet的多次大赛中得到了证实。从2012年起，每年获得ImageNet冠军的深度神经网络的层数逐年增加，2015年最好的方法GoogleNet是一个多达22层的神经网络。在最新一届的ImageNet大赛上，目前拿到最好成绩的MSRA团队的方法使用的更是一个深达152层的网络！关于这个方法更多的信息有兴趣的可以查阅ImageNet网站。</p>
</blockquote>
</li>
<li>BP的缺点<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>
<blockquote>
<p>基于梯度下降的反向传播法很容易在训练网络参数时收敛于局部极小值。此外，反向传播法训练网络参数还存在很多实际问题，比如需要大量的标签样本来训练网络的权值，多隐含层的神经网络权值的训练速度很慢，权值的修正随着反向传播层数的增加逐渐削弱等。<br>
面对采用反向传播法来训练具有多隐含层的深度网络的网络参数时存在的缺陷，一部分研究人员开始探索通过改变感知器的结构来改善网络学习的性能，由此产生了很多著名的单隐含层的浅层学习模型，如SVM、logistic regression、Maximum entropy model和朴素贝叶斯模型等。浅层学习模型能够有效地解决简单或者具有复杂条件限制的问题，但受限于只含一个隐含层，所以浅层学习模型特征构造的能力有限，不能有效处理包含复杂特征的问题。</p>
</blockquote>
</li>
<li>LSTM
<blockquote>
<p>LSTM只能避免RNN的梯度消失（gradient vanishing）；梯度膨胀(gradient explosion)不是个严重的问题，一般靠裁剪后的优化算法即可解决，比如gradient clipping（如果梯度的范数大于某个给定值，将梯度同比收缩）。<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p>
</blockquote>
</li>
</ul>
<h2 id="历史节点">历史节点</h2>
<ul>
<li>1943<br>
W.Pitts &amp; W.McCulloch: Concept of ANN(Artificial Neural Network)<sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3]</a></sup></li>
<li>1949<br>
D. Olding Hebb: math model</li>
<li>1957<br>
F.Rosenblatt: Perceptron</li>
<li>1969<br>
arvin Minsky &amp; Seymour Papert: Perceptron’s inability of XOR &amp; limitation of computing power</li>
<li>1974<br>
Paul Werbos: BP(Back Propagation)</li>
<li>1980<br>
Hinton: MLP(Multi_Layer Perceptron)</li>
<li>1982<br>
John Hopfield: Hopfield Network(pioneer RNN)</li>
<li>1998<br>
LeCun: CNN(Convoluted Neural Network)</li>
<li>2006<br>
Hinton, &lt;<science>&gt; DBN(Deep Belief Networks)</science></li>
<li>2012<sup class="footnote-ref"><a href="#fn2" id="fnref2:2">[2]</a></sup>
<ul>
<li>深度学习技术又在图像识别领域大展拳脚。Hinton与他的学生在ImageNet竞赛中，用多层的卷积神经网络成功地对包含一千类别的一百万张图片进行了训练，取得了分类错误率15%的好成绩，这个成绩比第二名高了近11个百分点，</li>
<li>Jeff Dean &amp; Andrew Ng in GoogleBrain: “the Cat”</li>
</ul>
</li>
</ul>
<h2 id="名词概念">名词概念</h2>
<ul>
<li>
<p>activation function<sup class="footnote-ref"><a href="#fn2" id="fnref2:3">[2]</a></sup><br>
【示意效果】<br>
<img src="http://res.cloudinary.com/do7yb5qw4/image/upload/c_scale,w_0.5/v1500626521/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/activation_function_uykbzx.jpg" alt="activation function"></p>
</li>
<li>
<p>capcity<sup class="footnote-ref"><a href="#fn2" id="fnref2:4">[2]</a></sup><br>
更多的参数意味着其模拟的函数可以更加的复杂，可以有更多的容量（capcity）去拟合真正的关系。</p>
</li>
<li>
<p>curse of dimensionality（维数灾祸）<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></p>
<blockquote>
<p>在机器学习里是指随着样本空间和参数空间维数的增加，潜在参数组合的数量指数型增长，相同精确度的预测会需要多得多的训练样本。当训练样本不变时，预测的精度与空间维数的增加成反比。</p>
</blockquote>
</li>
<li>
<p>DBN(深度信念网络)</p>
</li>
<li>
<p>generalization<sup class="footnote-ref"><a href="#fn2" id="fnref2:5">[2]</a></sup><br>
提升模型在测试集上的预测效果的主题叫做泛化</p>
</li>
<li>
<p>Grid Search（网格搜索：用尝试的方法选择中间层的节点数）<sup class="footnote-ref"><a href="#fn2" id="fnref2:6">[2]</a></sup></p>
</li>
<li>
<p>regularization<sup class="footnote-ref"><a href="#fn2" id="fnref2:7">[2]</a></sup><br>
相关方法被称作正则化。神经网络中常用的泛化技术有权重衰减等。</p>
</li>
<li>
<p>schools of AI(译为学派)<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></p>
<ol>
<li>符号主义(symbolicism)，又称为逻辑主义(logicism)、心理学派(psychologism)或计算机学派(computerism)，其原理主要为物理符号系统(即符号操作系统)假设和有限合理性原理。<strong>认为人工智能源于数理逻辑。</strong></li>
<li>连接主义(connectionism)，又称为仿生学派(bionicsism)或生理学派(physiologism)，其主要原理为神经网络及神经网络间的连接机制与学习算法。<strong>认为人工智能源于仿生学，特别是对人脑模型的研究。</strong></li>
<li>行为主义(actionism)，又称为进化主义(evolutionism)或控制论学派(cyberneticsism)，其原理为控制论及感知-动作型控制系统。<strong>认为人工智能源于控制论。(认为人工智能源于仿生学，特别是对人脑模型的研究。)</strong></li>
</ol>
</li>
<li>
<p>Training Set, Validation Set and Testing Set; Ground Truth</p>
<blockquote>
<p>验证数据用于最小化过拟合(overfitting)。<br>
这数据不调整权重和偏差。在基于训练数据调整权重之后，如果基于训练数据的准确度增加了，而基于验证数据的准确度没有增加或反而下降了，则表明过拟合（overfitting）了，需要立即停止训练。<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></p>
</blockquote>
</li>
</ul>
<p>Ground Truth: 正确标注的数据是Ground Truth， 错误的标记则不是。（也有人将所有标注数据都叫做Ground Truth）<sup class="footnote-ref"><a href="#fn7" id="fnref7:1">[7]</a></sup></p>
<h1 id="nn">NN</h1>
<h2 id="rnn">RNN</h2>
<p><a href="https://zhuanlan.zhihu.com/p/24813287" target="_blank" rel="external">什么是 LSTM RNN</a><br>
<a href="https://www.zhihu.com/search?type=content&amp;q=lstm" target="_blank" rel="external">更多介绍</a></p>
<h2 id="dnn">DNN</h2>
<h2 id="optimization">optimization</h2>
<p>待读<br>
<a href="http://ruder.io/optimizing-gradient-descent/" target="_blank" rel="external">link</a><br>
<a href="http://ycszen.github.io/2016/08/24/SGD%EF%BC%8CAdagrad%EF%BC%8CAdadelta%EF%BC%8CAdam%E7%AD%89%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93%E5%92%8C%E6%AF%94%E8%BE%83/" target="_blank" rel="external">link</a></p>
<h2 id="tips">tips</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/37259515/why-pretraining-for-dnn-is-not-specified-in-keras" target="_blank" rel="external">About Why pretraining for DNN is not specified in keras?</a></li>
</ul>
<h1 id="framework-software">framework &amp; software</h1>
<h2 id="deepchem">Deepchem</h2>
<p>Developed by Vijia Panda &amp; Schrodinger Company. <a href="https://deepchem.io" target="_blank" rel="external">deepcheem</a></p>
<ul>
<li><a href="https://deepchem.io/docs/notebooks/graph_convolutional_networks_for_tox21.html" target="_blank" rel="external">Modeling Small Molecule Toxicity with Graph Convolutions</a> (An Official Example)<br>
刚看完<code>In [2]:</code>部分。</li>
</ul>
<h2 id="deepmd-kit">DeepMD-kit</h2>
<h1 id="技术评论">技术评论</h1>
<h2 id="技术成熟的条件">技术成熟的条件</h2>
<h3 id="andrew-ng">Andrew Ng<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></h3>
<blockquote>
<ul>
<li>一个新科技的出现要掐着时间，不能太早也能太晚。比如说iphone，2007年才是它发布的正确时间，而不是在1993年，因为那时的芯片，电池，屏幕技术还没到位。</li>
</ul>
</blockquote>
<ul>
<li>另外一个极端的例子是达芬奇发明直升机，他发明直升机的时间是1480年代，而飞机引擎技术在1900年代才出现。</li>
<li>还有自动驾驶技术，2007年研究自动驾驶技术还太早，因为AI要用到的传感器还没生产出来。2015年以后，整个自动驾驶的生态系统才算比较完善。</li>
<li>同样在1990年代，网络，视频流还不足以支撑慕课问世，到2011年，整个网络基础建设才为在线视频教育提供了较好的环境。</li>
<li>深度学习也是，90年代数据/计算比较小，浅层算法效果更好。从2007开始，有了大数据做基础，深度学习才取得了更好的效果。</li>
<li>但是，我们还是要感谢历史中所有的革新者，包括早期的那些人，他们的工作对后来的发展进步也非常具有影响和帮助。【现在不叫座，以后可能叫好】</li>
</ul>
<h1 id="deep-learning-花书-笔记">《Deep learning》（花书）笔记</h1>
<h2 id="第二章-线性代数">第二章 线性代数</h2>
<p>总结：<br>
<strong>2.8</strong> SVD、<strong>2.10</strong> trace的性质不熟悉；<strong>2.9</strong> Moore-Penrose很难理解；<strong>2.11</strong> PCA是从“压缩”这个目的，推导出方法，很难；如果从PCA方法出发来看其目的，则很简单，但是花书没有这样做，这对入门的人并不友好。</p>
<ul>
<li>
<p>关于迹</p>
<ul>
<li>迹是特征值的和；</li>
<li>迹是一种线性算子：<br>
tr(A + B) = tr(A) + tr(B)<br>
tr(rA) = r tr(A)</li>
<li>几何上<br>
<a href="https://www.zhihu.com/question/20533117" target="_blank" rel="external">迹的几何意义是什么？ - 傅渥成的回答 - 知乎</a>：</li>
</ul>
<blockquote>
<p>Geometrically, the trace can be interpreted as the infinitesimal change in volume (as the derivative of the determinant), which is made precise in Jacobi’s formula.</p>
</blockquote>
<p>以三维矩阵为例：<br>
$V=aX_1\cdot bX_2 \cdot cX_3$，那么<br>
$$ \sum_{i=1}^{3} \frac{\partial V}{\partial X_i}=a + b + c<br>
$$</p>
</li>
</ul>
<h2 id="第三章-概率与信息论">第三章 概率与信息论</h2>
<h1 id="reference">reference</h1>
<h2 id="历史">历史</h2>
<p><a href="http://www.it610.com/article/5198053.htm" target="_blank" rel="external">a brief history of maching learning(机器学习简史)</a> 【已读】</p>
<h2 id="可读">可读</h2>
<p><a href="http://colah.github.io/posts/2014-03-NN-Manifolds-Topology/" target="_blank" rel="external">colah blog</a><br>
<a href="www.deeplearningbook.org/">book: Deep learning(Ian. Goodfellow)</a><br>
[book: Neural networks and deep learning(Michael Nielsen)]<br>
(<a href="http://www.deeplearningbook.org/" target="_blank" rel="external">www.deeplearningbook.org/</a>)</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://www.zhihu.com/question/37922364" target="_blank" rel="external">Yoshua Bengio为什么能跟Hinton、LeCun相提并论？</a> 包含学术传承与贡献的讨论 <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/23523568" target="_blank" rel="external">历史|从神经元到深度学习</a> 【可再读】 <a href="#fnref2" class="footnote-backref">↩</a> <a href="#fnref2:1" class="footnote-backref">↩</a> <a href="#fnref2:2" class="footnote-backref">↩</a> <a href="#fnref2:3" class="footnote-backref">↩</a> <a href="#fnref2:4" class="footnote-backref">↩</a> <a href="#fnref2:5" class="footnote-backref">↩</a> <a href="#fnref2:6" class="footnote-backref">↩</a> <a href="#fnref2:7" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://www.zhihu.com/question/60148469" target="_blank" rel="external">深度学习技术发展历史及应用现状如何？</a> <a href="#fnref3" class="footnote-backref">↩</a> <a href="#fnref3:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://www.zhihu.com/question/34878706" target="_blank" rel="external">LSTM如何来避免梯度弥散和梯度爆炸？</a> <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="https://www.zhihu.com/question/54139566" target="_blank" rel="external">神经网络的历史？</a> <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
<li id="fn6" class="footnote-item"><p><a href="http://blog.csdn.net/u011531010/article/details/52935348" target="_blank" rel="external">人工智能学派简介</a> <a href="#fnref6" class="footnote-backref">↩</a></p>
</li>
<li id="fn7" class="footnote-item"><p><a href="http://blog.csdn.net/myarrow/article/details/51504328" target="_blank" rel="external">Training Set, Validation Set 和Testing Set之间的差别及关系</a> <a href="#fnref7" class="footnote-backref">↩</a> <a href="#fnref7:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn8" class="footnote-item"><p><a href="https://www.douban.com/note/629481991/" target="_blank" rel="external">【干货|持更】人工智能产业的相关资料及入门指南</a> 【已读】 <a href="#fnref8" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;备忘&quot;&gt;备忘&lt;/h1&gt;
&lt;h2 id=&quot;三巨头介绍：geoffrey-hinton-yann-lecun-yoshua-bengio-年级由大到小&quot;&gt;三巨头介绍&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;：Geoffrey Hinton、Yann LeCun、Yoshua Bengio（年级由大到小）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hinton 多伦多大学&lt;br&gt;
DBN&lt;/li&gt;
&lt;li&gt;LeCun&lt;br&gt;
CNN&lt;/li&gt;
&lt;li&gt;Bengio&lt;br&gt;
attention、GAN&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;神经网络简介&quot;&gt;神经网络简介&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/do7yb5qw4/image/upload/v1500626522/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9E%81%E7%AE%80%E5%88%86%E7%B1%BB_qygbx8.jpg&quot; alt=&quot;极简分类&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="人工智能" scheme="http://timchen314.com/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="人工智能" scheme="http://timchen314.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>shadownsocks备忘</title>
    <link href="http://timchen314.com/shadowsocks%E5%A4%87%E5%BF%98/"/>
    <id>http://timchen314.com/shadowsocks备忘/</id>
    <published>2017-07-26T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备忘">备忘</h2>
<ul>
<li><a href="http://shadowsocks.org/en/index.html" target="_blank" rel="external">官网</a></li>
<li>OS X: 用ShadowsocksX</li>
<li>iOS: Wingy</li>
<li>windows: Shadowsocks-Qt，可以用二维码进行设置</li>
</ul>
<a id="more"></a>
<h2 id="reference">reference</h2>
<p><a href="http://www.jeyzhang.com/how-to-install-and-setup-shadowsocks-client-in-different-os.html" target="_blank" rel="external">各种系统下Shadowsocks客户端的安装与配置</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;备忘&quot;&gt;备忘&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://shadowsocks.org/en/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OS X: 用ShadowsocksX&lt;/li&gt;
&lt;li&gt;iOS: Wingy&lt;/li&gt;
&lt;li&gt;windows: Shadowsocks-Qt，可以用二维码进行设置&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="shadownsocks" scheme="http://timchen314.com/categories/shadownsocks/"/>
    
    
      <category term="shadownsocks" scheme="http://timchen314.com/tags/shadownsocks/"/>
    
  </entry>
  
  <entry>
    <title>Story of Terminal</title>
    <link href="http://timchen314.com/Story_of_Terminal/"/>
    <id>http://timchen314.com/Story_of_Terminal/</id>
    <published>2017-07-26T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结">总结</h1>
<p>从本地到远程sever，经过了多个编码环节。从按下一个键到远程server最终反应，经历的过程：<br>
本地terminal类型和编码 -&gt; linux下terminal类型和编码</p>
<ul>
<li>ctrl+h的编码<br>
<strong>ascii中Backspace的值为010（八进制），而ASCII values can be represented in several equivalent ways.</strong><br>
而ctrl+h的值也为010。<br>
terminal区分不了二者，因此输入以ascii编码，则ctrl+h变为Backspace；而输入不以ascii编码，Backspace也会显示成^H，即ctrl+h</li>
</ul>
<a id="more"></a>
<ul>
<li>F1键<br>
terminal类型的选择也会影响快捷键。<br>
Xshell中，文件–属性–键盘–功能键类型 选择xterm R6，则VIM中可以绑定F1；如果选linux，则不可以</li>
</ul>
<h2 id="问题：">问题：</h2>
<p>为什么BS无法删除，而是想左移动？<br>
为什么在执行程序进行输入时，按下BS显示的是^H?</p>
<h2 id="答案">答案</h2>
<p><a href="https://www.zhihu.com/question/23550774/answer/132576876" target="_blank" rel="external">知乎</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">早在 VT100终端时代，^H（ASCII码 0x08）表示&lt;BS&gt; 而 ^? （ASCII码 0x7f）表示&lt;DEL&gt;。过去 0x7f是留给 DELETE键使用的。而到了 VT220时代，DELETE已经变为 ^[[3~ （ASCII 码 0x1b, 0x5b, 0x33, 0x7e 共4个字节），而 ^? 的 0x7f 换给了我们的&lt;BS&gt;，有些老点版本的终端软件，默认 &lt;BS&gt;还是使用 VT100的 ^H，比如 Xshell 4 Build 0142以前的版本，默认&lt;BS&gt;是发送^H。SecureCRT直到6.x版本还在默认发送 VT100的 ^H。</div></pre></td></tr></table></figure>
<p>Terminal</p>
<ul>
<li><a href="http://www.ibb.net/~anne/keyboard.html" target="_blank" rel="external">VT100</a><br>
<strong>Xterms on the other hand, emulate the vt100 terminal, which didn’t have a [Delete].</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">VT100</div><div class="line">Key            KeySymName       Console characters</div><div class="line">  --------------------------------------------------</div><div class="line">  Ctrl+H   ---&gt;  Control_H  ---&gt;  ASCII  BS (0x08)</div><div class="line">  [&lt;---]   ---&gt;  Backspace  ---&gt;  ASCII DEL (0x7F)</div><div class="line">  --------------------------------------------------</div><div class="line">Xterm&apos;s emulation of VT100</div><div class="line">Key            KeySymName       Console characters</div><div class="line">  --------------------------------------------------</div><div class="line">  Ctrl+H   ---&gt;  Control_H  ---&gt;  ASCII  BS (0x08)</div><div class="line">  [&lt;---]   ---&gt;  Backspace  ---&gt;  ASCII BS (0x08)</div><div class="line">  [Delete] ---&gt;  Delete     ---&gt;  ASCII DEL (0x7F)</div></pre></td></tr></table></figure>
<p>VT series have their own keyboard: <a href="http://www.vt100.net/docs/vt510-rm/chapter8.html" target="_blank" rel="external">http://www.vt100.net/</a></p>
<p><a href="https://en.wikipedia.org/wiki/Computer_terminal" target="_blank" rel="external">wikipedia</a>:</p>
<blockquote>
<p>A personal computer can run** terminal emulator** software that replicates the function of a terminal, sometimes allowing concurrent use of local programs and access to a distant terminal host system.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;
&lt;p&gt;从本地到远程sever，经过了多个编码环节。从按下一个键到远程server最终反应，经历的过程：&lt;br&gt;
本地terminal类型和编码 -&amp;gt; linux下terminal类型和编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctrl+h的编码&lt;br&gt;
&lt;strong&gt;ascii中Backspace的值为010（八进制），而ASCII values can be represented in several equivalent ways.&lt;/strong&gt;&lt;br&gt;
而ctrl+h的值也为010。&lt;br&gt;
terminal区分不了二者，因此输入以ascii编码，则ctrl+h变为Backspace；而输入不以ascii编码，Backspace也会显示成^H，即ctrl+h&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="linux" scheme="http://timchen314.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://timchen314.com/tags/linux/"/>
    
      <category term="编码" scheme="http://timchen314.com/tags/%E7%BC%96%E7%A0%81/"/>
    
      <category term="Terminal" scheme="http://timchen314.com/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>git笔记</title>
    <link href="http://timchen314.com/git/"/>
    <id>http://timchen314.com/git/</id>
    <published>2017-07-26T10:00:00.000Z</published>
    <updated>2018-01-28T03:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git">git</h1>
<h2 id="开始">开始</h2>
<p>非常好的入门:<br>
<img src="http://res.cloudinary.com/do7yb5qw4/image/upload/v1500901433/%E6%9D%82/MgaV9.png" alt="非常好的入门0"><br>
非常好的入门1<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>:</p>
<blockquote>
<ul>
<li>工作区：就是你在电脑里能看到的目录。</li>
<li>暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
</ul>
</blockquote>
<a id="more"></a>
<blockquote>
<ul>
<li>版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>
</ul>
</blockquote>
<p><a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="external">非常好的入门2</a></p>
<ul>
<li>
<p>help<br>
<code>git help &lt;verb&gt;</code></p>
</li>
<li>
<p>init</p>
</li>
<li>
<p>config</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"your name"</span></div><div class="line">git config --global user.email <span class="string">"your email"</span></div><div class="line">git config --global core.editor <span class="string">"vim #set vim as editor</span></div></pre></td></tr></table></figure>
<p>列出设置的config<br>
<code>git config --list</code></p>
</li>
<li>
<p>difftool<br>
没有默认的difftool，如果首次输入命令<code>git difftool</code>，CentOS会自动推荐kompare。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Viewing: &apos;particles/BinReader.cc&apos;</div><div class="line">Launch &apos;kompare&apos; [Y/n]: y</div></pre></td></tr></table></figure>
<p>kompare的效果非常好。</p>
</li>
<li>
<p>completion by bash-completion<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
</li>
</ul>
<h2 id="操作">操作</h2>
<ul>
<li>add filename</li>
<li>commit
<ul>
<li><code>git commit -m &quot;your message&quot;</code></li>
<li>Amending the most recent commit message<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li>
</ul>
<blockquote>
<p><code>git commit --amend</code><br>
<strong>will open your editor</strong>, allowing you to change the commit message of the most recent commit. Additionally, you can set the commit message directly in the command line with:</p>
</blockquote>
<blockquote>
<p><code>git commit --amend -m &quot;New commit message&quot;</code><br>
…however, this can make multi-line commit messages or small corrections more cumbersome to enter.</p>
</blockquote>
<blockquote>
<p>Make sure you don’t have any working copy changes staged before doing this or they will get committed too. (Unstaged changes will not get committed.)</p>
</blockquote>
</li>
</ul>
<ul>
<li>
<p>clone<br>
git clone /path/to/repository<br>
如果是远端服务器上的仓库，你的命令会是这个样子：<br>
<code>git clone username@host:/path/to/repository</code><br>
<code>git clone git@github.com:dunitian/Windows10.git &quot;F:/Work/WP/Windows10&quot; #到指定文件夹</code><br>
<code>git clone -b your_branch your_repo #指定branch</code></p>
</li>
<li>
<p>push<br>
<code>git push origin master:master</code><br>
origin is the remote server; the branch name before the colon is local branch name, and that after the colon is remote branch name. e.g.:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git push origin HEAD:refs/<span class="keyword">for</span>/branch1 <span class="comment"># push HEAD branch to a remote branch   </span></div><div class="line">git push origin :refs/<span class="keyword">for</span>/branch1  <span class="comment"># delete remote branch</span></div></pre></td></tr></table></figure>
</li>
<li>
<p>checkout</p>
<ul>
<li><code>git checkout hexo myfile</code><br>
从hexo分支得到myfile</li>
<li><code>git checkout -b dev #-b参数表示创建并切换</code><br>
<code>git checkout -b dev your_SHA1 # 创建并切换到your_SHA1 commit</code><br>
git checkout master</li>
<li><code>git checkout --track local_branch origin/remote_branch</code><br>
create a local branch based on a remote-tracking branch.
<blockquote>
<p>(In recent versions of git the “–track” option is actually unnecessary since it’s implied when the final parameter is a remote-tracking branch, as in this example.)]<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup><br>
The “–track” option sets up some configuration variables that associate the local branch with the remote-tracking branch. These are useful chiefly for two things:</p>
<ul>
<li>They allow git pull to know what to merge after fetching new remote-tracking branches.</li>
<li>If you do git checkout to a local branch which has been set up in this way, it will give you a helpful message such as:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Your branch and the tracked remote branch &apos;origin/master&apos;</div><div class="line">have diverged, and respectively have 3 and 384 different</div><div class="line">commit(s) each.</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
</li>
<li>
<p>stash<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></p>
<blockquote>
<p>储藏会处理工作目录的脏的状态 - 即，修改的跟踪文件与暂存改动 - 然后将未完成的修改保存到一个栈上，而你可以在任何时候重新应用这些改动。</p>
</blockquote>
<p><code>git stash</code> 临时存储当前状态<br>
<code>git stash list</code><br>
<code>git stash apply (--index)</code> 找回临时存储的状态<br>
<code>git stash drop</code> 删除stash</p>
</li>
<li>
<p>branch</p>
<ul>
<li>git merge dev<br>
合并指定分支到当前分支</li>
<li>git branch -d dev #删除</li>
<li><code>git branch -r/-a</code> # 查看远程/所有分支；<br>
<code>git branch</code> 查看本地分支</li>
<li><code>git checkout mybfranch</code> # shift to another branch</li>
</ul>
</li>
<li>
<p>pull<br>
<code>git pull origin master</code>相当于<code>git fetch origin # fetch to local repo</code>加上<code>git merge origin/master # origin master shall be in local repo</code></p>
</li>
<li>
<p>fetch<br>
<code>git fetch origin hexo</code>从remote repo获取名为hexo的branch</p>
</li>
</ul>
<h2 id="丢弃">丢弃</h2>
<ul>
<li>
<p><code>git rm</code> (then git commit)<br>
<code>git rm --cached file_a 从stage中删除</code><br>
<code>git rm file_a 从stage中删除，同时删除物理文件</code><br>
<code>git mv file_a file_b</code></p>
</li>
<li>
<p><code>git checkout -- file</code> (other functions about checkout is discribed above )<br>
<img src="https://res.cloudinary.com/do7yb5qw4/image/upload/v1515256762/%E6%9D%82/git_reset_and_checkout.jpg" alt="image"><br>
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
<ul>
<li>删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：<br>
<code>git checkout -- test.txt</code></li>
<li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。<br>
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。<br>
要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
</ul>
</li>
<li>
<p>reset<br>
<code>git reset --hard HEAD^</code><br>
<code>git reset --hard 3628164</code></p>
</li>
</ul>
<h2 id="显示状态">显示状态</h2>
<ul>
<li>
<p>status</p>
</li>
<li>
<p>log</p>
<ul>
<li><code>git log --oneline --decorate # 加上--decorate 时，我们可以看到我们的标签</code></li>
<li><code>git log remotename/branchname # get remote commit. e.g., git log origin/hexo</code></li>
</ul>
<blockquote>
<p>Will display the log of a given remote branch in that repository, but only the logs that you have “fetched” from their repository to your personal “copy” of the remote repository.</p>
</blockquote>
</li>
<li>
<p>reflog 查看历史命令<br>
与<code>git log</code>的区别：显示整个本地仓储的commit, 包括所有branch的commit, 甚至包括已经撤销的commit, 只要HEAD发生了变化, 就会在reflog里面看得到。 git log只包括当前分支的commit.</p>
</li>
<li>
<p>remote<br>
看当前配置有哪些远程仓库，可以用命令<br>
<code>git remote</code><br>
执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。</p>
</li>
<li>
<p><code>git ls-files #ls files in present branch</code><br>
<code>git ls-files -u #显示冲突的文件，-s是显示标记为冲突已解决的文件</code></p>
</li>
<li>
<p>diff</p>
<ul>
<li><code>git diff #对比工作区和stage文件的差异</code><br>
<code>git diff --cached</code> 对比stage和branch之间的差异</li>
<li><code>git diff master remotes/origin/hexo #对比本地“master” branch和远程 &quot;remotes/origin/hexo&quot; branch</code></li>
<li><code>git diff origin/hexo #对比当前working tree和远程branch</code></li>
</ul>
</li>
</ul>
<h2 id="rebase">rebase</h2>
<p><a href="http://blog.csdn.net/wangjia55/article/details/8776409" target="_blank" rel="external">git rebase 用法</a><br>
<a href="https://stackoverflow.com/questions/29902967/rebase-in-progress-can-not-commit-how-to-proceed-or-stop-abort" target="_blank" rel="external">stackoverflow</a></p>
<ul>
<li>git rebase --skip</li>
<li>git rebase --continue #use this when you solved conflicts.</li>
<li>git rebase --abort #放弃当前rebase</li>
</ul>
<h2 id="tag">tag</h2>
<p>git push origin --tags</p>
<h2 id="其他概念与原理">其他概念与原理</h2>
<ul>
<li>
<p>conflict<br>
<a href="https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/" target="_blank" rel="external">Resolving a merge conflict using the command line</a></p>
</li>
<li>
<p>remote<br>
remote是一个相对的概念，一个存储在本地其他文件夹的repo也可以是remote<sup class="footnote-ref"><a href="#fn4" id="fnref4:1">[4]</a></sup></p>
<blockquote>
<p>“remotes” are just nicknames for other repositories, synonymous with a URL or <strong>the path of a local directory</strong> – you can set up extra remotes yourself with “git remote”, but “git clone” by default sets up “origin” for you.</p>
</blockquote>
</li>
<li>
<p>origin<br>
It’s a repo! 顾名思义，origin就是一个名字，它是在你clone一个托管在Github上代码库时，git为你默认创建的指向这个远程代码库的标签。<br>
<code>git remote add https://github.com/TimChen314/TimChen314.github.io.git # You can set # set origin by yourself</code></p>
</li>
<li>
<p>(远程仓库名)/(分支名) 这样的形式表示远程分支<br>
Note that when <code>git branch -a</code> is used, there is ‘remote’ in front of branch name, e.g.:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git branch -r   </div><div class="line">  orgin/master   </div><div class="line">$ git branch -a   </div><div class="line">  remote/origin/master</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>local_branch_name:remote_branch_name</code> # 这是push，pull的时候顺序反过来<br>
远程分支和本地分支的名字相同，可以省略远程分支的名字</p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/9257533/what-is-the-difference-between-origin-and-upstream-on-github/9257901#9257901" target="_blank" rel="external">upstream vs. origin</a></p>
<blockquote>
<p>This should be understood in the context of GitHub forks (where you fork a GitHub repo at GitHub before cloning that fork locally)</p>
<ul>
<li>upstream generally refers to the original repo that you have forked<br>
(see also “Definition of “downstream” and “upstream”” for more on upstream term)</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>origin is your fork: your own repo on GitHub, clone of the original repo of GitHub</li>
</ul>
</blockquote>
</li>
<li>
<p>branch &amp; hash<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></p>
<blockquote>
<p>you need to understand that branch and tag names are just pointers to hash values, which represent a single commit<br>
only two types of branches, and they are storaged in<sup class="footnote-ref"><a href="#fn4" id="fnref4:2">[4]</a></sup>:</p>
</blockquote>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.git/refs/heads/ <span class="comment">#[for local branches] **only hash in the file**</span></div><div class="line">.git/refs/remotes/ <span class="comment">#[for tracking branches]</span></div></pre></td></tr></table></figure>
<ul>
<li>Local branches</li>
<li>Remote-tracking branches</li>
</ul>
</li>
<li>
<p>refspec<br>
<code>&lt;source-name&gt;:&lt;destination-name&gt;</code> is a refspec</p>
</li>
</ul>
<h2 id="tips">tips</h2>
<ul>
<li>
<p>git clone下载慢<br>
<code>git config --global http.postBuffer 524288000</code></p>
</li>
<li>
<p>hub<br>
在终端中输入 <code>$ hub browse</code>，它将直接在浏览器中自动地打开 git 仓库的 URL。Boom！</p>
</li>
</ul>
<h3 id="about-github">about github</h3>
<p>[how to bring up an issue?](hoomd Build_NP_reaction.shhoomd Build_NP_reaction.sh)</p>
<h2 id="错误">错误</h2>
<ul>
<li>prompt to input passphrase time and time again:<br>
<a href="https://stackoverflow.com/questions/6106137/git-enter-long-passphrase-for-every-push" target="_blank" rel="external">Git enter long passphrase for every push</a><br>
Note that you can use ssh-key only if you use ssh to build remote connections.<br>
<code>git remote -v</code> should looks like:<br>
<code>origin	git@github.com:TimChen314/MDTackle.git (fetch)</code><br>
but not:<br>
<code>origin	https://github.com/TimChen314/MDTackle.git</code></li>
</ul>
<h1 id="reference">reference</h1>
<h2 id="待读">待读</h2>
<p><a href="http://ndpsoftware.com/git-cheatsheet.html#loc=remote_repo;" target="_blank" rel="external"><strong>超好</strong>: git cheatsheet</a><br>
<a href="http://www.jb51.net/article/55441.htm" target="_blank" rel="external">常用git</a></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://www.runoob.com/git/git-workspace-index-repo.html" target="_blank" rel="external">Git 工作区、暂存区和版本库</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="http://blog.csdn.net/chenbifeng/article/details/51570606" target="_blank" rel="external">git命令自动补全</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits" target="_blank" rel="external">How to modify existing, unpushed commits?</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://longair.net/blog/2009/04/16/git-fetch-and-merge/" target="_blank" rel="external">GIT: FETCH AND MERGE, DON’T PULL</a> <a href="#fnref4" class="footnote-backref">↩</a> <a href="#fnref4:1" class="footnote-backref">↩</a> <a href="#fnref4:2" class="footnote-backref">↩</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86" target="_blank" rel="external">6.3 Git 工具 - 儲藏</a> <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
<li id="fn6" class="footnote-item"><p><a href="https://stackoverflow.com/questions/29862319/whats-the-difference-between-git-reset-hard-master-and-git-reset-hard-or" target="_blank" rel="external">What’s the difference between <code>git reset --hard master</code> and <code>git reset --hard origin/master</code>?</a> <a href="#fnref6" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git&quot;&gt;git&lt;/h1&gt;
&lt;h2 id=&quot;开始&quot;&gt;开始&lt;/h2&gt;
&lt;p&gt;非常好的入门:&lt;br&gt;
&lt;img src=&quot;http://res.cloudinary.com/do7yb5qw4/image/upload/v1500901433/%E6%9D%82/MgaV9.png&quot; alt=&quot;非常好的入门0&quot;&gt;&lt;br&gt;
非常好的入门1&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;工作区：就是你在电脑里能看到的目录。&lt;/li&gt;
&lt;li&gt;暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="git" scheme="http://timchen314.com/categories/git/"/>
    
    
      <category term="git" scheme="http://timchen314.com/tags/git/"/>
    
  </entry>
  
</feed>
