<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TimChen</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://timchen314.com/"/>
  <updated>2019-06-14T07:37:06.000Z</updated>
  <id>http://timchen314.com/</id>
  
  <author>
    <name>Tim Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我们刚刚与一波金融危机擦肩而过</title>
    <link href="http://timchen314.com/baoshang_bank/"/>
    <id>http://timchen314.com/baoshang_bank/</id>
    <published>2019-06-14T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我们刚刚与一波金融危机擦肩而过">我们刚刚与一波金融危机擦肩而过</h1>
<p>来源：北北看剧</p>
<p>这两天光大证券(10.570, -0.23, -2.13%)的PE投资在境外亏55亿的事情刷屏了金融圈。</p>
<p>55亿的事情归纪委管，央行大概只会瞄一眼，他们有一件5500亿，哦不，700000亿的事要先处理一下。</p>
<p>5月24日周五，有一则新闻说“包商银行被接管”，金融圈的一些朋友转了，大部分人都没注意。</p>
<p>但你不知道的是，从那一刻起到现在的十天时间里，我们与一波金融危机擦肩而过。</p>
<a id="more"></a>
<p>没人关注“包商银行”是件很正常的事，就像武侠小说里面的小人物，如果不是被主角打死了可能一辈子都不为人知。</p>
<p>“包商银行”原来叫“包头市商业银行”。包头这个地名大部分人应该都知道，但若问在哪个省的什么位置，恐怕超过一半的网友都要先去搜搜地图。</p>
<p>所以“包头市”的“商业银行”这样一个小地方的名称装不下这家银行的大雄心，就改名叫“包商银行”。它之所以雄心勃勃是因为它背后的实际控制人是资本大鳄——明天集团。</p>
<p>包商银行与明天集团的恩怨情仇以及如何完蛋的略去十万字。</p>
<p>看到一家银行完蛋，似乎最担心的应该是个人储户——其实最不用担心的就是个人储户。包商银行的“遗嘱”（债务处置方案）里第一条就是个人储户的钱，国家全兜！</p>
<p>然后是企业负债，5000万以内的国家也全兜！</p>
<p>看上去似乎没造成什么损害。</p>
<p>人们喜欢用蝴蝶震震翅膀引发暴风雨来形容（原来这个比喻是用来说明数学上的混沌理论的）金融危机，如果这只蝴蝶是因为有人要抓它而震了震翅膀，会不会把那个人震死呢？当然不会，但是引发的暴风雨却可能把千里之外的某些人淹死。</p>
<p>金融危机也一样，危机源头的人可能毫无损失，而卷起的风暴会让其他人损失惨重。</p>
<p>包商银行事件就是蝴蝶震了翅膀，因为银行倒闭从来都不是简单的事。</p>
<p>包商银行2016年的年报（因为它之后两年没公布年报，这是我们能看到的最近的年报）显示，它的总资产是4315亿（据传被接管前的总资产是5500亿），其中存款1936亿，剩下的2000多亿全是向其他金融机构借来的。</p>
<p>金融机构之间借钱可不象我们小散户那样几百几千，都是以亿为单位，国家兜5000万只是个零头。</p>
<p>5月27日，经过一个周末的打探消息，各家借钱给包商银行的金融机构了解到接管组是听央行的，去包头不如进京找央行。</p>
<p>央行的回复是两种方案：要么打折买断，要么按公告，5000万以内全兜，超过部分等清算。</p>
<p>大家回来一算账，两个方案结果差不多，都是亏海了。</p>
<p>当然金融机构肉厚，亏几个亿亏得起。</p>
<p>问题是，只有一个“包商银行”吗？</p>
<p>中国的商业银行是分三六九等的。“工农中建”四大国有银行是第一等；招商、兴业、中信、浦发、光大这些是第二等，被称为“股份制银行”；还有数量巨大的城市商业银行是第三等；广大的农村商业银行、信用社是第四第五等。</p>
<p>梯队之间的界限并不是非常明确。比方说交通银行(6.170, 0.01, 0.16%)，有时候往上归入第一等，有时候往下归入第二等。这两年招商银行(35.350, 0.10, 0.28%)的各项业务指标全面超过了交通银行，对交行排第一等肯定不服气。再比方说上海农村商业银行，从名字上看算第四等，但从规模和质量看绝对能排进第二等。</p>
<p>完蛋的包商银行属于比较正宗的第三等。第三等的城市商业银行数量超过一百家。</p>
<p>教科书上说对交易对手的信用情况要进行如何如何评估，如何如何做尽职调查云云，实际操作中要么不看，要么就只看个脸（名字）。</p>
<p>只看脸是有道理的。</p>
<p>首先，第三方给的评级，花钱买的，你会信吗？</p>
<p>其次，财务报表，也许是真的，但你知道表外资产有多少？你知道五级分类严格不严格？只看一个角，谁知道冰山有多大。</p>
<p>所以大家实际就看个名字，第一等第二等肯定没问题，第三等多半也没事，第四等的稍微当心点，第五等的出了事你自己背别赖到领导头上……</p>
<p>现在第三等的突然暴雷了。</p>
<p>原来不是说多半没事吗，怎么让领导火烧眉毛了？赶紧调整，只能借给第一等第二等，第三等的没领导批准也不能干，第四第五等的想也不要想了。</p>
<p>于是，一夜之间，城商行、农商行的小伙伴们发觉，他们被银行朋友圈拉黑了。</p>
<p>5月20日到5月24日的那一周，银行间同业存单（银行间互相借钱的一种方式）发行量为5249亿，</p>
<p>5月27日降到655亿，</p>
<p>5月28日，去北京的小伙伴们回来了，降到109亿！</p>
<p>市场进一步传言，包商银行的质押回购也还不上来，又引发新一波恐慌（当天晚上，央行的官方媒体《国际金融报》赶紧出来辟谣）。</p>
<p>5月29日，130亿。</p>
<p>5月30日，76亿！</p>
<p>至此，包商银行的单一事件已经有演化为金融危机的苗头！</p>
<p>金融机构借不到钱是件可怕的事。几乎所有的中小金融机构都存在“期限错配”：他们借给企业的钱期限较长，不是想收回就能收回，向别的金融机构借的钱期限较短，到期了只能靠借新还旧先维持着。如果借不到新钱就只有倒闭。</p>
<p>经过多年的快速扩张，城商行+农村金融机构的总资产规模，已经高达70万亿，而中国2018年的GDP为90万亿元。</p>
<p>更进一步说，过去10年城商行+农村金融机构的扩张远比大行更加激进，所以占整个银行体系的比例，从10年前的5%左右，上升到超过25%。</p>
<p>如果说过去10年中国是全世界经济增长的引擎，那城商行+农村金融机构就是中国经济增长的引擎。这个引擎要是熄了火，真正是“地球都要抖三抖”。</p>
<p>这个冲击力够大吧！</p>
<p>6月2日，周末还没过完，央行负责人用答记者问的方式，通过新华社发布了《包商银行被接管是个案 当前金融风险总体可控》的新闻，调子和之前对“赴京请罪”者有了180度转弯。</p>
<p>大体上说，平均能赔到90%，小额全赔，大额也能赔到80%（其中承兑汇票超过5000万元部分明确不会低于80%）。</p>
<p>所有的话都是安抚那些金融机构受伤的心灵。“放心吧，亏不了多少钱”，“最近，市场上有人担心，接管包商银行后，是否会有其他机构也被接管，请大家放心，目前还没有这个打算”。大家不要胡思乱想。</p>
<p>原来准备刮骨疗伤、壮士断腕，现在放点血，意思意思算了。</p>
<p>央行既然表态了，我相信接下来大家会表面上若无其事地继续玩下去。一场金融危机化解于无形。</p>
<p>央行的做法完全正确。如果不及时制止危机，这场风暴恐怕难以收场。</p>
<p>危机化解了，问题并没有解决。</p>
<p>6月1日，锦州银行公告称，审计师安永会计师事务所辞职不干了。这是一家在香港上市的银行，因为出不了2018年的年报已经停牌两个月，现在连审计师都落荒而逃了……锦州银行也是一家城商行，根据其2018年中报，总资产7484亿。</p>
<p>翻开央行的网站，到现在还出不出年报的银行超过一打……</p>
<p>有些人担心金融危机无可避免地要发生，并且引述了1997年东南亚金融危机、1998年墨西哥俄罗斯金融危机、2008年美国次贷危机引发全球金融危机的往事。</p>
<p>从这次事件的处置来看，中国央行是非常清醒的。到处都有蝴蝶震动翅膀，重要的是在酿成暴风雨前斩断传递的链条。</p>
<p>中国和上述这些国家不同，中国央行的手段足够、资源足够、信誉足够。</p>
<p>不发生金融危机是我们金融监管的底线，去杠杆的道路艰难且漫长。</p>
<h1 id="reference">reference</h1>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我们刚刚与一波金融危机擦肩而过&quot;&gt;我们刚刚与一波金融危机擦肩而过&lt;/h1&gt;
&lt;p&gt;来源：北北看剧&lt;/p&gt;
&lt;p&gt;这两天光大证券(10.570, -0.23, -2.13%)的PE投资在境外亏55亿的事情刷屏了金融圈。&lt;/p&gt;
&lt;p&gt;55亿的事情归纪委管，央行大概只会瞄一眼，他们有一件5500亿，哦不，700000亿的事要先处理一下。&lt;/p&gt;
&lt;p&gt;5月24日周五，有一则新闻说“包商银行被接管”，金融圈的一些朋友转了，大部分人都没注意。&lt;/p&gt;
&lt;p&gt;但你不知道的是，从那一刻起到现在的十天时间里，我们与一波金融危机擦肩而过。&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="http://timchen314.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="转载" scheme="http://timchen314.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib</title>
    <link href="http://timchen314.com/matplotlib/"/>
    <id>http://timchen314.com/matplotlib/</id>
    <published>2019-03-08T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.labri.fr/perso/nrougier/teaching/matplotlib/" target="_blank" rel="external">very good tutorial</a><br>
<a href="https://www.cnblogs.com/yinxiangnan-charles/p/5928689.html" target="_blank" rel="external">matplotlib和PIL打开图片的方法</a></p>
<h2 id="command">command</h2>
<ol start="0">
<li>figure</li>
</ol>
<ul>
<li>size <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plt.figure(figsize=(20,10)) # this command shall be at beginning.</div><div class="line">&lt;!-- more --&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Based on ref <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.figure.html" target="_blank" rel="external">matplotlib.pyplot.figure</a>, the default size of a plot is 6.4 and 4.8.<br>
<code>rcParams[&quot;figure.figsize&quot;] = [6.4, 4.8]</code></p>
<ul>
<li>
<p>subplots size<br>
<code>fig, ax1 = plt.subplots(figsize=(20, 10))</code><br>
如果不用上面的命令，而用<code>ax.figure.set_size_inches(50,10)</code>，不好使。</p>
</li>
<li>
<p>other thins<br>
<code>plt.figure(dpi=80, facecolor='w', edgecolor='w')</code></p>
</li>
</ul>
<ol>
<li>
<p>line<br>
<code>plt.plot(X, C, color=&quot;blue&quot;, linewidth=1.0, linestyle=&quot;-&quot;, label=&quot;balala data&quot;, marker='tri', markersize=3,)</code></p>
</li>
<li>
<p>limit (range)<br>
<code>plt.xlim(-4.0,4.0)</code></p>
</li>
<li>
<p>legend<br>
<code>plt.legend(loc='upper left')</code></p>
</li>
<li>
<p>ticks<br>
<code>plt.xticks(np.linspace(-4,4,9,endpoint=True))</code></p>
</li>
<li>
<p>label of axis<br>
<code>plt.xlabel(&quot;This is X axis&quot;)</code></p>
</li>
<li>
<p>point style<br>
For style of point, see <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> and <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
</li>
<li>
<p>save/load</p>
<ul>
<li>save<br>
<code>plt.savefig(&quot;name.png&quot;)</code> Note that <code>plt.show()</code> will clean the content, so <code>savefig</code> should be in front</li>
<li>load</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">img = mpimg.imread(<span class="string">"3732video_star_distri.png"</span>)</div><div class="line">plt.imshow(img)</div></pre></td></tr></table></figure>
</li>
<li>
<p>histogram<br>
<code>plt.hist(mydict.values(), bins=10)</code></p>
</li>
<li>
<p>add additional ticks</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">lines = plt.plot(x,y)</div><div class="line"></div><div class="line">ax = lines[<span class="number">0</span>].axes</div><div class="line">lim = ax.get_ylim()</div><div class="line">ax.set_yticks(list(ax.get_yticks()) + extraticks_list)</div><div class="line">ax.set_ylim(lim)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>ref: <a href="https://stackoverflow.com/questions/14716660/adding-extra-axis-ticks-using-matplotlib" target="_blank" rel="external">adding extra axis ticks using matplotlib</a></p>
<ol start="10">
<li>
<p>arrow<br>
<code>plt.arrow(datetime(2018,4,21), 1.268, 30, 0, linestyle=(0,(5,10)))</code><br>
注意：是(x,y,dx,dy)，第三个和第四个参数是箭头的长度；这里30被当做30天；(offset,(onoffseq))格式的参考可见：<a href="https://matplotlib.org/examples/lines_bars_and_markers/linestyles.html" target="_blank" rel="external">linestyle</a></p>
</li>
<li>
<p>add x2 axis<br>
<code>ax2 = ax1.twinx()</code><br>
ref: <a href="https://matplotlib.org/examples/api/two_scales.html" target="_blank" rel="external">example code</a></p>
</li>
</ol>
<hr>
<h2 id="concept">concept</h2>
<ul>
<li>axes<br>
Figure &gt; axes<br>
ref: <a href="https://stackoverflow.com/questions/5575451/difference-between-axes-and-axis-in-matplotlib" target="_blank" rel="external">What is ‘axes’(NOTE: not ‘axis’)</a></li>
<li>plot vs. subplot vs. figure.add_subplot()<br>
ref: <a href="https://stackoverflow.com/questions/37970424/what-is-the-difference-between-drawing-plots-using-plot-axes-or-figure-in-matpl" target="_blank" rel="external">What is the difference between drawing plots using plot, axes or figure in matplotlib?</a></li>
</ul>
<h2 id="global-setting">global setting</h2>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mpl.rcParams[&apos;xtick.labelsize&apos;] = 24</div><div class="line">mpl.rcParams[&apos;ytick.labelsize&apos;] = 24</div></pre></td></tr></table></figure>
<ul>
<li>font <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">font = &#123;<span class="string">'family'</span> : <span class="string">'normal'</span>,</div><div class="line">        <span class="string">'weight'</span> : <span class="string">'bold'</span>,</div><div class="line">        <span class="string">'size'</span>   : <span class="number">22</span>&#125;</div><div class="line"></div><div class="line">matplotlib.rc(<span class="string">'font'</span>, **font)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ref">ref:</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html" target="_blank" rel="external">matplotlib.pyplot.plo</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://matplotlib.org/examples/lines_bars_and_markers/marker_reference.html" target="_blank" rel="external">marker example</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.labri.fr/perso/nrougier/teaching/matplotlib/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;very good tutorial&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;htt
    
    </summary>
    
      <category term="python" scheme="http://timchen314.com/categories/python/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ethereum &amp; web3.py</title>
    <link href="http://timchen314.com/ethereum/"/>
    <id>http://timchen314.com/ethereum/</id>
    <published>2019-02-28T11:11:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="web3-py"><a href="http://Web3.py" target="_blank" rel="external">Web3.py</a></h1>
<ul>
<li>gasPrice from mainnet<br>
<code>gasPrice=w3.eth.gasPrice</code></li>
</ul>
<h1 id="etherscan">etherscan</h1>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">url=<span class="string">"http://api.etherscan.io/api?module=account&amp;action=txlist&amp;address="</span> + address + \</div><div class="line">    <span class="string">"&amp;startblock=0&amp;endblock=99999999&amp;page=1&amp;offset=2&amp;sort=asc&amp;apikey="</span> &lt;!-- FGYXPUXVQV4Z992UJFP11U5SV3UJVYSFQQ<span class="string">" --&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>desc/asc<br>
<code>sort=desc</code> means get the earliest first; <code>sort=asc</code> verse vise.</li>
<li>page/offset<br>
page and offset shall use cooperatively.<br>
offset means how many items in a page!</li>
</ul>
<h1 id="reference">reference</h1>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;web3-py&quot;&gt;&lt;a href=&quot;http://Web3.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web3.py&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;gasPrice from mainnet&lt;b
    
    </summary>
    
      <category term="python, ethereum" scheme="http://timchen314.com/categories/python-ethereum/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
      <category term="ethereum" scheme="http://timchen314.com/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>block chain妙用</title>
    <link href="http://timchen314.com/blockchain_magic/"/>
    <id>http://timchen314.com/blockchain_magic/</id>
    <published>2018-04-24T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是历史性的一个事件：<br>
在遭遇了半夜一点被叫起来强制删帖之后，北大学生将沈X阳事件中自己的遭遇写入了以太坊&quot;input data&quot;中，这意味着这一文件永远无法被删除了!<br>
<a href="https://etherscan.io/tx/0x2d6a7b0f6adeff38423d4c62cd8b6ccb708ddad85da5d3d06756ad4d8a04a6a2?from=timeline&amp;isappinstalled=0" target="_blank" rel="external">Etherscan</a><br>
点击&quot;Convert to ACSII&quot;，就可以看到内容。</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是历史性的一个事件：&lt;br&gt;
在遭遇了半夜一点被叫起来强制删帖之后，北大学生将沈X阳事件中自己的遭遇写入了以太坊&amp;quot;input data&amp;quot;中，这意味着这一文件永远无法被删除了!&lt;br&gt;
&lt;a href=&quot;https://etherscan.io/tx/0x2d6a7b0f6adeff38423d4c62cd8b6ccb708ddad85da5d3d06756ad4d8a04a6a2?from=timeline&amp;amp;isappinstalled=0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Etherscan&lt;/a&gt;&lt;br&gt;
点击&amp;quot;Convert to ACSII&amp;quot;，就可以看到内容。&lt;/p&gt;
    
    </summary>
    
      <category term="block chain" scheme="http://timchen314.com/categories/block-chain/"/>
    
    
      <category term="block chain" scheme="http://timchen314.com/tags/block-chain/"/>
    
  </entry>
  
  <entry>
    <title>python cookbook note</title>
    <link href="http://timchen314.com/python_cookbook_note/"/>
    <id>http://timchen314.com/python_cookbook_note/</id>
    <published>2018-04-18T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>python cookbook 非常好！</p>
<a id="more"></a>
<h1 id="第一章：数据结构和算法">第一章：数据结构和算法</h1>
<h2 id="1-1-解压序列赋值给多个变量">1.1 解压序列赋值给多个变量</h2>
<p>例子：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = [ <span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">91.1</span>, (<span class="number">2012</span>, <span class="number">12</span>, <span class="number">21</span>), <span class="number">98</span> ]</div><div class="line">_, _, weight, (year, month, day), _ = data</div></pre></td></tr></table></figure>
<p>学到：tuple可以解压；可以多层解压；不想要的变量用<code>_</code>接受；</p>
<h2 id="1-2-解压可迭代对象赋值给多个变量">1.2 解压可迭代对象赋值给多个变量</h2>
<p>可用来分割字符串以及其他多种用途；可以抛弃（用<code>_</code>或<code>ign</code>）/接受任意多个元素；<code>*</code>表达式解压出来的数据，无论是0个还是n个，type都是list。</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">line = <span class="string">'nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false'</span></div><div class="line">uname, *_, homedir, sh = line.split(<span class="string">':'</span>)</div></pre></td></tr></table></figure>
<p>还能用这种分割语法去巧妙的实现递归算法：<br>
def sum(items):<br>
head, *tail = items<br>
return head + sum(tail) if tail else head</p>
<h2 id="1-3-保留最后-n-个元素">1.3 保留最后 N 个元素</h2>
<p>学到了<code>deque(maxlen)</code>和<code>for line in file_f:</code></p>
<h2 id="1-4-查找最大或最小的-n-个元素">1.4 查找最大或最小的 N 个元素</h2>
<p>learn headq module (For details see <a href="http://timchen314.com/python_notes/">python note</a> )</p>
<blockquote>
<p>当要查找的元素个数相对比较小的时候，函数 nlargest() 和 nsmallest() 是很合适的。 如果你仅仅想查找唯一的最小或最大（N=1）的元素的话，那么使用 min() 和 max() 函数会更快些。 类似的，如果 N 的大小和集合大小接近的时候，通常先排序这个集合然后再使用切片操作会更快点 （ sorted(items)[:N] 或者是 sorted(items)[-N:] ）。 需要在正确场合使用函数 nlargest() 和 nsmallest() 才能发挥它们的优势 （如果 N 快接近集合大小了，那么使用排序操作会更好些）。</p>
</blockquote>
<h1 id="第二章：字符串和文本">第二章：字符串和文本</h1>
<h2 id="2-1-使用多个界定符分割字符串">2.1 使用多个界定符分割字符串</h2>
<h1 id="第四章：迭代器与生成器">第四章：迭代器与生成器</h1>
<h2 id="4-3-使用生成器创建新的迭代模式">4.3 使用生成器创建新的迭代模式</h2>
<p>例子：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">frange</span><span class="params">(start, stop, increment)</span>:</span></div><div class="line">    x = start</div><div class="line">    <span class="keyword">while</span> x &lt; stop:</div><div class="line">        <span class="keyword">yield</span> x</div><div class="line">        x += increment</div><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> frange(<span class="number">0</span>, <span class="number">4</span>, <span class="number">0.5</span>):</div><div class="line">	print(n)</div><div class="line">list(frange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.125</span>))</div></pre></td></tr></table></figure>
<p>for和list()都是调用了frange的next。</p>
<h1 id="第九章：元编程">第九章：元编程</h1>
<h2 id="9-1-在函数上添加包装器">9.1 在函数上添加包装器</h2>
<h2 id="9-2-创建装饰器时保留函数元信息">9.2 创建装饰器时保留函数元信息</h2>
<h2 id="9-3-在函数上添加包装器">9.3 在函数上添加包装器</h2>
<h1 id="reference">reference</h1>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python cookbook 非常好！&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Digital Currency Market</title>
    <link href="http://timchen314.com/btc_market/"/>
    <id>http://timchen314.com/btc_market/</id>
    <published>2018-04-17T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="市场">市场</h3>
<ul>
<li>2018.01.08 Total Market Capitalization is up to 820 billion dollars, which is roughly equivalent to one year GDP of Turkey.</li>
<li>Info source
<ul>
<li><a href="https://data.bitcoinity.org/markets/volume/6m?c=e&amp;r=day&amp;t=b" target="_blank" rel="external">bitcoinity</a>有相对可靠地成交量的数据</li>
</ul>
</li>
</ul>
<h4 id="现货交易所">现货交易所</h4>
<ul>
<li>靠谱交易所：</li>
</ul>
<a id="more"></a>
<ul>
<li>
<p>币安Binance<br>
<a href="https://zhuanlan.zhihu.com/p/32890420" target="_blank" rel="external">从零开始的比特币购买与储存图文教程</a><br>
费用：充值免费；提现：0.0005 BTC ≈ 3到5$；交易: 0.1%</p>
</li>
<li>
<p>huobi，一般用手机号登录，不像其他网站用邮箱<br>
[x] 杠杆</p>
</li>
<li>
<p>otcbtc<br>
<a href="https://zhuanlan.zhihu.com/p/32758860" target="_blank" rel="external">如何购买 Cardano(ADA) 或其它加密币？</a></p>
</li>
<li>
<p><a href="http://xn--localbitcoins-vv2u921hvhgs65bqno.com" target="_blank" rel="external">场外交易所localbitcoins.com</a> <strong>全球最大</strong><br>
<a href="https://www.bilibili.com/video/av14653153/?from=search&amp;seid=7472298098998538778" target="_blank" rel="external">用法</a></p>
</li>
</ul>
<ul>
<li>
<p>btc交易份额：<br>
<a href="https://coinmarketcap.com/currencies/bitcoin/#markets" target="_blank" rel="external">https://coinmarketcap.com/currencies/bitcoin/#markets</a><br>
可以注册火币  币安或者OKcoin  先用法币购买usdt  然后就可以购买比特币或者其他的了</p>
</li>
<li>
<p>不靠谱/不方便</p>
<ul>
<li>OKEx<br>
份额世界最大 国内团队 <strong>交易量造假</strong></li>
<li>bitstamp 注册于卢森堡</li>
<li>gdad 美国加州 属于Coinbase公司</li>
<li>bitfinex 香港</li>
<li><a href="http://xn--coincola-570m522evvenm7av7k.com" target="_blank" rel="external">场外交易所coincola.com</a> <strong>骗子交易所</strong></li>
</ul>
</li>
<li>
<p>火币huobi</p>
<ul>
<li>溢价(时间为02.08 16:30)</li>
</ul>
<table>
<thead>
<tr>
<th>品种</th>
<th>实价￥</th>
<th>估价￥</th>
<th>溢价比率(%)</th>
</tr>
</thead>
<tbody>
<tr>
<td>BTC</td>
<td>53800</td>
<td>52430</td>
<td>2.6</td>
</tr>
<tr>
<td>ETH</td>
<td>5388</td>
<td>5244</td>
<td>2.7</td>
</tr>
<tr>
<td>USTD</td>
<td>6.44</td>
<td>6.31</td>
<td>2.0</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>费率<br>
ETH/USTD 0.2%<br>
ETH提币 0.01ETH<br>
btc提币 0.001btc（这是btc网络交易费）<br>
ustd提币 10ustd<br>
总结：提币费用总在10美元左右</p>
</li>
<li>
<p>app</p>
<ul>
<li><s>需要香港的apple ID；<br>
申请而香港apple ID需要通过电话或银行卡绑定才能使用，而异地申请香港银行卡非常麻烦。</s><br>
<a href="http://www.sohu.com/a/166464312_481438" target="_blank" rel="external">如何办理香港银行卡？2017最新收藏版！</a><br>
<a href="http://www.sohu.com/a/164265016_679976" target="_blank" rel="external">聊聊怎么低成本在香港开户一张银行卡</a><br>
<a href="http://www.icbcasia.com/ICBC/%E6%B5%B7%E5%A4%96%E5%88%86%E8%A1%8C/%E5%B7%A5%E9%93%B6%E4%BA%9A%E6%B4%B2/TC/%E5%80%8B%E4%BA%BA%E9%87%91%E8%9E%8D/%E4%BA%BA%E6%B0%91%E5%B9%A3%E5%8F%8A%E8%B7%A8%E5%A2%83%E7%90%86%E8%B2%A1/%E5%85%A7%E5%9C%B0%E5%AE%A2%E6%88%B6%E6%9C%8D%E5%8B%99%E5%B0%88%E5%8D%80/scm_aow.htm" target="_blank" rel="external">工銀亞洲內地客戶見證開戶服務介紹</a></li>
<li>购买需要香港的apple ID<br>
首先，美国的不行，美国apple ID还要绑定美国的信用卡；<br>
第二，香港apple ID只在app store登录，只要不等度iCloud，就绝不会影响账号安全！<br>
第三，app分用人民币交易的场外app和用数字货币交易的币币app，apple ID只能下载到币币app<br>
第四，场外app，要首先登录huobi官网，扫描二维码进行下载，再对app授信，才能使用。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>otcbtc<br>
2018-04-26记录</p>
<table>
<thead>
<tr>
<th>品种</th>
<th>提币费</th>
<th>提币费￥</th>
</tr>
</thead>
<tbody>
<tr>
<td>BTC</td>
<td>0.001</td>
<td>57</td>
</tr>
<tr>
<td>ETH</td>
<td>0.003</td>
<td>12</td>
</tr>
<tr>
<td>BCH</td>
<td>0.001</td>
<td>8.5</td>
</tr>
<tr>
<td>LTC</td>
<td>0.01</td>
<td>9</td>
</tr>
<tr>
<td>XRP</td>
<td>0.02</td>
<td>1</td>
</tr>
<tr>
<td>ADA</td>
<td>0.5</td>
<td>1.75</td>
</tr>
<tr>
<td>USTD</td>
<td>5</td>
<td>31.5</td>
</tr>
</tbody>
</table>
<p>另外，otcbtc的点差非常大！2018-04-26的XRP，买5.20卖5.0，点差达到4%！火币不存在这个问题！<br>
火币的点差一般为千二左右。</p>
</li>
<li>
<p>其他分类</p>
<ul>
<li>ADA<br>
<a href="https://www.cardano.org/zh/buy-sell-ada-3/" target="_blank" rel="external">ADA官网：可以购买ADA的交易所</a><br>
现货杠杆：<br>
bitfinex 有杠杆没现货<br>
<a href="http://www.bitcointradingsites.net/features/leverage/" target="_blank" rel="external">杠杆现货交易所</a></li>
</ul>
</li>
</ul>
<h4 id="场外交易">场外交易</h4>
<ul>
<li>huobi<br>
网站：<a href="http://otc.huobi.pro" target="_blank" rel="external">otc.huobi.pro</a><br>
成为中间商的要求：
<ul>
<li>申请表</li>
<li>手持身份证录制视频</li>
<li>押金5000HT<br>
4月24日值7万多人民币。</li>
</ul>
</li>
<li>otcbtc
<ul>
<li>场外交易没有api。</li>
<li>费用<br>
2018-6-29 23:59前广告免费；手续费： 成交额的 0.5 %</li>
</ul>
</li>
<li>localcoins</li>
</ul>
<h4 id="期货">期货</h4>
<h5 id="bitmex交易指南">bitmex交易指南</h5>
<ul>
<li>
<p>大幅下跌时会无法下单，例如<br>
18/03/12 22:15–15分钟，成交量5M，9706-&gt;9363</p>
</li>
<li>
<p>三种价格</p>
<ul>
<li>最新成交价<br>
网站上彩色大字的是最新成交价。instrument中key为&quot;lastPrice&quot;</li>
<li>价格指数<br>
现货交易所30分钟的平均价格。<br>
altcoin中除了ADA是参考bittrex，剩下的都参考Poloniex。<br>
只用于交割。instrument中key为&quot;indicativeSettlePrice&quot;。</li>
<li>标记价格<br>
强平会参考这个价格，而不是最新成交价。<br>
instrument中key为&quot;fairPrice&quot;。</li>
</ul>
</li>
<li>
<p>合约参考价格<br>
BMX指数是由bitstamp和gdad各贡献50%得到的；合约参考价格是基于BMX修正得到的“合理标记价格”。<br>
因为参考价格经过了修正，所以永续合约和季度合约的“标记价格”才不同。</p>
</li>
</ul>
<ul>
<li>
<p>费用</p>
<ul>
<li>maker &amp; taker<br>
maker是限价交易单，提供流动性，有0.25%的返点；<br>
taker是市价交易单，抽取流动性，交易费0.75%。<br>
该费用在永续合约与定期合约中都存在。</li>
<li>资金费用funding rate<br>
只在永续合约中存在；每天三次收取，分别在北京时间（4:00, 12:00, 20:00）；多空双方相互支付，比如，如果多单数量比较大，多单向空方支付</li>
<li>定期合约交割<br>
<strong>没有找到交割的定义，我猜测，所谓交割就是平仓。</strong> XBT交割费为0.05%，其他币为0.25%（记录于18/03/19）。</li>
<li>存款/提款 无费用</li>
</ul>
</li>
<li>
<p>仓位 &amp; 保证金</p>
<ol start="0">
<li>空仓时，可以以任意价格进行委托；有仓位时，委托价位不能超过爆仓价</li>
<li>逐仓 全仓<br>
跨期保证金<br>
默认情况下所有仓位的最初设置都为 “全仓保证金”。<br>
调整杠杆是整个仓位的杠杆！比如你有5x底仓，然后你想20倍加仓，那你最后的杠杆就是20x。</li>
<li>自动减仓机制<br>
平台会挑选杠杆高、盈利大的仓位，自动减仓，这是为了平掉对手仓，保证平台的流动性。</li>
<li><a href="https://www.bitmex.com/app/riskLimits" target="_blank" rel="external">风险限额</a>：<br>
仓位超过50XBT，会需要额外的保证金，仓位越大，额外保证金越多。</li>
<li>限价止损(Stop Limit) &amp; 限价止盈(Take Profit Limit)<br>
写在前面：触发价格默认是参考最新成交价格的，你也可以设置成标记价格或指数价格；如果在“触发后平仓”选项上打钩，那么系统只会减仓不会加仓，由于它们的行为很绕，这样可以防止失误。<br>
首先要注意，在没有达到触发价格之前，是不需要下单保证金的。<br>
其次，这个翻译好像有点问题，Stop Limit和Take Profit Limit并不是意在止损和止盈，它们的行为如下：<br>
限价止损(Stop Limit)，触发价格高于参考价格，只允许买入/做多；触发价格低于参考价格，只允许卖出/做空。<strong>这一行为与你持有多仓还是空仓并没有关系！</strong>。限价止盈(Take Profit Limit)刚好相反，触发价格高于参考价格，只允许卖出/做空；触发价格低于参考价格，只允许买入/做多。<br>
如何记忆：<br>
对于限价止损(Stop Limit)，为了方便，可以理解成系统是假设你开空的，如果你开了空仓要止损，才会触发价格高于参考价格时买入。</li>
</ol>
</li>
</ul>
<ul>
<li>其他
<ul>
<li>提币时间为每天UTC 13：00前（北京时间21：00）；</li>
<li>btc盈亏<br>
btc盈亏$ = (1$/open - 1$/close )*close = close/open = btc/$ 涨跌<br>
例如开1万$多仓，按照美元计价，那么btc价格上涨10%，收益就是1000$；下跌10%，收益是-1000$</li>
<li><a href="https://datamish.com/dashboard/db/btcusd?refresh=10s&amp;orgId=1&amp;from=1521070753057&amp;to=1523707776033" target="_blank" rel="external">Datamish: collecting dada from bitmex</a> Super useful!</li>
</ul>
</li>
</ul>
<h5 id="期权">期权</h5>
<p>只有一个strike price（执行价格），初始价格为现价（最小单位50，比如现价10020，strike price是10000）+1000$。<br>
结算日是每周五的 UTC 12:00:00。</p>
<h5 id="问题">问题</h5>
<ul>
<li>
<p>&quot;account has insufficient available balance&quot;<br>
状态： 已开空单，20x<br>
现象： 无法开10x多单<br>
答：杠杆是整个仓位的杠杆，而不是一笔交易的杠杆。由于仓位中可用余额有限，而持仓的合约很多，杠杆只能保持在很高的水平。</p>
</li>
<li>
<p>429<br>
&quot;你发出太多的请求。请稍候，然后重试。&quot;</p>
</li>
</ul>
<h5 id="bitmex自动交易">bitmex自动交易</h5>
<ul>
<li>
<p>错误</p>
<ul>
<li>无法连接服务器（没有翻墙也会导致这个问题）</li>
</ul>
 <figure class="highlight plain"><figcaption><span>22:01:47,646 - INFO - ws_thread - Started thread</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2018-03-23 22:01:52,666 - ERROR - ws_thread - Couldn&apos;t connect to WS! Exiting.</div></pre></td></tr></table></figure>
<ul>
<li>api_key错误</li>
</ul>
 <figure class="highlight plain"><figcaption><span>21:19:20,598 - INFO - ws_thread - Started thread</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2018-03-23 21:19:22,799 - ERROR - ws_thread - Handshake status 401 Unauthorized</div></pre></td></tr></table></figure>
<ul>
<li>Errno 61<br>
<code>2018-03-29 20:27:00,382 - ERROR - ws_thread - [Errno 61] Connection refused</code><br>
原因未知。</li>
</ul>
</li>
<li>
<p>获取历史数据<br>
18年之前的index、quote、trade已经获得；<br>
instrument和instrument/indices只能获取当前数据；<br>
quote不好使；</p>
</li>
</ul>
<h5 id="期货基础">期货基础</h5>
<ul>
<li>
<p>BRR()和BRTI（Bitcoin Real Time Index）是CME推出的标准化btc价格指数。</p>
</li>
<li>
<p>交易所期货：bitfinex、bitmex、okex</p>
</li>
<li>
<p>Market Order , Limit , Stop, Stop Limit<br>
市价、限价、止损/盈、限价止损/盈。Stop采用的是市价。<br>
限价会保证 成交价格，价格达不到就不成交；市价是保证成交，价格达不到就涨/降价格。</p>
</li>
</ul>
<ul>
<li>
<p>已实现亏盈和未实现亏盈<br>
比如bitmex开仓100手，那只有未实现盈亏；如果这100手平掉40手，还剩60手，那么平掉的40手就会产生未实现盈亏。</p>
</li>
<li>
<p>期货定价机制(bitmex)<br>
比特币以太坊期货等还有个名字叫做“虚拟合约”，本质可以理解为“炒空气”，期货的本质是多空互相博弈，买入来自于平空&amp;开多，卖出来自于开空&amp;平多，交易的平衡最终决定了当前成交价。但是这个价格总会和实币交易有偏差。</p>
</li>
</ul>
<p>Please note that the execution price you see is your bankruptcy price, not your liquidation price. Your liquidation price includes the maintenance margin requirement of 0.5% over 17024, which is 16935.</p>
<p>强制平仓损失=未实现亏+仓位占用的保证金。计算强平价格时候，要把持仓保证金算进去！！！</p>
<h5 id="tips">TIPS:</h5>
<ul>
<li><a href="https://www.zhihu.com/question/68686398/answer/333151303" target="_blank" rel="external">btc期货没有点差</a><br>
点差–spread</li>
<li>下载大陆用不了的app
<ul>
<li>taobao香港的AppleID就可以。<br>
买来之后只用AppleID登陆app store，而不登录iCloud，就是安全的</li>
<li>美国AppleID不行，还需要绑定美国的信用卡或paypal。注意必须用美国的户头绑定到paypal才有用。</li>
</ul>
</li>
<li>mac上，shadowsocks在命令行下士无效的。想要在命令行下shadowsocks，请参考<br>
<a href="http://www.cashqian.net/blog/001486989831982332565298e4942a2bb8f56b08f9d2475000" target="_blank" rel="external">Mac命令行终端下使用shadowsocks翻墙</a>。<br>
最终测试可以用<code>curl www.google.com</code>（注意www不能少），成功的话会返回一堆html。</li>
<li>api-connecter中时间单位是秒（例如<code>TIMEOUT = 2</code>）</li>
</ul>
<h5 id="策略">策略</h5>
<ol start="0">
<li>掉期</li>
<li>hedge</li>
<li>顺势</li>
<li><s>发动趋势</s></li>
<li>凯利公式化<br>
少量仓位一百倍杠杆，按照凯利公式的假设，要么翻倍要么赔光</li>
<li>小市值、非空气策略<br>
BNB(17)、LOOM?(67)(New)、HT(66)、ELF?(62)(weak)、NAS?(Nebulas)(56)(weak)、AE(28)、Ont(25)(New)、ADA(7)</li>
</ol>
<h5 id="交易系统研究">交易系统研究</h5>
<h6 id="boll-布林线">BOLL（布林线）</h6>
<ul>
<li>计算
<blockquote>
<p>（1）计算MA<br>
MA=N日内的收盘价之和÷N<br>
（2）计算标准差MD<br>
MD=平方根N日的（C－MA）的两次方之和除以N<br>
（3）计算MB、UP、DN线<br>
MB=（N－1）日的MA<br>
UP=MB＋2×MD<br>
DN=MB－2×MD</p>
</blockquote>
</li>
<li>信号
<ul>
<li>对于BTC日线，默认参数(20, 2)似乎确实是最有效的。<br>
20指的是平均的天数；2指的是两倍标准差；后面结论都建立在本条基础之上。<br>
如果阐述设为其他值，比如(99, 2)，那么中线和标准差都有99天的价格计算得到的，那么它对近期的价格变化非常非常不敏感！</li>
<li>超出上轨/下轨不是一点的，都会回调。</li>
<li>收窄意味着转折可能要发生。</li>
</ul>
</li>
</ul>
<h5 id="支持信息">支持信息</h5>
<p><a href="http://www.dce.com.cn/dalianshangpin/sspz/cjzx/5503775/index.html" target="_blank" rel="external">交易额比较大的期货品种</a></p>
<h3 id="金融信息">金融信息</h3>
<h4 id="宏观">宏观</h4>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/35262569" target="_blank" rel="external">比特币价格：与标准普尔 500 指数相关性创新高</a><br>
背景介绍与这对我们意味着什么？：<br>
首先，金融资产的风险，是由市场来决定的，市场承认它风险低，它才是风险低。在金融市场上，可以将金融资产按风险分类，例如，美国国债是最低风险资产，美股股指是中风险资产，美股高科技公司、新兴市场（印度巴西中国）股指是高风险资产。<br>
当市场认为现在市场整体的风险上升时，资本会向更低风险的资产流动，高风险资产贬值、低风险资产升值。例如，如果经济学家对全球经济增长不看好，那么新兴市场股指就会下跌。<br>
反过来看，要想知道一种资产的风险程度，可以看它与哪种资产的相关性高。**BTC价格与标普500相关性创新高，意味着BTC的风险在降低！**这对BTC是好消息，但对我们是坏消息。因为风险越低的资产，投资者越多，我们获得超额收益的机会就越小……</li>
</ul>
<h4 id="金融类文章">金融类文章</h4>
<p>bitmex创始人兼CEO写的文章<br>
<a href="https://blog.bitmex.com/basic-basis-trading-strategies/" target="_blank" rel="external">Basic Basis Trading Strategies</a>，稍微需要点背景知识，感兴趣可以看看。<br>
另外这是CEO亚瑟·海耶斯（ Arthur Hayes ）的介绍，沃顿商学院毕业的，背景很牛：<a href="https://www.zhihu.com/search?type=content&amp;q=%E4%BA%9A%E7%91%9F%E6%B5%B7%E8%80%B6%E6%96%AF" target="_blank" rel="external">花旗前交易员创立bitmex，仅2018一月利润就达2100万美元</a></p>
<h4 id="中英文金融词汇表">中英文金融词汇表</h4>
<p>常用术语的查询可以去：<a href="https://www.investopedia.com" target="_blank" rel="external">投资百科全书：investopedia</a></p>
<p>arbitrage/hedging – 套利/对冲（套利一般是指跨市场、高频的买卖；对冲是同时开空和多<a href="https://www.investopedia.com/ask/answers/013015/what-difference-between-arbitrage-and-hedging.asp" target="_blank" rel="external">difference between arbitrage and hedging</a> ）<br>
bids/asks – 买/卖<br>
expiry – 到期<br>
long/short – 空/多<br>
market/limit – 市价/限价<br>
maturity – 到期<br>
position – 头寸<br>
spot/future – 现货/期货<br>
spread – 点差<br>
Settlement – 交割（bitmex adapt cash settlement）<br>
contango/backwardation – 期货升水值/期货贴水值</p>
<ul>
<li>
<p>期权<br>
exercise – 行权（期权术语）<br>
Call/put Option – 认购期权/认沽期权<br>
Premium – 权利金，指买进期权合约所需支付的代价，可视为由期权的内在价值及时间价值构成。<br>
stike price – 行权价格<br>
KO(Knock-out) barrier price – 译为“敲出障碍价格”。即期权的止损价格。比如看跌bitmex期权，行权价格7500，敲出障碍价格3750那么：如果到期前跌倒7000，你就赚500；如果到期前跌倒3750，你就赚3750；如果继续下跌、价格低于3750，那么合约终止。这样可以保护看跌期权的做市商不损失太多。</p>
</li>
<li>
<p>‘Mutual Fund’</p>
<blockquote>
<p>A mutual fund is an investment vehicle made up of a pool of moneys collected from many investors for the purpose of investing in securities such as stocks, bonds, money market instruments and other assets. Mutual funds are operated by professional money managers, who allocate the fund’s investments and attempt to produce capital gains and/or income for the fund’s investors. <strong>A mutual fund’s portfolio is structured and maintained to match the investment objectives stated in its prospectus.</strong></p>
</blockquote>
</li>
<li>
<p>quote/trade</p>
<blockquote>
<p>“Quote Data” usually means top-of-book bid/ask data. (Also called BBO=best bid/offer, TOB, inside market, etc.) But more generally it can also mean all the current resting orders sitting on the book at any given time. These are limit orders that are less competitive than ones at the top-of-book.<br>
“Trade Data” means the record of trades that were actually transacted.</p>
</blockquote>
</li>
<li>
<p>log return<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup><br>
总结：采用log return在数学推导上有很多优点；根据log return也很容易得出raw return</p>
<blockquote>
<ol>
<li>log-normality: if we assume that prices are distributed log normally (which, in practice, may or may not be true for any given price series), then log(1 + r_i) is conveniently normally distributed</li>
<li>approximate raw-log equality: when returns are very small, log returns are close in value raw returns</li>
<li>time-additivity: the product of normally-distributed variables is not normal. Instead, the sum of normally-distributed variables is normal</li>
<li>mathematical ease: ln is easy to integration and differentiation</li>
<li>numerical stability:  multiplying small numbers is not as it is subject to arithmetic underflow, while addition of small numbers is numerically safe.</li>
</ol>
</blockquote>
</li>
</ul>
<hr>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://quantivity.wordpress.com/2011/02/21/why-log-returns/" target="_blank" rel="external">Why Log Returns</a> <strong>写的简单又专业</strong> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;市场&quot;&gt;市场&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2018.01.08 Total Market Capitalization is up to 820 billion dollars, which is roughly equivalent to one year GDP of Turkey.&lt;/li&gt;
&lt;li&gt;Info source
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://data.bitcoinity.org/markets/volume/6m?c=e&amp;amp;r=day&amp;amp;t=b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bitcoinity&lt;/a&gt;有相对可靠地成交量的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;现货交易所&quot;&gt;现货交易所&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;靠谱交易所：&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="block chain" scheme="http://timchen314.com/categories/block-chain/"/>
    
    
      <category term="block chain" scheme="http://timchen314.com/tags/block-chain/"/>
    
  </entry>
  
  <entry>
    <title>Vultr VPS</title>
    <link href="http://timchen314.com/VPS_Vultr/"/>
    <id>http://timchen314.com/VPS_Vultr/</id>
    <published>2018-03-31T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vultr是老牌的VPS服务商。这里记录一下购买和使用流程。</p>
<a id="more"></a>
<ul>
<li>可以支付宝</li>
<li>费用是随用随扣<br>
买了主机，不想用（比如我因为ping太高了），可以马上销毁，点击&quot;Server Destory&quot;就可以。费用只有几美分。<br>
可以再&quot;Deploy&quot;其他Server。</li>
<li>ping<br>
将<a href="HTTPS://WWW.VULTRVPS.COM/TEST-SERVER" target="_blank" rel="external">VULTR各节点测试地址</a>的结果粘贴到自己的linux/mac的node_info_file文件上，再执行下面shell命令，批量测速。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for node in $(awk &apos;&#123;for(i=1;i&lt;=NF;++i) &#123;print $i&#125;&#125;&apos; node_info_file | grep com); </div><div class="line">do </div><div class="line">    echo $node </div><div class="line">    ping -c 5 $node</div><div class="line">done</div></pre></td></tr></table></figure>
<p>oneline模式<code>for node in $(awk '{for(i=1;i&lt;=NF;++i) {print $i}}' node_info_file | grep com); do echo $node ; ping -c 5 $node; done &gt; result</code><br>
<strong>结果是Tokyo的机房最快。</strong></p>
<ul>
<li>给的是root用户<br>
可以自己建普通用户。</li>
<li>Deploy的时候填上ssh-key可以免密登录<br>
这个免密登录只针对root用户，普通用户如果想免密登录，可将/root/.ssh中的内容拷贝到自己的home目录下。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vultr是老牌的VPS服务商。这里记录一下购买和使用流程。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂烩" scheme="http://timchen314.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E7%83%A9/"/>
    
    
      <category term="技术杂烩" scheme="http://timchen314.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E7%83%A9/"/>
    
  </entry>
  
  <entry>
    <title>About Digital Currency</title>
    <link href="http://timchen314.com/pri/digital_currency/"/>
    <id>http://timchen314.com/pri/digital_currency/</id>
    <published>2018-03-22T10:00:00.000Z</published>
    <updated>2019-06-14T07:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>What a bubble!<br>
<img src="https://res.cloudinary.com/do7yb5qw4/image/upload/v1512135626/%E6%9D%82/bitcoin.png" alt="bitcoin"></p>
<a id="more"></a>
<h2 id="总览">总览</h2>
<h3 id="info">Info</h3>
<p><img src="https://res.cloudinary.com/do7yb5qw4/image/upload/v1515308629/%E6%9D%82/Percentage_of_Total_Market_Capitalization_Dominance.png" alt="image"></p>
<h4 id="source">source</h4>
<ol start="0">
<li><a href="https://coinmarketcap.com" target="_blank" rel="external">Cryptocurrency Market Capitalizations</a></li>
<li><a href="http://www.8btc.com" target="_blank" rel="external">www.8btc.com</a></li>
<li>很好的网站  <a href="http://bitcointalk.org/" target="_blank" rel="external">http://bitcointalk.org/</a></li>
</ol>
<h3 id="问题与挑战">问题与挑战</h3>
<h4 id="1-税收">1. 税收</h4>
<p>美国国税局（IRS, Internal Revenue Service）在努力调查bitcoin避税，这是bitcoin正式应用所面临的一个问题。</p>
<blockquote>
<p>像达世（Dash）、门罗（Monero）和ZCash等币都部署了隐私功能，其交易是很难被追踪到的。</p>
</blockquote>
<h4 id="个人目标">个人目标</h4>
<ul>
<li>量化策略投资<br>
ICO是一锤子买卖，在2018年会有很多坑。ICO及其之后的项目准备阶段，币价的特点是不确定性大、严重依赖消息。<br>
资金量大、消息面广的，可以广撒网。<br>
以我的资金量和消息面，是玩不转的。</li>
</ul>
<ul>
<li>自媒体？</li>
</ul>
<ol>
<li><a href="https://www.zhihu.com/question/52116246" target="_blank" rel="external">英文翻译</a><br>
猪八戒上千字100，千字140的价格算高的了。</li>
<li>英文约稿与推荐<br>
只要求中文独家，最好中文先发。</li>
<li>中文转载</li>
</ol>
<h2 id="待读-进展">待读&amp;进展</h2>
<h3 id="待读">待读</h3>
<p>非常好：<a href="http://www.8btc.com/reinvent-the-currency" target="_blank" rel="external">http://www.8btc.com/reinvent-the-currency</a><br>
<a href="http://blog.csdn.net/m0_37327416/article/details/72885395" target="_blank" rel="external">以太坊（1）–在CentOS 6.5上搭建以太坊私有链的步骤（图文详细）</a><br>
<a href="http://blog.csdn.net/m0_37327416/article/details/72885521" target="_blank" rel="external">以太坊（3）：以太坊私有链环境下的智能合约的编写、编译、创建与执行</a><br>
<a href="http://www.8btc.com/smart-contract-solidity" target="_blank" rel="external">教程</a><br>
<a href="http://m.blog.csdn.net/vinsuan1993/article/details/75208203" target="_blank" rel="external">Geth搭建私有链</a><br>
<a href="https://www.zhihu.com/question/48049768" target="_blank" rel="external">中国在区块链领域有哪些专家或公认的牛人？【帮助弄懂bitcoin技术】</a></p>
<h3 id="进展">进展</h3>
<p>按照https://ethereum.stackexchange.com/questions/13547/how-to-set-up-a-private-network-and-connect-peers-in-geth对json进行了设置，</p>
<h2 id="digital-currency">digital currency</h2>
<h3 id="ethereum-new-set">ethereum (new_set)</h3>
<ul>
<li>practice<br>
My understanding:
<ol>
<li>init first block.</li>
<li>then you can mine.</li>
</ol>
</li>
</ul>
<h3 id="cardano">cardano</h3>
<p><a href="https://zhuanlan.zhihu.com/p/32874568" target="_blank" rel="external">cardano简介</a><br>
爱丁堡大学一个中心IOHK牵头。</p>
<ul>
<li>ADA <a href="https://daedaluswallet.io/faq/" target="_blank" rel="external">不支持win32和移动钱包</a></li>
</ul>
<h3 id="eos">EOS</h3>
<p><a href="https://zhuanlan.zhihu.com/p/33496593" target="_blank" rel="external">EOS：疯子的狂欢</a></p>
<ul>
<li>BM出品，李笑来站台</li>
</ul>
<h3 id="steem"><s>STEEM</s></h3>
<ul>
<li>BM出品，远没有btc强势</li>
</ul>
<h3 id="其他币">其他币</h3>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/34723125?group_id=959209805945008128" target="_blank" rel="external">TUNE：音乐应用</a><br>
三位创始人都是格莱美奖得主。</li>
</ul>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/34733907" target="_blank" rel="external">太空链</a>：严重破发</li>
</ul>
<p>薛蛮子认为：</p>
<blockquote>
<p>对于ICO的投资标准，薛蛮子表示，首先是人靠谱，此前投资的比原链是国内区块链最大的社区巴比特发起的，墨链是纸贵科技发起的，BEX是美豹金融发起的，这些项目的团队本身已经有了成功的创业案例，且在细分领域处于排头兵的地位。</p>
</blockquote>
<blockquote>
<p>拿比原链来说，薛蛮子表示，“我认为，比原链的创始团队很年轻，富有朝气，大家都很努力，但是比原链的技术挑战挺大，需要天时地利人和，很多条件具备才能做成，不是轻描淡写，一挥而就的。团队最要紧的是不断试错，踏踏实实做事情，不要辜负投资人的信任。我不看好的是，有的小伙子一辈子没赚过大钱，也没花过100万以上的钱，突然通过ICO拿了几个亿，这些人hold不住。”</p>
</blockquote>
<h2 id="tech">tech</h2>
<blockquote>
<p>1、 共识算法:POW/POS/DPOS/PBFT/BFT-Raft/Paxos/Kafka<br>
2、 P2P通讯:自举(bootstrapped)/连接/广播<br>
3、 签名验签:ECDSA/secp256k1/ED25519/MultiSig<br>
4、 Hash锁定:Merkle树/MPT树<br>
5、 UTXO记账:流水账<br>
6、 智能合约:P2PKH/P2SH/Oracle/状态机<br>
7、 隐私保护:零知识证明、同态加密、CoinJoin加密技术<br>
8、 私钥存储:HD协议(Hierarchical Deterministic Key Creation)、钱包Wallets、丢失找回<br>
9、 算力分发：矿池分发</p>
</blockquote>
<ul>
<li>
<p>冷热钱包<br>
热是指在线。如果热钱包断网，那么从存储的角度来讲，也是冷钱包了。但是离线的热钱包和冷钱包还是有很多不同之处。</p>
<p><a href="https://www.zhihu.com/question/21478404" target="_blank" rel="external">常用的钱包</a></p>
</li>
</ul>
<h3 id="btc">BTC</h3>
<blockquote>
<p>比特币系统的一个重要的可扩展特性是：它的区块存储在多层次的数据结构中。一个区块的哈希实际上只是区块头的哈希，区块头是包含时间戳、随机数、上个区块哈希和存储了所有的区块交易的默克尔树的根哈希的长度大约为200字节的一段数据。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
</blockquote>
<h3 id="钱包相关">钱包相关</h3>
<ul>
<li><a href="https://www.jianshu.com/p/d0a4a44685d3" target="_blank" rel="external">简单科普私钥、地址、助记词、Keystore的区别</a></li>
<li><a href="http://www.8btc.com/wiki/bitcoin-wallet-safe-use-perfect-backup" target="_blank" rel="external">比特币钱包的安全使用和完美备份</a>
<ul>
<li>介绍了如何<strong>离线生成脑钱包</strong></li>
</ul>
</li>
</ul>
<h4 id="ripple钱包-os-x-client">ripple钱包: OS X client</h4>
<p>只要记住私钥，那么点击“通过私钥创建一个账户”，就可以得到一个已经创建过的账户的钱包！</p>
<h3 id="共识">共识</h3>
<p><a href="https://www.zhihu.com/question/267440381/answer/325981371" target="_blank" rel="external">区块链技术如何兼顾共识和匿名，解决储存和处理速度问题？</a><br>
1.共识机制下如何兼顾匿名。举个例子，甲转账给乙两个比特币，但乙不承认。在共识机制下，我们都可以看到确实有2个比特币从地址A转到了地址B，此时有<br>
问题一：甲可以想办法证明地址A就是他的，但这个证明仍旧是传统的，需要一个个说服别人的证明，而不是一下子说服全部人的证明。<br>
问题二：即使甲说服了大部分人地址A就是他的，乙仍旧可以不承认地址B是他的，也没有共识机制可以指出地址B是谁的。甲仍旧不能证明转给乙两个比特币。<br>
问题三：如果存在共识机制能指出地址AB是对应甲和乙的，隐私性就无从谈起，等于所有人的交易都是暴露的。<br>
2.数据储存过大。举个例子在淘宝买东西，传统交易是中心化的，数据都记录在阿里的硬盘里，我们害怕阿里偷偷修改了以前的数据，要去中心化，所以用上了区块链技术取代阿里云，但所有的交易数据可不是几个T这么少，普通用户如何储存。如果只是少数人储存，那仍旧没有去中心化。<br>
3.计算速度的问题。假设以后所有交易都在区块链上，区块链技术也得到改进，每秒能处理上亿比交易，如果每个人都要记录，是否意味着每个人都有强大的处理能力，如果但普通计算机无法胜任，只能交给少数超级计算机处理，是否意味普通人失去了记录的能力。</p>
<p>共识（consensus）算法指的是大家对某一个提案达成一致意见的过程，也就是分布式系统中多个节点之间，对某个状态达成一致结果的过程。至于提案（proposal），几乎可以认为任何可以达成一致的信息就是一个提案。</p><p>在具体的区块记账中，问题1所对应的提案就是地址A向地址B转账这条交易信息是否存在。达成共识的过程就是大家确认该笔交易存在并且有效。因此，不涉及到问题1.1和1.2，即地址A是甲的地址，地址B是乙的地址这个身份关联过程，因此，可以视为该过程是匿名的。除非提案内容更改为&quot;地址A是甲的地址，地址B是乙的地址，地址A向地址B发起了一笔转账&quot;。<br>
这样就触发了问题三，问题三的描述里，确实无法保证隐私性，这个不用多说。</p>
<h3 id="闪电链">闪电链</h3>
<p><a href="https://zhuanlan.zhihu.com/p/34681487" target="_blank" rel="external">闪电链科普</a>：<br>
所谓闪电链就是小额交易不上主链，而是放在侧链上，在达到一定交易量后再统一上到主链上。<br>
闪电链相当于中心化的节点。</p>
<blockquote>
<p><strong>闪电网络的反作弊机制</strong><br>
一个叫双向支付通道（Bi-Directional Payment Channel )<br>
一个叫时间锁（TimeLock）<br>
一个叫密码（Secret Value）</p>
</blockquote>
<p>双向通道：交易双方都确认，才能交易成功。</p>
<h3 id="pow">POW</h3>
<ul>
<li>btc的block上，负责POW的nounce。</li>
<li>btc采用POW是为了增加作假block的成本，进而禁止了双花。</li>
</ul>
<h3 id="utxo">UTXO</h3>
<p><a href="http://8btc.com/thread-45640-1-1.html" target="_blank" rel="external">玛_雅和vatten解释的很好</a><br>
<a href="http://8btc.com/article-4381-1.html" target="_blank" rel="external">其实并没有什么比特币，只有 UTXO</a></p>
<h3 id="隐私保护机制">隐私保护机制<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h3>
<ol>
<li>
<p>零知识证明<br>
<img src="https://pic4.zhimg.com/80/v2-8e9aa2a8dd3457c05cbbc688f2679ff1_hd.jpg" alt="image"><br>
零知识证明也就是证明者在不泄露秘密的情况下，让验证者相信证明者知道这个秘密。</p>
<blockquote>
<p>Zcash是首个使用零知识证明机制的区块链系统。不同于其他加密数字货币会公开所有的交易记录，Zcash可以用零知识证明将完全加密的交易记录确认为有效，但是他有一个很关键的缺点就是<strong>速度缓慢</strong>。<br>
Zcash采用了尖端加密技术zk-SNARKs来对用户地址及账户余额进行隐藏。</p>
</blockquote>
</li>
<li>
<p>同态加密</p>
<blockquote>
<p>明文加密后得到密文，对密文进行特定的代数运算得到的还是加密的结果，对结果进行解密可以得到对明文进行同样运算一样的结果。也就是说可以在不知道原数据的情况下进行运算，最后同样能得到正确的结果。</p>
</blockquote>
</li>
<li>
<p>混币</p>
<blockquote>
<p>以门罗币（Monero）为例，他使用了RingCT（环形加密匿名）技术来实现隐私保护。</p>
</blockquote>
</li>
</ol>
<h3 id="problem">problem</h3>
<ul>
<li>what is private network?</li>
</ul>
<h2 id="资料-引用">资料&amp;引用</h2>
<ul>
<li>
<p><a href="https://www.zhihu.com/question/37290469" target="_blank" rel="external">区块链是什么，如何简单易懂地介绍区块链？</a><br>
<a href="https://zhuanlan.zhihu.com/p/34220442?group_id=953729236041809920" target="_blank" rel="external">2亿美元被锁死在区块链中？以太坊智能合约被爆存在巨大漏洞，新技术落地恐怕要“迟到”了</a></p>
</li>
<li>
<p>BM是指网名byteMaster (Daniel Larimer)的程序员，BTS、STEEMIT、EOS创始人</p>
</li>
</ul>
<p>reference:</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://ethfans.org/wikis/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%99%BD%E7%9A%AE%E4%B9%A6" target="_blank" rel="external"></a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/34709735" target="_blank" rel="external">知识点 || 区块链的隐私保护机制有哪些？真的安全吗？</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What a bubble!&lt;br&gt;
&lt;img src=&quot;https://res.cloudinary.com/do7yb5qw4/image/upload/v1512135626/%E6%9D%82/bitcoin.png&quot; alt=&quot;bitcoin&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="block chain" scheme="http://timchen314.com/categories/block-chain/"/>
    
    
      <category term="block chain" scheme="http://timchen314.com/tags/block-chain/"/>
    
  </entry>
  
  <entry>
    <title>Web Learning Note</title>
    <link href="http://timchen314.com/Web/"/>
    <id>http://timchen314.com/Web/</id>
    <published>2018-03-22T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="html5">html5</h1>
<ul>
<li>html In a nutshell<br>
The <code>&lt;head&gt;</code> element contains meta information about the document<br>
The <code>&lt;body&gt;</code> element contains the visible page content<br>
HTML elements are the building blocks of HTML pages<br>
HTML elements are represented by tags</li>
</ul>
<a id="more"></a>
<p>HTML tags label pieces of content such as “heading”, “paragraph”, “table”, and so on<br>
tags:<br>
<code>&lt;tagname&gt;content goes here...&lt;/tagname&gt;</code></p>
<h2 id="html-basic">html basic</h2>
<ul>
<li>
<p>Headings<br>
e.g., <code>&lt;h1&gt;</code></p>
</li>
<li>
<p>Paragraphs<br>
<code>&lt;p&gt;</code></p>
</li>
<li>
<p>Links <code>&lt;a&gt;</code><br>
<code>&lt;a href=&quot;https://www.w3schools.com&quot;&gt;This is a link&lt;/a&gt;</code></p>
<ul>
<li>local links<br>
<code>&lt;a href=&quot;html_images.asp&quot;&gt;HTML Images&lt;/a&gt;</code></li>
<li>colors<br>
By default, a link will appear like this (in all browsers):<br>
An unvisited link is underlined and blue<br>
A visited link is underlined and purple<br>
An active link is underlined and red<br>
You can change the default colors, e.g.:</li>
</ul>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">a:link &#123;</div><div class="line">    color: green; </div><div class="line">    background-color: transparent; </div><div class="line">    text-decoration: none;</div><div class="line">&#125;</div><div class="line">a:visited &#123;</div><div class="line">    color: pink;</div><div class="line">    background-color: transparent;</div><div class="line">    text-decoration: none;</div><div class="line">&#125;</div><div class="line">a:hover &#123;</div><div class="line">    color: red;</div><div class="line">    background-color: transparent;</div><div class="line">    text-decoration: underline;</div><div class="line">&#125;</div><div class="line">a:active &#123;</div><div class="line">    color: yellow;</div><div class="line">    background-color: transparent;</div><div class="line">    text-decoration: underline;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.w3schools.com/html/html_links.asp" target="_blank" rel="external">target Attribute</a><br>
Available values: <code>_blank</code>, <code>_self</code>, <code>_parent</code>, <code>_top</code>, <code>framename - Opens the linked document in a named frame</code></li>
<li>images<br>
Note: <code>border:0</code>; is added to prevent IE9 (and earlier) from displaying a border around the image (when the image is a link).</li>
<li>Create a Bookmark</li>
</ul>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;h2 id=&quot;C4&quot;&gt;Chapter 4&lt;/h2&gt;</div><div class="line">&lt;a href=&quot;#C4&quot;&gt;Jump to Chapter 4&lt;/a&gt;</div></pre></td></tr></table></figure>
</li>
<li>
<p>Images<br>
<code>&lt;img src=&quot;w3schools.jpg&quot; alt=&quot;W3Schools.com&quot; width=&quot;104&quot; height=&quot;142&quot;&gt;</code><br>
The style attributes are valid in HTML5 and suggested.</p>
<ul>
<li>Floating<br>
let the image float to the right or to the left of a text</li>
<li>maps<br>
An image-map is an image with clickable areas.</li>
<li>Background image</li>
</ul>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background-image:url('clouds.jpg')"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Background Image<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>picture element<br>
Introduced since html5.</li>
</ul>
<blockquote>
<p>Always specify an <img> element as the last child element of the <picture> element. The <img> element is used by browsers that do not support the <picture> element, or if none of the <source> tags matched.</picture></picture></p>
</blockquote>
</li>
<li>
<p>Buttons<br>
<code>&lt;button&gt;Click me&lt;/button&gt;</code></p>
</li>
<li>
<p>Lists<br>
HTML lists are defined with the <code>&lt;ul&gt;</code> (unordered/bullet list) or the <code>&lt;ol&gt;</code> (ordered/numbered list) tag, followed by <code>&lt;li&gt;</code> tags (list items)<br>
<code>&lt;ul&gt;</code><br>
<code>&lt;li&gt;Coffee&lt;/li&gt;</code><br>
<code>&lt;/ul&gt;</code></p>
</li>
</ul>
<h2 id="elements">elements</h2>
<p>An HTML element usually consists of a start tag and end tag, with the content inserted in between:<br>
<code>&lt;tagname&gt;Content goes here...&lt;/tagname&gt;</code></p>
<ul>
<li>
<p><code>&lt;br&gt;</code> element<br>
which indicates a line break.<br>
Empty elements can be “closed” in the opening tag like this: <code>&lt;br /&gt;</code>.<br>
HTML5 does not require empty elements to be closed. But if you want stricter validation, or if you need to make your document readable by XML parsers, you must close all HTML elements properly.</p>
</li>
<li>
<p><code>&lt;hr&gt;</code> 水平分割线<br>
a thematic break.</p>
</li>
<li>
<p>headings<br>
Note: Use HTML headings for headings only. Don’t use headings to make text BIG or bold.<br>
For Bigger Headings use: <code>&lt;h1 style=&quot;font-size:60px;&quot;&gt;Heading 1&lt;/h1&gt;</code></p>
</li>
<li>
<p><code>&lt;head&gt;</code> Element<br>
The HTML <head> element has nothing to do with HTML headings.<br>
The <head> element is a container for metadata. HTML metadata is data about the HTML document. Metadata is not displayed.<br>
<strong>The <head> element is placed between the <html> tag and the <body> tag:</body></html></head></strong></head></head></p>
</li>
<li>
<p><code>&lt;pre&gt;</code><br>
The text inside a <pre> element is displayed in a fixed-width font (usually Courier), and it preserves both spaces and line breaks. <a href="https://www.w3schools.com/html/html_paragraphs.asp" target="_blank" rel="external">link</a></pre></p>
</li>
<li>
<p>Formating element</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;b&gt; - Bold text   </div><div class="line">&lt;strong&gt; - Important text   </div><div class="line">&lt;i&gt; - Italic text   </div><div class="line">&lt;em&gt; - Emphasized text   </div><div class="line">&lt;mark&gt; - Marked text   </div><div class="line">&lt;small&gt; - Small text   </div><div class="line">&lt;del&gt; - Deleted text   </div><div class="line">&lt;ins&gt; - Inserted text   </div><div class="line">&lt;sub&gt; - Subscript text   </div><div class="line">&lt;sup&gt; - Superscript text</div></pre></td></tr></table></figure>
<p>Note: Browsers display <code>&lt;strong</code>&gt; as <code>&lt;b</code>&gt;, and <code>&lt;em</code>&gt; as <code>&lt;i</code>&gt;. However, there is a difference in the meaning of these tags: <code>&lt;b</code>&gt; and <code>&lt;i</code>&gt; defines bold and italic text, but <code>&lt;strong</code>&gt; and <code>&lt;em</code>&gt; means that the text is “important”.</p>
</li>
<li>
<p>Quotations</p>
<ul>
<li><code>&lt;q&gt;</code> for short and <code>&lt;blockquote&gt;</code> for long Quotations<br>
e.g., :</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><figcaption><span>cite="http://www.worldwildlife.org/who/index.html"></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">For 50 years, WWF has been protecting the future of nature.</div><div class="line">The world&apos;s leading conservation organization,</div><div class="line">WWF works in 100 countries and is supported by</div><div class="line">1.2 million members in the United States and</div><div class="line">close to 5 million globally.</div><div class="line">&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>&lt;abbr&gt;</code><br>
Marking abbreviations can give useful information to browsers, translation systems and search-engines.</li>
<li><code>&lt;cite&gt;</code><br>
The HTML <cite> element defines the title of a work.</cite></li>
<li><code>&lt;bdo&gt;</code> Bi-Directional Override<br>
e.g., <code>&lt;bdo dir=&quot;rtl&quot;&gt;</code></li>
</ul>
<h2 id="comments">comments</h2>
<p>e.g., <code>&lt;!-- Do not display this at the moment &lt;img border=&quot;0&quot; src=&quot;pic_mountain.jpg&quot; alt=&quot;Mountain&quot;&gt; --&gt;</code></p>
<h2 id="attributes">Attributes</h2>
<p>Attributes usually come in name/value pairs like: <strong>name=“value”</strong>, blank is used to sperate attributes.<br>
e.g., <code>&lt;a href=&quot;https://www.w3schools.com&quot;&gt;This is a link&lt;/a&gt;</code><br>
<code>href</code> is an attributes.</p>
<ul>
<li><code>src</code></li>
<li><code>width</code> &amp; <code>height</code></li>
<li><code>alt</code><br>
The alt attribute specifies an alternative text to be used, when an image cannot be displayed.<br>
The value of the attribute can be read by screen readers. This way, someone “listening” to the webpage, e.g. a blind person, can “hear” the element.</li>
<li><code>style</code><br>
color, font, size etc.<br>
e.g., <code>&lt;p style=&quot;color:red&quot;&gt;I am a paragraph&lt;/p&gt;</code></li>
<li><code>lang</code><br>
<code>&lt;html lang=&quot;en-US&quot;&gt;</code> is important for accessibility applications (screen readers) and search engines.</li>
<li><code>title</code><br>
Here, a title attribute is added to the <p> element. The value of the title attribute will be displayed as a tooltip when you mouse over the paragraph. <a href="https://www.w3schools.com/html/html_attributes.asp" target="_blank" rel="external">HTML Attributes</a></p></li>
</ul>
<h2 id="json">JSON<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2>
<blockquote>
<p>JSON[1] 结构有两种结构[2]<br>
json简单说就是javascript中的对象和数组，所以这两种结构就是对象和数组两种结构，通过这两种结构可以表示各种复杂的结构<br>
1、对象：对象在js中表示为“{}”括起来的内容，数据结构为 {key：value,key：value,…}的键值对的结构，在面向对象的语言中，key为对象的属性，value为对应的属性值，所以很容易理解，取值方法为 对象.key 获取属性值，这个属性值的类型可以是 数字、字符串、数组、对象几种。<br>
2、数组：数组在js中是中括号“[]”括起来的内容，数据结构为 [“java”,“javascript”,“vb”,…]，取值方式和所有语言中一样，使用索引获取，字段值的类型可以是 数字、字符串、数组、对象几种。<br>
经过对象、数组2种结构就可以组合成复杂的数据结构了。</p>
</blockquote>
<h2 id="forms">Forms</h2>
<ul>
<li>
<p><code>&lt;input&gt;</code> Element</p>
<ul>
<li>type value<br>
<code>text</code>, <code>radio</code>, <code>submit</code></li>
<li><code>name</code> Attribute<br>
Each input field must have a name attribute to be submitted. If the name attribute is omitted, the data of that input field will not be sent at all.</li>
</ul>
</li>
<li>
<p>Action Attribute<br>
The action attribute defines the action to be performed when the form is submitted.</p>
</li>
<li>
<p>Target Attribute</p>
<ul>
<li>type value<br>
<code>_self</code>, <code>_blank</code>,</li>
</ul>
</li>
</ul>
<h2 id="tips">TIPS</h2>
<ul>
<li>.htm or .html has no difference.</li>
<li>HTML tags are not case sensitive<br>
The HTML5 standard does not require lowercase tags, but W3C recommends lowercase in HTML, and demands lowercase for stricter document types like XHTML.</li>
<li>Quote Attribute Values<br>
W3C recommends quotes in HTML, and demands quotes for stricter document types like XHTML.<br>
<strong>single quotes can also be used.</strong></li>
<li>With HTML, you cannot change the output by adding extra spaces or extra lines in your HTML code.</li>
<li>display special symbols<br>
© - <code>&amp;copy;</code><br>
® - <code>&amp;reg;</code><br>
™ - <code>&amp;trade;</code></li>
<li>MIME type<br>
也称作content type。<code>Content-Type: text/HTML</code>：http协议中<code>Content-Type</code>的值就是mime type。<br>
更多信息见：<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B" target="_blank" rel="external">wiki 互联网媒体类型</a></li>
</ul>
<h1 id="css3">CSS3</h1>
<p>CSS(层叠样式表 Cascading Style Sheets)，专门用来负责html里的<code>&lt;style&gt;</code>。<br>
<strong>CSS的语法很简单，选择器：{属性1：属性值; 属性2：属性值}。</strong></p>
<blockquote>
<p>CSS can be added to HTML elements in 3 ways:</p>
</blockquote>
<ul>
<li>Inline - by using the style attribute in HTML elements</li>
<li>Internal - by using a <code>&lt;style&gt;</code> element in the <code>&lt;head&gt;</code> section</li>
<li>External - by using an external CSS file<br>
Three examples:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://www.w3schools.com/html/styles.css&quot;&gt; </div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/html/styles.css&quot;&gt;</div></pre></td></tr></table></figure>
<p>Your first test:<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;style&gt;</div><div class="line">body &#123;</div><div class="line">    background-color: lightblue;</div><div class="line">&#125;</div><div class="line">h1 &#123;</div><div class="line">    color: white;</div><div class="line">    text-align: center;</div><div class="line">&#125;</div><div class="line">p &#123;</div><div class="line">    font-family: verdana;</div><div class="line">    font-size: 20px;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h1&gt;My First CSS Example&lt;/h1&gt;</div><div class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<ul>
<li>id attribute<br>
Note: The id of an element should be unique within a page, so the id selector is used to select one unique element!</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;p id=&quot;p01&quot;&gt;I am different&lt;/p&gt;</div><div class="line">#p01 &#123;</div><div class="line">    color: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>class attribute</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;p class=&quot;error&quot;&gt;I am different&lt;/p&gt;</div><div class="line">p.error &#123;</div><div class="line">    color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="css-properties">CSS properties</h2>
<p>border【Note: border must have at last 3 properites】; color; font-size; font-family; padding &amp; margin(inside/outside the border);</p>
<h1 id="javascript">JavaScript</h1>
<ul>
<li><code>&lt;noscript&gt;</code><br>
Defines an alternate content for users that do not support client-side scripts.</li>
<li>Examples</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//change HTML content</div><div class="line">document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;;</div><div class="line">//change HTML styles</div><div class="line">document.getElementById(&quot;demo&quot;).style.fontSize = &quot;25px&quot;;</div><div class="line">document.getElementById(&quot;demo&quot;).style.color = &quot;red&quot;;</div><div class="line">document.getElementById(&quot;demo&quot;).style.backgroundColor = &quot;yellow&quot;;</div><div class="line">//change HTML attributes</div><div class="line">document.getElementById(&quot;image&quot;).src = &quot;picture.gif&quot;;</div></pre></td></tr></table></figure>
<h1 id="chares">Chares</h1>
<ul>
<li>
<p>port<br>
80: http<br>
443: https</p>
</li>
<li>
<p>浏览器的解析方式<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup><br>
浏览器解析html页面首先浏览器先下载html，然后在内存中把html代码转化成Dom Tree，然后浏览器根据Dom Tree上的Node分析css和Images，当文档下载遇到js时，js独立下载。</p>
</li>
</ul>
<ul>
<li>
<p>HMAC</p>
<blockquote>
<p>HMAC是密钥相关的哈希运算消息认证码，HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。<br>
<strong>hmac主要应用在身份验证中，它的使用方法是这样的：</strong><br>
(1) 客户端发出登录请求（假设是浏览器的GET请求）<br>
(2) 服务器返回一个随机值，并在会话中记录这个随机值<br>
(3) 客户端将该随机值作为密钥，用户密码进行hmac运算，然后提交给服务器<br>
(4) 服务器读取用户数据库中的用户密码和步骤2中发送的随机值做与客户端一样的hmac运算，然后与用户发送的结果比较，如果结果一致则验证用户合法</p>
</blockquote>
</li>
<li>
<p>REST/RESTful<br>
参考：<a href="http://www.ruanyifeng.com/blog/2011/09/restful" target="_blank" rel="external">理解RESTful架构</a><br>
Representational State Transfer，“表现层状态转化”，主语应该是resource。</p>
<p>RESTful架构：</p>
</li>
</ul>
<p>（1）每一个URI（统一资源定位符）代表一种资源；</p>
<p>（2）客户端和服务器之间，传递这种资源的某种表现层；</p>
<p>（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现&quot;表现层状态转化&quot;。</p>
<ul>
<li>
<p>协程<br>
优点：</p>
<ul>
<li>最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</li>
<li>第二大优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</li>
</ul>
</li>
<li>
<p>socket</p>
<ul>
<li>introduction<br>
默认端口也是80和443;<br>
协议标识符是ws（如果加密，则为wss）;</li>
<li>socket所在的层次以及它是什么：<a href="https://www.cnblogs.com/dolphinX/p/3460545.html" target="_blank" rel="external">简单理解Socket</a></li>
</ul>
<blockquote>
<p>从字面意思来看TCP/IP是TCP和IP协议的合称，但实际上TCP/IP协议是指因特网整个TCP/IP协议族。不同于ISO模型的七个分层，TCP/IP协议参考模型把所有的TCP/IP系列协议归类到四个抽象层中</p>
</blockquote>
<blockquote>
<p>应用层：TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet 等等</p>
</blockquote>
<blockquote>
<p>传输层：TCP，UDP</p>
</blockquote>
<blockquote>
<p>网络层：IP，ICMP，OSPF，EIGRP，IGMP</p>
</blockquote>
<blockquote>
<p>数据链路层：SLIP，CSLIP，PPP，MTU</p>
</blockquote>
<blockquote>
<p>我们知道两个进程如果需要进行通讯最基本的一个前提能能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道IP层的ip地址可以唯一标示主机，而TCP层协议和端口号可以唯一标示主机的一个进程，这样我们可以利用ip地址＋协议＋端口号唯一标示网络中的一个进程。</p>
</blockquote>
</li>
</ul>
<ul>
<li><a href="https://www.jianshu.com/p/979721d30f7d" target="_blank" rel="external">socket连接和HTTP连接的区别</a>:</li>
</ul>
<blockquote>
<p>简单来说，你浏览的网页(网址以HTTP://开头)都是HTTP协议传输到你的浏览器的，而HTTP是基于socket之上的。socket是一套完成TCP.UDP协议的接口.<br>
HTTP协议:简单对象访问协议，对应于应用层，HTTP协议是基于TCP连接的。<br>
TCP协议:对应于传输层<br>
IP协议:对应于网络层<br>
TCP/IP是传输层协议，主要解决数据如果在网络中传输；<br>
而HTTP协议是应用层协议，主要解决如何包装数据。<br>
socket是对TCP/IP协议的封装，socket本身并不是协议，而是一个调用接口(API),通过socket我们才能使用TCP/IP协议.<br>
http连接:http连接就是所谓的短连接，即客户端向服务器端发送一次请求，服务器端响应后连接即会断掉.<br>
socket连接:socket连接就是所谓的长连接，理论上客户端和服务器端一旦连接其连接将不会主动断掉；但是由于各种环境因素可能会连接断开，比如说:服务器端或客户端主机down了，网络故障，或者两者之间长时间没有传输数据，网络防火墙可能会断开该连接以释放网络资源。所以当一个socket连接中没有数据传输的时候，那么为了维持连接需要发送心跳消息，具体心跳消息格式是开发者自己定义的。</p>
</blockquote>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://caibaojian.com/json-baike.html" target="_blank" rel="external">JSON简介</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://www.w3schools.com/css/tryit.asp?filename=trycss_default" target="_blank" rel="external">CSS3 教程</a><br>
注意：主要浏览器有5个！ <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://www.zhihu.com/question/23250329" target="_blank" rel="external">CSS、JS 放置位置与前端性能的关系？</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;html5&quot;&gt;html5&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;html In a nutshell&lt;br&gt;
The &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element contains meta information about the document&lt;br&gt;
The &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element contains the visible page content&lt;br&gt;
HTML elements are the building blocks of HTML pages&lt;br&gt;
HTML elements are represented by tags&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="http://timchen314.com/categories/Web/"/>
    
    
      <category term="Web" scheme="http://timchen314.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>pandas note</title>
    <link href="http://timchen314.com/pandas/"/>
    <id>http://timchen314.com/pandas/</id>
    <published>2018-02-04T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据分析神器Pandas。</p>
<a id="more"></a>
<p>教程参考<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>  <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>  <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>.</p>
<h1 id="基本">基本</h1>
<blockquote>
<p>Pandas 基于两种数据类型，series 和 dataframe。series 是一种一维的数据类型，其中的每个元素都有各自的标签。dataframe 可以看作是一个 series 的字典。</p>
</blockquote>
<ul>
<li>Series有一个与数组关联的数据标签，被叫做 索引 。最简单的Series是由一个数组的数据构成：</li>
</ul>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [4]: obj = Series([4, 7, -5, 3])    </div><div class="line">In [5]: obj   </div><div class="line">Out[5]:   </div><div class="line">0 4   </div><div class="line">1 7   </div><div class="line">2 -5   </div><div class="line">3 3</div></pre></td></tr></table></figure>
<ul>
<li>Dataframe<br>
axis=0表示行，axis=1表示列<br>
行、列的index，分别为index, columns，例如：<br>
<code>df.columns</code></li>
<li>loc是根据标签索引；iloc是index索引:<br>
<code>df.iloc(1) # 第二行</code><br>
<code>df.iloc(:,1) # 第二列</code><br>
<code>df.loc([0], ['size') # 第一行、「size」列</code></li>
</ul>
<ul>
<li>
<p>df.head/tail<br>
<code>df</code> is the abbre. of dataframe.<br>
Show first 5 line：<code>df.head(5)</code></p>
</li>
<li>
<p>Changing column labels so you can getting a column by label .</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">df.columns = [&apos;water_year&apos;,&apos;rain_octsep&apos;, &apos;outflow_octsep&apos;,</div><div class="line">              &apos;rain_decfeb&apos;, &apos;outflow_decfeb&apos;, &apos;rain_junaug&apos;, &apos;outflow_junaug&apos;]</div><div class="line">df.rain_octsep # 相当于df[&apos;rain_octsep&apos;]</div></pre></td></tr></table></figure>
</li>
<li>
<p>len(df)</p>
</li>
</ul>
<ul>
<li>filter <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Using a series of booleans to filter</div><div class="line">df[df.rain_octsep &lt; 1000]</div><div class="line"># Filtering by multiple conditionals</div><div class="line">df[(df.rain_octsep &lt; 1000) &amp; (df.outflow_octsep &lt; 4000)] </div><div class="line"># 这里不能用 and 关键字，因为会引发操作顺序的问题。必须用 &amp; 和圆括号。</div><div class="line"># Filtering by string methods</div><div class="line">df[df.water_year.str.startswith(&apos;199&apos;)]</div><div class="line"># 注意，你必须用 .str.[string method] ，而不能直接在字符串上调用字符方法。</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="添加-add-data">添加(add data)</h2>
<h3 id="add-a-row">add a row</h3>
<p>ref: <a href="http://pandas.pydata.org/pandas-docs/stable/merging.html#joining-on-index" target="_blank" rel="external">Merge, join, and concatenate</a><br>
In short, there are several methods to add data to a Dataframe: Merge, join, concatenate and append.<br>
<strong>But only loc can add data inplace!!! All other methods will return a new dataframe and without ‘inplace’ arg</strong></p>
<ul>
<li>
<p>append</p>
<ul>
<li>Dataframe: add a row</li>
</ul>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># method 1</span></div><div class="line">df = DataFrame(columns=(<span class="string">'lib'</span>, <span class="string">'qty1'</span>, <span class="string">'qty2'</span>))<span class="comment">#生成空的pandas表  </span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):<span class="comment">#插入一行</span></div><div class="line">    df.loc[i] = [randint(<span class="number">-1</span>,<span class="number">1</span>) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">3</span>)]  </div><div class="line"><span class="comment"># method 2 append from a python dict</span></div><div class="line"><span class="comment"># ref : [pandas.DataFrame.append](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.append.html)</span></div><div class="line">df.append(your_dict, ignore_index=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<ul>
<li>
<p><a href="https://www.zhihu.com/question/36170252" target="_blank" rel="external">python pandas 怎样高效地添加一行数据？</a><br>
简而言之：</p>
<blockquote>
<p>Pandas/numpy structures are fundamentally not suited for efficiently growing. They work best when they are created with a fixed size and stay that way.</p>
</blockquote>
</li>
<li>
<p>add a column<br>
<code>df[1]=np.arange(1,11,2) # add a column of which name is 1</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="add-dict-to-dataframe">add dict to DataFrame</h3>
<ul>
<li>add one-D dict to one line of a DataFrame <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.loc[len(df.index)] = mydict</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="删除-修改">删除/修改</h2>
<ul>
<li>
<p>引用以及修改</p>
<ul>
<li>Dataframe<br>
<code>df[1] # columns=1的列</code><br>
<code>df[1:2] # 第二行</code><br>
<code>df.iloc[-8:, 1:] # 取倒数八行、不要第一列</code><br>
<code>df.iat[1,1] #选择已知标量（单个元素）</code></li>
<li>Series: 修改<br>
<code>s3 = pd.Series( [3,5,7], index = list('ABC'),name='s3' )</code>, 那么修改方法为：<br>
<code>s3['B'] = 6</code>或者<code>s3[1] = 6</code><br>
即：通过label和index都可以修改</li>
</ul>
</li>
<li>
<p>drop</p>
<ul>
<li>Dataframe: pandas的DataFrame对象如何清空？<br>
<code>df.drop(df.index,inplace=True)</code></li>
<li>Series: drop以及重新添加<br>
<code>s3.drop('A')</code><br>
<code>s3.index.append(pd.Index(['A']) )</code></li>
</ul>
</li>
</ul>
<h2 id="statistic-arithmetic-operation">statistic/arithmetic operation</h2>
<ul>
<li>
<p>add/sub/mul/div/floordiv/pow/mod/</p>
<ul>
<li><code>fill_value</code><br>
Note: It substitute a <code>fill_value</code> for missing data <strong>in one of the inputs.</strong></li>
<li>div<br>
div, divide is the same as truediv<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup><br>
<code>df/a</code> is the same as <code>df.truediv(a)</code>, then <code>a/df</code> is the same as <code>df.truediv(a)</code>.</li>
</ul>
</li>
<li>
<p><code>info, describe # describe: basic statistical information of dataset.</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pd.options.display.float_format = &apos;&#123;:,.3f&#125;&apos;.format # Limit output to 3 decimal places.</div><div class="line">df.describe()</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>sum, mean, std, corr # correlation between two columns(pearson correlation)</code><br>
注意std默认是除以N-1而不是N的；</p>
</li>
<li>
<p><code>min, max, median, idxmin, idxmax # Index of the largest value</code></p>
</li>
</ul>
<h1 id="写入-读取">写入/读取</h1>
<h2 id="写">写</h2>
<ul>
<li><code>df.to_csv('D:\\a.csv', sep=',', header=True, index=True)</code></li>
<li><code>df.to_json('D:\\a.json')</code></li>
<li><code>df.to_html('D:\\a.html')</code></li>
<li><code>df.to_sql('tableName', con=dbcon, flavor='mysql')</code></li>
<li><code>df.to_dict</code></li>
</ul>
<h2 id="读">读</h2>
<ul>
<li>直接读取html中的表格<br>
<code>pd.read_html(&quot;https://coinmarketcap.com/currencies/bitcoin/&quot;)</code></li>
<li><code>df.from_dict</code></li>
</ul>
<h1 id="数据清洗-分析">数据清洗、分析</h1>
<h2 id="清洗">清洗</h2>
<ul>
<li><code>drop(), dropna(), fillna(), replace()</code>, 重复值处理: <code>duplicated()，unique()，drop_duplictad()</code></li>
<li>转格式<br>
<code>pd.to_datetime</code>() : Convert argument to datetime, so you can <code>df.sort_values()</code> by time.</li>
</ul>
<h2 id="分析">分析</h2>
<ul>
<li>groupby<br>
<code>a6214[&quot;Value_IN(ETH)&quot;].groupby(a6214[&quot;From&quot;]) # 按照转账人分类，得到的结果为SeriesGroupBy类型</code></li>
</ul>
<h1 id="显示">显示</h1>
<h2 id="打印dataframe设置">打印dataframe设置</h2>
<ul>
<li>完整打印table<br>
当一行较长时，完整显示一行：<code>'display.max_rows', None, 'display.max_columns', None</code><br>
不自动换行：<code>expand_frame_repr', False</code> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">conn = sqlite3.connect(<span class="string">'./order_record.db'</span>, detect_types=sqlite3.PARSE_DECLTYPES)</div><div class="line"><span class="keyword">with</span> pd.option_context(<span class="string">'display.max_rows'</span>, <span class="keyword">None</span>, <span class="string">'display.max_columns'</span>, <span class="keyword">None</span>, <span class="string">'expand_frame_repr'</span>, <span class="keyword">False</span>):  <span class="comment"># more options can be specified also</span></div><div class="line">    print(pd.read_sql_query(<span class="string">"SELECT * FROM ALL_ORDER"</span>, conn))</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="显示的精度">显示的精度</h2>
<p><code>pandas.set_option(&quot;display.precision&quot;, 10)</code></p>
<h1 id="reference">reference</h1>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://codingpy.com/article/a-quick-intro-to-pandas/" target="_blank" rel="external">十分钟快速入门 Pandas</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="http://pandas.pydata.org/pandas-docs/stable/10min.html" target="_blank" rel="external">10 Minutes to pandas</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="http://pda.readthedocs.io/en/latest/chp5.html" target="_blank" rel="external">indexnext |previous |Python For Data Analysis: Pandas入门</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://stackoverflow.com/questions/48654181/difference-between-dataframe-div-and-dataframe-divide-in-pandas" target="_blank" rel="external">difference between dataframe div and dataframe divide in pandas</a> <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据分析神器Pandas。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://timchen314.com/categories/python/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
      <category term="note" scheme="http://timchen314.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://timchen314.com/flask/"/>
    <id>http://timchen314.com/flask/</id>
    <published>2018-02-04T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="quick-start"><a href="http://flask.pocoo.org/docs/1.0/quickstart/#quickstart" target="_blank" rel="external">quick start</a></h2>
<p>###Unique URLs / Redirection Behavior<br>
The following two rules differ in their use of a trailing slash.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@app.route(&apos;/projects/&apos;)</div><div class="line">def projects():</div><div class="line">    return &apos;The project page&apos;</div><div class="line">@app.route(&apos;/about&apos;)</div><div class="line">def about():</div><div class="line">    return &apos;The about page&apos;</div></pre></td></tr></table></figure>
<p>The canonical URL for the projects endpoint has a trailing slash. It’s similar to a folder in a file system. If you access the URL without a trailing slash, Flask redirects you to the canonical URL with the trailing slash.</p>
<p>The canonical URL for the about endpoint does not have a trailing slash. It’s similar to the pathname of a file. Accessing the URL with a trailing slash produces a 404 “Not Found” error. This helps keep URLs unique for these resources, which helps search engines avoid indexing the same page twice.</p>
<h1 id="reference">reference</h1>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;&lt;a href=&quot;http://flask.pocoo.org/docs/1.0/quickstart/#quickstart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;quick
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sqlite note</title>
    <link href="http://timchen314.com/sqlite/"/>
    <id>http://timchen314.com/sqlite/</id>
    <published>2018-02-04T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="基本概念">基本概念</h1>
<p>ref: <a href="http://www.runoob.com/sqlite/sqlite-syntax.html" target="_blank" rel="external">runoob sql</a></p>
<ul>
<li>
<p>大小写敏感性</p>
<blockquote>
<p>有个重要的点值得注意，SQLite 是不区分大小写的，但也有一些命令是大小写敏感的，比如 GLOB 和 glob 在 SQLite 的语句中有不同的含义。</p>
</blockquote>
</li>
<li>
<p>注释</p>
<blockquote>
<p>SQLite 注释是附加的注释，可以在 SQLite 代码中添加注释以增加其可读性，他们可以出现在任何空白处，包括在表达式内和其他 SQL 语句的中间，但它们不能嵌套。<br>
SQL 注释以两个连续的 “-” 字符（ASCII 0x2d）开始，并扩展至下一个换行符（ASCII 0x0a）或直到输入结束，以先到者为准。<br>
您也可以使用 C 风格的注释，以 “/<em>&quot; 开始，并扩展至下一个 &quot;</em>/” 字符对或直到输入结束，以先到者为准。</p>
</blockquote>
</li>
</ul>
<h2 id="main-database">main database<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h2>
<blockquote>
<p>The “.databases” command shows a list of all databases open in the current connection. There will always be at least 2. The first one is “main”, the original database opened. The second is “temp”, the database used for temporary tables. There may be additional databases listed for databases attached using the ATTACH statement. The first output column is the name the database is attached with, and the second column is the filename of the external file.</p>
</blockquote>
<p>如果导入同一个库两次，<code>.table</code>会显示什么？</p>
   <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sqlite&gt; .open test.db</div><div class="line">sqlite&gt; .database</div><div class="line">main: /Users/Aether/Documents/hexo_file/source/_posts/test.db</div><div class="line">sqlite&gt; ATTACH DATABASE 'test.db' as 'foo';</div><div class="line">sqlite&gt; .databases</div><div class="line">main: /Users/Aether/Documents/hexo_file/source/_posts/test.db</div><div class="line">foo: /Users/Aether/Documents/hexo_file/source/_posts/test.db</div><div class="line">sqlite&gt; .table</div><div class="line">COMPANY      foo.COMPANY</div></pre></td></tr></table></figure>
<h2 id="回滚日志">回滚日志<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h2>
<p>如果崩溃或断电发生在事务的中间某时刻，则在硬盘上会留有回滚日志。在下次另外一个应用程序尝试打开数据库文件时，它会通知存在回滚日志(“热日志”)，并使用日志中的信息来把数据库恢复到未完成事务开始之前的状态。这就是SQLite实现原子提交的基本原理。</p>
<h2 id="temp">TEMP<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2]</a></sup></h2>
<p>临时数据库文件总是在数据库连接关闭时自动删除。</p>
<h2 id="字段类型">字段类型</h2>
<blockquote>
<p>SQLite是无类型的. 这意味着你可以保存任何类型的数据到你所想要保存的任何表的任何列中, 无论这列声明的数据类型是什么(只有自动递增Integer Primary Key才有用). 对于SQLite来说对字段不指定类型是完全有效的.<br>
建表时声明啥类型或者不声明类型都可以,也就意味着创表语句可以这么写:create table if not exists  t_student(name, age);</p>
</blockquote>
<blockquote>
<p>一般数据采用的固定的静态数据类型，而SQLite采用的是动态数据类型，会根据存入值自动判断。SQLite的数据存储类型有: integer (有符号整形), real (浮点值,以8字节IEEE浮点数存放), text(文本字符串,使用数据库编码UTF-8，UTF-16BE或者UTF-16LE存放), blob(是一个数据块,完全按照输入存放; 二进制数据,比如: 文件) 布尔类型 Sqlite没有单独的布尔存储类型，它使用INTEGER作为存储类型，0为false，1为true</p>
</blockquote>
<p><code>IS_OPENING BOOLEAN NOT NULL CHECK (IS_OPENING IN (0,1))</code></p>
<blockquote>
<p>NUMERIC类型：当文本数据被插入到亲缘性为NUMERIC的字段中时，如果转换操作不会导致数据信息丢失以及完全可逆，那么SQLite就会将该文本数据转换为INTEGER或REAL类型的数据，如果转换失败，SQLite仍会以TEXT方式存储该数据。对于NULL或BLOB类型的新数据，SQLite将不做任何转换，直接以NULL或BLOB的方式存储该数据。需要额外说明的是，对于浮点格式的常量文本，如&quot;30000.0&quot;，如果该值可以转换为INTEGER同时又不会丢失数值信息，那么SQLite就会将其转换为INTEGER的存储方式。</p>
</blockquote>
<blockquote>
<p>Date 与 Time 数据类型<br>
SQLite 没有一个单独的用于存储日期和/或时间的存储类，但 SQLite 能够把日期和时间存储为 TEXT、REAL 或 INTEGER 值。</p>
</blockquote>
<p>虽然可以不写类型，但为了以后方便理解，最好还是写上。</p>
<h2 id="sqlite-master-sqlite-temp-master">sqlite_master &amp; sqlite_temp_master</h2>
<p><a href="https://blog.csdn.net/runtime233/article/details/52439881" target="_blank" rel="external">sqlite查询库里所有表名</a><br>
每一个 SQLite 数据库都有一个叫 SQLITE_MASTER 的表， 里面存储着数据库的数据结构（表结构、视图结构、索引结构等），只可以对他使用查询语句<br>
SQLITE_MASTER 表DDL信息如下:<br>
<code>CREATE TABLE sqlite_master (type TEXT,name TEXT,tbl_name TEXT,rootpage INTEGER,sql TEXT);</code></p>
<p><code>SELECT name FROM sqlite_master WHERE type=’table’ ORDER BY name;</code></p>
<ul>
<li>NOTE: ‘TEMP’ is in sqlite_temp_master</li>
</ul>
<h2 id="sql语句的种类">SQL语句的种类</h2>
<ul>
<li>数据定义语句: (DDL:Data Definition Language)<br>
包括create和drop等操作;   例如:在数据库中创建新表或删除表(create table或drop table)</li>
<li>数据操作语句(DML:Data Manipulation Language)<br>
包括insert、update、delete等操作(添加、修改(更新)、删除表中的数据)</li>
<li>数据查询语句(DQL:Data Query Language)<br>
可以用于查询获得表中的数据,  关键字select是DQL(也是所有SQL)用得最多的操作     其他DQL常用的关键字有where,order by,group by和having</li>
</ul>
<h2 id="transaction">transaction</h2>
<ul>
<li>BEGIN TRANSACTION：开始事务处理。</li>
<li>COMMIT：保存更改，或者可以使用 END TRANSACTION 命令。</li>
<li>ROLLBACK：回滚所做的更改。</li>
<li><strong>By default, each INSERT statement is its own transaction. But if you surround multiple INSERT statements with BEGIN…COMMIT then all the inserts are grouped into a single transaction. The time needed to commit the transaction is amortized over all the enclosed insert statements and so the time per insert statement is greatly reduced.</strong></li>
</ul>
<h3 id="about-savepoint">about Savepoint</h3>
<p>可以参考：<a href="https://blog.csdn.net/pfysw/article/details/80491463" target="_blank" rel="external">SQLite3源码学习（29） 用户事务和Savepoint</a></p>
<h2 id="vacuum">VACUUM</h2>
<p>通过复制主数据库中的内容到一个临时数据库文件，然后清空主数据库，并从副本中重新载入原始的数据库文件。这消除了空闲页，把表中的数据排列为连续的，另外会清理数据库文件结构。(ct: sqlite是以树结构存储数据的)</p>
<h2 id="约束">约束</h2>
<blockquote>
<p>NOT NULL 约束：确保某列不能有 NULL 值。<br>
DEFAULT 约束：当某列没有指定值时，为该列提供默认值。<br>
UNIQUE 约束：确保某列中的所有值是不同的。<br>
PRIMARY Key 约束：唯一标识数据库表中的各行/记录。<br>
CHECK 约束：CHECK 约束确保某列中的所有值满足一定条件。</p>
</blockquote>
<blockquote>
<p>SQLite 支持 ALTER TABLE 的有限子集。重命名列，删除一列，或从一个表中添加或删除约束都是不可能的!!!</p>
</blockquote>
<h1 id="操作">操作</h1>
<h2 id="dot-command">dot command</h2>
<p>你不能从Python中调用点命令，因为点命令是特定于命令行shell工具的。</p>
<ul>
<li><code>.schema table_name</code>: 列出创建表的语句。<code>.sch</code>也可以</li>
<li><code>.tables</code>: 列出所有表名</li>
<li><code>.headers on</code> 列出表头(column names)</li>
</ul>
<h2 id="command-line">command line</h2>
<p><code>$sqlite3 testDB.db .dump &gt; testDB.sql</code></p>
<h2 id="insert">INSERT</h2>
<ul>
<li>insert by python dictionary <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">values = &#123;<span class="string">'title'</span>:<span class="string">'jack'</span>, <span class="string">'type'</span>:<span class="keyword">None</span>, <span class="string">'genre'</span>:<span class="string">'Action'</span>, <span class="string">'onchapter'</span>:<span class="keyword">None</span>,<span class="string">'chapters'</span>:<span class="number">6</span>,<span class="string">'status'</span>:<span class="string">'Ongoing'</span>&#125;</div><div class="line">cur.execute(<span class="string">'INSERT INTO Media (id, title, type, onchapter, chapters, status) VALUES (:id, :title, :type, :onchapter, :chapters, :status);'</span>), values)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="attach">ATTACH</h2>
<p>The ATTACH DATABASE statement adds another database file to the current database connection. Database files that were previously attached can be removed using the DETACH DATABASE command.</p>
<h2 id="view-视图">VIEW(视图)</h2>
<p>SQLite 视图是只读的，因此可能无法在视图上执行 DELETE、INSERT 或 UPDATE 语句。但是可以在视图上创建一个触发器，当尝试 DELETE、INSERT 或 UPDATE 视图时触发，需要做的动作在触发器内容中定义。</p>
<p>最简单的视图：<br>
<code>CREATE VIEW testview AS SELECT * FROM testtable WHERE first_col &gt; 100;</code>    <br>
    <br>
创建临时视图：<br>
<code>sqlite&gt; CREATE TEMP VIEW tempview AS SELECT * FROM testtable WHERE first_col &gt; 100;</code></p>
<p>“IF NOT EXISTS”<br>
<code>sqlite&gt; CREATE VIEW IF NOT EXISTS testview AS SELECT * FROM testtable WHERE first_col &gt; 100;</code></p>
<p>删除视图<br>
<code>sqlite&gt; DROP VIEW IF EXISTS testview;</code></p>
<h2 id="alter-table">ALTER TABLE</h2>
<p>只有两个用法：</p>
<ol>
<li>重命名表<br>
<code>ALTER TABLE database_name.table_name RENAME TO new_table_name;</code></li>
<li>在已有的表中添加列<br>
<code>ALTER TABLE database_name.table_name ADD COLUMN column_def...;</code><br>
注意，新添加的列是以 NULL 值来填充的</li>
</ol>
<h2 id="select">select</h2>
<ul>
<li>
<p>日期表达式<br>
返回当前系统日期和时间值，注意是<strong>UTC+0时间</strong><br>
<code>SELECT CURRENT_TIMESTAMP;</code></p>
</li>
<li>
<p>例子<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sqlite&gt; SELECT * FROM COMPANY WHERE AGE &gt;= 25 OR SALARY &gt;= 65000;</div><div class="line">sqlite&gt;  SELECT * FROM COMPANY WHERE AGE IS NOT NULL;</div><div class="line">sqlite&gt; SELECT * FROM COMPANY WHERE AGE NOT IN ( 25, 27 ); /* 既不是 25 也不是 27 的所有记录 */</div><div class="line">sqlite&gt; SELECT * FROM COMPANY WHERE AGE BETWEEN 25 AND 27;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="update">UPDATE</h2>
   <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sqlite&gt; UPDATE COMPANY SET ADDRESS = 'Texas' WHERE ID = 6;</div><div class="line">sqlite&gt; UPDATE COMPANY SET ADDRESS = 'Texas', SALARY = 20000.00; /* 修改所有 */</div></pre></td></tr></table></figure>
<h3 id="update-multiple-rows">UPDATE multiple rows</h3>
<p>参考：<br>
<a href="https://stackoverflow.com/questions/11563869/update-multiple-rows-with-different-values-in-a-single-sql-query" target="_blank" rel="external">Update multiple rows with different values in a single SQL query</a><br>
<a href="https://bbs.csdn.net/topics/392185187" target="_blank" rel="external">sqlite update 多行</a></p>
<h2 id="delete">DELETE</h2>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sqlite&gt; DELETE FROM COMPANY WHERE ID = 7;</div><div class="line">sqlite&gt; DELETE FROM COMPANY; /* 删除所有 */</div></pre></td></tr></table></figure>
<h2 id="字符串匹配">字符串匹配</h2>
<p>GLOB大小写敏感；LIKE大小写不敏感</p>
<h3 id="glob">GLOB</h3>
<ul>
<li>星号（*）<br>
代表零个、一个或多个数字或字符。</li>
<li>问号（?）<br>
代表一个单一的数字或字符。这些符号可以被组合使用。</li>
</ul>
<h3 id="like">LIKE</h3>
<ul>
<li>百分号（%）<br>
代表零个、一个或多个数字或字符。</li>
<li>下划线（_）<br>
代表一个单一的数字或字符。这些符号可以被组合使用。</li>
</ul>
<h2 id="python">python</h2>
<h3 id="connection">connection<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h3>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Fill the table</span></div><div class="line">persons = [</div><div class="line">    (<span class="string">"Hugo"</span>, <span class="string">"Boss"</span>),</div><div class="line">    (<span class="string">"Calvin"</span>, <span class="string">"Klein"</span>)</div><div class="line">    ]</div><div class="line">con.executemany(<span class="string">"insert into person(firstname, lastname) values (?, ?)"</span>, persons)</div><div class="line"></div><div class="line"><span class="comment"># Print the table contents</span></div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> con.execute(<span class="string">"select firstname, lastname from person"</span>):</div><div class="line">    print(row)</div><div class="line">print(<span class="string">"I just deleted"</span>, con.execute(<span class="string">"delete from person"</span>).rowcount, <span class="string">"rows"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>
<p>security<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup><br>
Use <code>?</code> as a placeholder!<br>
Use Python’s string operations to assemble a query makes program vulnerable to an SQL injection attack</p>
</li>
<li>
<p>if connection is not closed</p>
<blockquote>
<p>When the connection is closed explicitly by code or implicitly by program exit then any outstanding transaction is rolled back.</p>
</blockquote>
</li>
</ul>
<h4 id="connection-as-a-context-manager">connection as a context manager<sup class="footnote-ref"><a href="#fn4" id="fnref4:1">[4]</a></sup></h4>
<blockquote>
<p>Connection objects can be used as context managers that automatically commit or rollback transactions. In the event of an exception, the transaction is rolled back; otherwise, the transaction is committed.</p>
</blockquote>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Successful, con.commit() is called automatically afterwards</span></div><div class="line"><span class="keyword">with</span> con:</div><div class="line">    con.execute(<span class="string">"insert into person(firstname) values (?)"</span>, (<span class="string">"Joe"</span>,))</div><div class="line"><span class="comment"># con.rollback() is called after the with block finishes with an exception!</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">with</span> con:</div><div class="line">        con.execute(<span class="string">"insert into person(firstname) values (?)"</span>, (<span class="string">"Joe"</span>,))</div><div class="line"><span class="keyword">except</span> sqlite3.IntegrityError:</div><div class="line">    print(<span class="string">"couldn't add Joe twice"</span>)</div></pre></td></tr></table></figure>
<h3 id="cursor">cursor</h3>
<p>FIRST OF ALL: There’re two distinct ‘cursor’ concept:</p>
<ul>
<li>
<p>In standard SQL, it’s like concept of iterator<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>:</p>
<blockquote>
<p>In computer science and technology, a database cursor is a control structure that enables traversal over the records in a database. Cursors facilitate subsequent processing in conjunction with the traversal, such as retrieval, addition and removal of database records. The database cursor characteristic of traversal makes cursors akin to the programming language concept of iterator.</p>
</blockquote>
</li>
<li>
<p>In sqlite module of python, it’s basically the same with connection. Or say, connection is a shortcut of cursor (make things easier).<sup class="footnote-ref"><a href="#fn6" id="fnref6:1">[6]</a></sup></p>
<blockquote>
<p>Connection.execute<br>
This is a nonstandard shortcut that creates a cursor object by calling the cursor() method, calls the cursor’s execute() method with the parameters given, and returns the cursor.</p>
</blockquote>
<blockquote>
<p>As long as you use the standard methods of the Cursor object, you can be sure that if you switch to another database implementation that follows the above specification, your code will be fully portable. Perhaps you will only need to change the import line.</p>
</blockquote>
</li>
</ul>
<h4 id="cursor-in-sqlite-module-of-python">cursor in sqlite module of python<sup class="footnote-ref"><a href="#fn6" id="fnref6:2">[6]</a></sup></h4>
<blockquote>
<p>Cursor objects allow you to keep track of which result set is which, since it’s possible to run multiple queries before you’re done fetching the results of the first.</p>
</blockquote>
<h3 id="commit">commit</h3>
<p>ref: <a href="https://stackoverflow.com/questions/36243538/python-sqlite3-how-often-do-i-have-to-commit" target="_blank" rel="external">how often do I have to commit?</a></p>
<ul>
<li>
<p>What concurrent readers see</p>
<blockquote>
<p>When a change to the database is committed, it becomes visible for other connections. Unless it is committed, it remains visible only locally for the connection to which the change was done. Because of the limited concurrency features of sqlite, the database can only be read while a transaction is open.</p>
</blockquote>
</li>
<li>
<p>balance between Performance and Exclusively locking the database</p>
<blockquote>
<p>Actually, SQLite will easily do 50,000 or more INSERT statements per second on an average desktop computer. But it will only do a few dozen transactions per second.</p>
</blockquote>
</li>
<li>
<p>sqlite3 in python<br>
By default, the ‘isolation_level’ parameter of a connection is set as DEFERRED.<br>
Set ‘isolation_level’ to ‘None’, this will leave the underlying sqlite3 library operating in autocommit mode. (autocommit mode means that statements that modify the database take effect immediately.)</p>
</li>
</ul>
<h3 id="read-datetime-datetime-from-sqlite3">read datetime.datetime from sqlite3<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></h3>
<p>for more about read datetime.datetime or even adapter, see doc: <a href="https://docs.python.org/3/library/sqlite3.html#default-adapters-and-converters" target="_blank" rel="external">DB-API 2.0 interface for SQLite databases</a></p>
<p>建立connect时加上<code>detect_types=sqlite3.PARSE_DECLTYPES</code>, 就可以直接读写datetime类型:</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; db = sqlite3.connect(<span class="string">'test.db'</span>, detect_types=sqlite3.PARSE_DECLTYPES)</div><div class="line">   &gt;&gt;&gt; c = db.cursor()</div><div class="line">   &gt;&gt;&gt; c.execute(<span class="string">'create table foo (bar integer, baz timestamp)'</span>)</div><div class="line">&lt;sqlite3.Cursor object at <span class="number">0x40fc50</span>&gt;</div><div class="line">   &gt;&gt;&gt; c.execute(<span class="string">'insert into foo values(?, ?)'</span>, (<span class="number">23</span>, datetime.datetime.now()))</div></pre></td></tr></table></figure>
<h4 id="using-adapters-to-store-additional-python-types">Using adapters to store additional Python types<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></h4>
<ul>
<li>
<p>simple example<br>
read &amp; write boolean directly:</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sqlite3.register_adapter(bool, int)</div><div class="line">sqlite3.register_converter(<span class="string">"BOOLEAN"</span>, <span class="keyword">lambda</span> v: bool(int(v)))</div></pre></td></tr></table></figure>
</li>
<li>
<p>define <code>__conform__</code> in your class</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self.x, self.y = x, y</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__conform__</span><span class="params">(self, protocol)</span>:</span></div><div class="line">        <span class="keyword">if</span> protocol <span class="keyword">is</span> sqlite3.PrepareProtocol:</div><div class="line">            <span class="keyword">return</span> <span class="string">"%f;%f"</span> % (self.x, self.y)</div></pre></td></tr></table></figure>
</li>
<li>
<p>register an adapter callable</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">adapt_point</span><span class="params">(point)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"%f;%f"</span> % (point.x, point.y)</div><div class="line">sqlite3.register_adapter(Point, adapt_point)</div></pre></td></tr></table></figure>
</li>
<li>
<p>datatime.date and datetime.datetime can be directly written to sqlite3</p>
<blockquote>
<p>sqlite3 module has two default adapters for Python’s built-in datetime.date and datetime.datetime types.</p>
</blockquote>
</li>
</ul>
<h3 id="pragma">PRAGMA</h3>
<p><code>cur.execute(&quot;PRAGMA table_info('my_table_name')&quot;).fetchall()</code><br>
返回值是a list of tuple; tuple分别含有下列元素：<br>
cid name type notnull dflt_value pk<br>
e.g.:<br>
<code>[(0, 'ORDER_IN_PAIR_UTCTIME', 'TIMESTAMP', 1, None, 0)]</code></p>
<h3 id="dot-command-in-python">dot command in python</h3>
<p>First of all, dot command is just for sql shell.</p>
<ul>
<li><code>.schema</code> – corresponding to PRAGMA</li>
</ul>
<h3 id="参数占位">参数占位</h3>
<h1 id="best-practice">Best Practice</h1>
<h2 id="don-t-use-autoincrement">Don’t use autoincrement<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup></h2>
<ol>
<li>If ‘WITHOUT ROWID’ option isn’t specified, you always get an implicit auto increment column called rowid.</li>
<li>If you don’t specify the rowid value or use a NULL value when you insert a new row, SQLite assigns an integer that is one larger than the largest rowid in the table.</li>
<li>The maximum value of rowid column is 9223372036854775807.</li>
<li>diference between ‘autoincrement’ and ‘rowid’: ‘autoincrement’ only complains when rowid is overflow.</li>
</ol>
<h1 id="reference">reference</h1>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://stackoverflow.com/questions/7313190/how-to-name-an-sqlite-database-so-it-doesnt-have-the-default-name-of-main" target="_blank" rel="external">How to name an SQLite database so it doesn’t have the default name of main?</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://blog.csdn.net/zhuhongshu/article/details/61202108" target="_blank" rel="external">SQLite剖析之临时文件、内存数据库</a> <a href="#fnref2" class="footnote-backref">↩</a> <a href="#fnref2:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="http://www.runoob.com/sqlite/sqlite-where-clause.html" target="_blank" rel="external">SQLite Where 子句</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://docs.python.org/3/library/sqlite3.html#using-sqlite3-efficiently" target="_blank" rel="external">using-sqlite3-efficiently</a> <a href="#fnref4" class="footnote-backref">↩</a> <a href="#fnref4:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="https://docs.python.org/3.7/library/sqlite3.html" target="_blank" rel="external">sqlite3 — DB-API 2.0 interface for SQLite databases</a> <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
<li id="fn6" class="footnote-item"><p><a href="https://stackoverflow.com/questions/6318126/why-do-you-need-to-create-a-cursor-when-querying-a-sqlite-database/30464446" target="_blank" rel="external">Why do you need to create a cursor when querying a sqlite database?</a> <a href="#fnref6" class="footnote-backref">↩</a> <a href="#fnref6:1" class="footnote-backref">↩</a> <a href="#fnref6:2" class="footnote-backref">↩</a></p>
</li>
<li id="fn7" class="footnote-item"><p><a href="https://stackoverflow.com/questions/1829872/how-to-read-datetime-back-from-sqlite-as-a-datetime-instead-of-string-in-python" target="_blank" rel="external">How to read datetime back from sqlite as a datetime instead of string in Python?</a> <a href="#fnref7" class="footnote-backref">↩</a></p>
</li>
<li id="fn8" class="footnote-item"><p><a href="https://docs.python.org/3/library/sqlite3.html#using-adapters-to-store-additional-python-types-in-sqlite-databases" target="_blank" rel="external">Using adapters to store additional Python types in SQLite databases</a> <a href="#fnref8" class="footnote-backref">↩</a></p>
</li>
<li id="fn9" class="footnote-item"><p><a href="http://www.sqlitetutorial.net/sqlite-autoincrement/" target="_blank" rel="external">SQLite AUTOINCREMENT : Why You Should Avoid Using It</a> <a href="#fnref9" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;基本概念&lt;/h1&gt;
&lt;p&gt;ref: &lt;a href=&quot;http://www.runoob.com/sqlite/sqlite-syntax.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;r
    
    </summary>
    
      <category term="sql" scheme="http://timchen314.com/categories/sql/"/>
    
    
  </entry>
  
  <entry>
    <title>jupyter</title>
    <link href="http://timchen314.com/jupyter/"/>
    <id>http://timchen314.com/jupyter/</id>
    <published>2018-01-16T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="a-tutorial">A Tutorial</h1>
<a id="more"></a>
<h2 id="package-management">package management</h2>
<p>pip只能管理python package，而conda可以管理非python语言的package。</p>
<blockquote>
<p>So Conda is a packaging tool and installer that aims to do more than what pip does; handle library dependencies outside of the Python packages as well as the Python packages themselves.</p>
</blockquote>
<p>曾读到过，对于python package，conda基本就是用的pip。简单讲，如果安装一个包的命令是<code>pip install wanted_package</code>，在conda中<code>conda install wanted_package</code>同样可以安装。</p>
<h3 id="package-for-jupyter">package for jupyter</h3>
<p>Since jupyter is belong to anaconda, package shall be installed by conda if you want use it in jupyter!</p>
<h2 id="pylab-help-info">pylab help info</h2>
<p><code>%pylab?</code><br>
This sentence will give out the ‘help information’ of pylab.<br>
Note that %pylab will be imported!</p>
<h2 id="magics">magics</h2>
<p>Magics come in two kinds:【ct】可以简单理解为单行/多行</p>
<h3 id="line-magics">Line magics</h3>
<p>these are commands prepended by one % character and whose arguments only extend to the end of the current line.</p>
<ul>
<li><code>%run</code>可以从<code>.py</code>和<code>.ipynb</code>文件</li>
</ul>
<h3 id="cell-magics">Cell magics:</h3>
<ul>
<li>Some simple cell magics</li>
</ul>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">%%writefile foo.py</div><div class="line">print(<span class="string">'foo'</span>)</div><div class="line">print(<span class="string">'Equinox'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>Magics for running code under other interpreters<br>
IPython has a %%script cell magic, which lets you run a cell in a subprocess of any interpreter on your system, such as: bash, ruby, perl, zsh, R, etc.<br>
To use it, simply pass a path or shell command to the program you want to run on the %%script line, and the rest of the cell will be run by that script, and stdout/err from the subprocess are captured and displayed.</li>
</ul>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">%%script python2 </div><div class="line">import sys </div><div class="line">print &apos;hello from Python %s&apos; % sys.version</div></pre></td></tr></table></figure>
<ul>
<li>Background Scripts<br>
These scripts can be run in the background, by adding the --bg flag.<br>
When you do this, output is discarded unless you use the --out/err flags to store output as above.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">%%ruby --bg --out ruby_lines</div><div class="line">for n in 1...10</div><div class="line">    sleep 1</div><div class="line">    puts &quot;line #&#123;n&#125;&quot;</div><div class="line">    STDOUT.flush</div><div class="line">end</div></pre></td></tr></table></figure>
<h2 id="shortcut-key">shortcut key</h2>
<p><a href="http://www.jianshu.com/p/72493e81a708" target="_blank" rel="external">Jupyter Notebook 的快捷键</a><br>
<a href="https://gist.github.com/kidpixo/f4318f8c8143adee5b40" target="_blank" rel="external">Keyboard shortcuts</a></p>
<h3 id="command-mode">command mode</h3>
<ul>
<li>
<p><code>ESC</code>: command mode</p>
</li>
<li>
<p><mark>h: 显示快捷键帮助</mark></p>
</li>
<li>
<p><code>Enter</code>: edit mode</p>
</li>
<li>
<p><code>ctrl+enter</code>、<code>shitf+enter</code>: 执行、执行后选中下个单元</p>
</li>
<li>
<p>a/b: 在上/下方插入新单元</p>
</li>
<li>
<p>dd: 删除当前cell</p>
</li>
<li>
<p>m: 设为markdown cell</p>
</li>
<li>
<p>y: 单元转入代码状态</p>
</li>
<li>
<p>3:     设定 3 级标题</p>
</li>
<li>
<p>x/c/v: 剪切/复制/粘贴</p>
</li>
<li>
<p>space/shift+spcae: 向下/上滚动</p>
</li>
<li>
<p>Shift-K/J : 扩大选中上/下方单元</p>
</li>
<li>
<p>合并/分割<br>
shfit + m / shift + ctrl + -</p>
</li>
<li>
<p>cmd + s : safe and Checkpoint</p>
</li>
</ul>
<ul>
<li>restart kernel<br>
00  即在command mode下，</li>
</ul>
<h3 id="edit-mode">edit mode</h3>
<ul>
<li>
<p>alt + 左键: 列模式</p>
</li>
<li>
<p>shift+tab:  补全提示</p>
</li>
<li>
<p><code>ctrl + shift + -</code>: 分割cell</p>
</li>
<li>
<p><code>cmd+[</code> 减小缩进</p>
</li>
</ul>
<h2 id="errors">Errors</h2>
<ul>
<li><code>c.NotebookApp.allow_origin</code> and <code>c.NotebookApp.ip</code> :<br>
They don’t work. Except certain ip, it supposes to be unaccessible when these parameters is set.</li>
</ul>
<h2 id="tips">Tips</h2>
<ul>
<li>change default browser<br>
<code>$ jupyter notebook --generate-config</code><br>
And then in <code>~/.jupyter/jupyter_notebook_config.py</code> file, <code>c.NotebookApp.browser = '</code> should be modified to<br>
<code>c.NotebookApp.browser = 'open -a /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome %s'</code>.</li>
</ul>
<p>2018.07.06: In OS X, the easiest way is modifying the system default browser to Chrome and then jupyter-notebook will use Chrome as default browser.</p>
<ul>
<li>about proxy<br>
**NOTE: proxy extension (such as shadowsocks) will induce error – ERR_EMPTY_RESPONSE **</li>
</ul>
<p>In Chrome, the use of privoxy will lead to a forever loading page. (Maybe it’s because the local http request is transferred by proxy and hence the port is changed to 12333.)<br>
Solution: You can change SS to “自动代理模式” and start jupyter, and then change SS back to “全局代理模式”.</p>
<ul>
<li>
<p>Pretty Display of Varibles</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from IPython.core.interactiveshell import InteractiveShell</div><div class="line">InteractiveShell.ast_node_interactivity = &quot;all&quot;</div></pre></td></tr></table></figure>
</li>
<li>
<p>不让变量输出<br>
结尾加个分号！<code>variable;</code></p>
</li>
<li>
<p>添加目录功能<br>
<code>conda install -c conda-forge jupyter_contrib_nbextensions</code></p>
</li>
<li>
<p>convert to .py file<br>
<code>jupyter nbconvert --to script [YOUR_NOTEBOOK].ipynb</code></p>
</li>
<li>
<p><code>jupyter notebook list</code><br>
Show running notebook</p>
</li>
<li>
<p>add kernel &amp; edit kernel<br>
Add kernel:<br>
<a href="https://stackoverflow.com/questions/28831854/how-do-i-add-python3-kernel-to-jupyter-ipython" target="_blank" rel="external">How do I add python3 kernel to jupyter (IPython)</a><br>
NOTE: Don’t forget to point to a specific python.</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">python3<span class="number">.7</span>-m pip install ipykernel</div><div class="line">python3<span class="number">.7</span> -m ipykernel install --user</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Edit kernel:<br>
<a href="https://forums.fast.ai/t/jupyter-notebook-not-pointing-to-anaconda/6820/3" target="_blank" rel="external">Jupyter notebook not pointing to Anaconda</a></p>
<hr>
<p><a href="http://nbviewer.jupyter.org/github/ipython/ipython/blob/4.0.x/examples/IPython%20Kernel/Cell%20Magics.ipynb" target="_blank" rel="external">source 1</a><br>
<a href="http://ipython.org/ipython-doc/3/notebook/notebook.html#importing-py-files" target="_blank" rel="external">source 2</a></p>
<p><a href="http://liuchengxu.org/pelican-blog/jupyter-notebook-tips.html" target="_blank" rel="external">27 个Jupyter Notebook的小提示与技巧</a></p>
<h1 id="reference">reference</h1>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;a-tutorial&quot;&gt;A Tutorial&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="http://timchen314.com/categories/python/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
      <category term="jupyter" scheme="http://timchen314.com/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>docker note</title>
    <link href="http://timchen314.com/docker/"/>
    <id>http://timchen314.com/docker/</id>
    <published>2018-01-01T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>Official introduction:</p>
<blockquote>
<p>Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications, whether on laptops, data center VMs, or the cloud.</p>
</blockquote>
<p>我认为可以这样介绍：docker是没有性能损失的、打包软件及其运行运行环境(包括系统在内的)的虚拟机。“Build Once, Run Anywhere!”</p>
<ul>
<li><a href="https://hub.docker.com/r/timchen314/galamost3/" target="_blank" rel="external">galamost-3.0.9 docker</a>测试</li>
</ul>
<ol>
<li>完全没有速度损失（docker vs. no-docker in 1080TI: 700 TPS vs. 700±20 TPS; IP: 101）。</li>
<li>即使host上为cuda8.0而docker上为cuda9.0，速度也基本没有损失（docker vs. no-docker in 1080: 513 TPS vs. 533 TPS; IP: 106）。</li>
</ol>
<a id="more"></a>
<h1 id="docker介绍">Docker介绍</h1>
<h2 id="首先-docker不会降低性能"><strong>首先，Docker不会降低性能！</strong></h2>
<ol>
<li>
<p>docker性能(2015年的文章)<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：</p>
<blockquote>
<p>docker利用namespace实现系统环境的隔离；利用Cgroup实现资源限制；<br>
……<br>
docker还存在着以下几个缺点：<br>
1.资源隔离方面不如虚拟机，docker是利用cgroup实现资源限制的，只能限制资源消耗的最大值，而不能隔绝其他程序占用自己的资源。<br>
2.安全性问题。docker目前并不能分辨具体执行指令的用户，只要一个用户拥有执行docker的权限，那么他就可以对docker的容器进行所有操作，不管该容器是否是由该用户创建。比如A和B都拥有执行docker的权限，由于docker的server端并不会具体判断docker cline是由哪个用户发起的，A可以删除B创建的容器，存在一定的安全风险。</p>
</blockquote>
</li>
<li>
<p><a href="https://github.com/NVIDIA/nvidia-docker" target="_blank" rel="external">Docker Engine Utility for NVIDIA GPUs</a><br>
这是nvidia官方支持的docker项目，里面一个issue提到了正常情况下，效率没有损失</p>
</li>
<li>
<p>By default, a container has no resource constraints and can use as much of a given resource as the host’s kernel scheduler will allow.<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
</li>
</ol>
<h2 id="docker在web开发中得使用流程是怎样的？">docker在web开发中得使用流程是怎样的？<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></h2>
<h3 id="使用docker的正确姿势">使用Docker的正确姿势</h3>
<p>Tomcat+Mysql,怎么做？<br>
我们构建两个镜像，一个仅安装Tomcat并部署我们的app，另一个仅安装MySQL，然后启动这两个镜像，得到两个容器，再利用Docker的容器互联技术将二者连接(Docker的容器是通过http连接的)。</p>
<h2 id="docker原理的简介：">docker原理的简介：</h2>
<h3 id="基础介绍">基础介绍</h3>
<ul>
<li>
<p>原理<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p>
<blockquote>
<p>让某些进程在彼此隔离的命名空间中运行。大家虽然都共用一个内核和某些运行时环境（例如一些系统命令和系统库），但是彼此却看不到，都以为系统中只有自己的存在。这种机制就是容器（Container），利用命名空间来做权限的隔离控制，利用 cgroups 来做资源分配。</p>
</blockquote>
</li>
<li>
<p>灵剑</p>
<blockquote>
<p>docker可以使用docker build工具链将应用和所有依赖整个安装到镜像中，部署的时候直接启动容器就是一个正确运行的服务了。docker build使用Dockerfile，Dockerfile是一个文本文件，相当于一个脚本，可以在CI系统中自动执行，做持续集成、持续部署很容易，build、test成功后直接替换线上的镜像就行。从原理上来说，docker并不是一个完全独立的虚拟化环境，而是一个有独立namespace的进程，所以启动开销就跟直接在物理机上启动服务差不多，但是保证了环境隔离。</p>
<p>作者：灵剑<br>
链接：<a href="https://www.zhihu.com/question/51134842/answer/189312743" target="_blank" rel="external">https://www.zhihu.com/question/51134842/answer/189312743</a><br>
来源：知乎<br>
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
</li>
<li>
<p>Docker技术架构图<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup><br>
<img src="https://pic4.zhimg.com/50/v2-385d2404a0ea9dd37c00b445b3168b96_hd.jpg" alt="image"></p>
<blockquote>
<p>从Docker依赖的底层技术来看，Docker原生态是不能直接在Windows平台上运行的，只支持linux系统，原因是Docker依赖linux kernel三项最基本的技术,namespaces充当隔离的第一级，是对Docker容器进行隔离，让容器拥有独立的hostname,ip,pid，同时确保一个容器中运行一个进程而且不能看到或影响容器外的其它进程;Cgroups是容器对使用的宿主机资源进行核算并限制的关键功能。<br>
比如CPU,内存,磁盘等，union FS主要是对镜像也就是image这一块作支持，采用copy-on-write技术，让大家可以共用某一层，对于某些差异层的话就可以在差异的内存存储，Libcontainer是一个库，是对上面这三项技术做一个封装。</p>
</blockquote>
</li>
<li>
<p>rootfs<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup><br>
<img src="https://pic1.zhimg.com/50/v2-e7bf9fbb488309f38864cac909a022a5_hd.jpg" alt="image"></p>
<blockquote>
<p>内核空间是 kernel，Linux 刚启动时会加载 bootfs 文件系统，之后 bootfs 会被卸载掉。<br>
用户空间的文件系统是 rootfs，包含我们熟悉的 /dev, /proc, /bin 等目录。<br>
对于 base 镜像来说，底层直接用 Host 的 kernel，自己只需要提供 rootfs 就行了。<br>
而对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令、工具和程序库就可以了。相比其他 Linux 发行版，CentOS 的 rootfs 已经算臃肿的了，alpine 还不到 10MB。<br>
这里需要说明的是：</p>
</blockquote>
</li>
</ul>
<ol>
<li>base 镜像只是在用户空间与发行版一致，kernel 版本与发行版是不同的。<br>
例如 CentOS 7 使用 3.x.x 的 kernel，如果 Docker Host 是 Ubuntu 16.04（比如我们的实验环境），那么在 CentOS 容器中使用的实际是是 Host 4.x.x 的 kernel。</li>
<li>容器只能使用 Host 的 kernel，并且不能修改。</li>
</ol>
<ul>
<li><mark>writable container</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6:1">[6]</a></sup><br>
<img src="https://pic1.zhimg.com/50/v2-9496fbb036445cc557f95f657c5baea8_hd.jpg" alt="image">
<blockquote>
<p>当容器启动时，一个新的可写层被加载到镜像的顶部。<br>
这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。<br>
所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。<br>
只有容器层是可写的，容器层下面的所有镜像层都是只读的。<br>
下面我们深入讨论容器层的细节。<br>
镜像层数量可能会很多，所有镜像层会联合在一起组成一个统一的文件系统。如果不同层中有一个相同路径的文件，比如 /a，上层的 /a 会覆盖下层的 /a，也就是说用户只能访问到上层中的文件 /a。在容器层中，用户看到的是一个叠加之后的文件系统。</p>
</blockquote>
</li>
</ul>
<ol>
<li>添加文件 在容器中创建文件时，新文件被添加到容器层中。</li>
<li>读取文件 在容器中读取某个文件时，Docker 会从上往下依次在各镜像层中查找此文件。一旦找到，立即将其复制到容器层，然后打开并读入内存。</li>
<li>修改文件 在容器中修改已存在的文件时，Docker 会从上往下依次在各镜像层中查找此文件。一旦找到，立即将其复制到容器层，然后修改之。<br>
删除文件 在容器中删除文件时，Docker 也是从上往下依次在镜像层中查找此文件。找到后，会在容器层中记录下此删除操作。</li>
<li>只有当需要修改时才复制一份数据，这种特性被称作 Copy-on-Write。可见，容器层保存的是镜像变化的部分，不会对镜像本身进行任何修改。</li>
</ol>
<h3 id="技术细节">技术细节</h3>
<ul>
<li>
<p>runtime/runc<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></p>
<blockquote>
<p>容器 runtime<br>
runtime 是容器真正运行的地方。runtime 需要跟操作系统 kernel 紧密协作，为容器提供运行环境。<br>
如果大家用过 Java，可以这样来理解 runtime 与容器的关系：<br>
Java 程序就好比是容器，JVM 则好比是 runtime。JVM 为 Java 程序提供运行环境。同样的道理，容器只有在 runtime 中才能运行。<br>
lxc、runc 和 rkt 是目前主流的三种容器 runtime。<br>
lxc 是 Linux 上老牌的容器 runtime。Docker 最初也是用 lxc 作为 runtime。<br>
runc 是 Docker 自己开发的容器 runtime，符合 oci 规范，也是现在 Docker 的默认 runtime。<br>
rkt 是 CoreOS 开发的容器 runtime，符合 oci 规范，因而能够运行 Docker 的容器。</p>
</blockquote>
</li>
<li>
<p>image增量存储、类似git</p>
</li>
</ul>
<h2 id="概念">概念</h2>
<p>可以参考官方<a href="https://docs.docker.com/glossary/?term=layer" target="_blank" rel="external">Docker glossary</a></p>
<ul>
<li>
<p>Registry<br>
即注册服务。注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像</p>
</li>
<li>
<p>Dockerfile<br>
告诉docker build命令应该执行哪些操作。</p>
</li>
<li>
<p>NAMES<br>
自动分配的容器名称，可视为数字ID的昵称</p>
</li>
<li>
<p>layer</p>
<blockquote>
<p>In an image, a layer is modification to the image, represented by an instruction in the Dockerfile. Layers are applied in sequence to the base image to create the final image. When an image is updated or rebuilt, only layers that change need to be updated, and unchanged layers are cached locally. This is part of why Docker images are so fast and lightweight. The sizes of each layer add up to equal the size of the final image.</p>
</blockquote>
<ul>
<li>在 Dockerfile 文件中写入指令，每个指令都在映像上生成一个新的层。Docker 限制每个映像最多有 127 层，因此，要尽量优化映像层数。</li>
<li>During the ‘build’, the image is generated layer by layer. If bugs are encountered, you can start the toppest correct layer and debug the bug layer.</li>
</ul>
</li>
<li>
<p>构建缓存<sup class="footnote-ref"><a href="#fn4" id="fnref4:1">[4]</a></sup></p>
<blockquote>
<p>在执行每条指令之前，Docker 都会在缓存中查找是否已经存在可重用的镜像，如果有就使用现存的镜像。如果你不想在构建过程中使用缓存，你可以在 docker build 命令中使用 --no-cache=true 选项。遵循的基本规则如下：<br>
从一个基础镜像开始（FROM 指令指定），下一条指令将和该基础镜像的所有子镜像进行匹配，检查这些子镜像被创建时使用的指令是否和被检查的指令完全一样。如果不是，则缓存失效。<br>
然而，有些指令需要更多的检查和解释。<br>
对于 ADD 和 COPY 指令，镜像中对应文件的内容也会被检查，每个文件都会计算出一个校验和。文件的最后修改时间和最后访问时间不会纳入校验。在缓存的查找过程中，会将这些校验和和已存在镜像中的文件校验和进行对比。如果文件有任何改变，比如内容和元数据，则缓存失效。<br>
除了 ADD 和 COPY 指令，缓存匹配过程不会查看临时容器中的文件来决定缓存是否匹配。例如，当执行完 RUN apt-get -y update 指令后，容器中一些文件被更新，但 Docker 不会检查这些文件。这种情况下，只有指令字符串本身被用来匹配缓存。</p>
</blockquote>
</li>
<li>
<p>CoreOS<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></p>
<blockquote>
<p>目前最常用的用来执行Docker集装箱的Linux发行版本既不是Ubuntu、Debian也不是RedHat、Fedora，而是CoreOS。这个发行版本根本没有软件包管理程序，所以也不能通过输入某个命令来安装软件。但是CoreOS预装了Docker，所以可以制作集装箱镜像，或者下载别人发布的集装箱镜像来执行。</p>
</blockquote>
</li>
</ul>
<h2 id="应用">应用</h2>
<ul>
<li>
<p>deploy for AI<br>
There are many AI-related docker in <a href="https://hub.docker.com/r/datmo/tensorflow/" target="_blank" rel="external">Datmo docker</a></p>
</li>
<li>
<p><a href="https://hub.docker.com/r/alfpark/namd/" target="_blank" rel="external">NAMD</a><br>
==NOTE: dockerd NAMD can be used in Microsoft Azure!!! ==</p>
<blockquote>
<p>2.11-icc-mkl-intelmpi contains an optimized NAMD image compatible with Azure Infiniband/RDMA instances</p>
</blockquote>
</li>
<li>
<p><a href="https://hub.docker.com/r/ambermd/amber-build-box/" target="_blank" rel="external">Amber</a><br>
With official support!</p>
</li>
<li>
<p>nvidia/cuda</p>
</li>
<li>
<p>galamost3</p>
</li>
</ul>
<h2 id="优点-缺点">优点/缺点</h2>
<ul>
<li>
<p>优点</p>
<ol>
<li>保证了线上线下环境的一致性</li>
<li>简化了部署流程<br>
只需要从DockerHub上pull一个镜像就可以</li>
<li>实现了沙盒机制，提高了安全性<br>
由于webapp运行在容器中，与操作系统隔离开了，从而使操作系统基本不可能受到破坏，另外如果webapp因为攻击而瘫痪，并不需要重启服务器，直接重启容器或者再启动一个镜像就可以了。</li>
</ol>
</li>
<li>
<p>缺点<br>
参见<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup>和<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup></p>
<ol>
<li>调度系统的服务、环境变量<br>
例如利用cron服务，一旦将cron服务容器化后，原始的环境变数设定都会失效。<br>
你也不能使用环境变量在生成镜像的时候根据条件来改变指令(per #2637)。</li>
</ol>
</li>
</ul>
<h2 id="其他">其他</h2>
<ul>
<li>
<p><a href="https://www.projectatomic.io/blog/2015/08/why-we-dont-let-non-root-users-run-docker-in-centos-fedora-or-rhel/" target="_blank" rel="external">Why we don’t let non-root users run Docker in CentOS, Fedora, or RHEL</a></p>
</li>
<li>
<p>Docker (开源项目)改名 Moby</p>
<blockquote>
<p>今后的工作方式是：贡献Moby下的项目，然后使用Docker公司的Docker CE产品。</p>
</blockquote>
</li>
</ul>
<ul>
<li>
<p>if the image size is too large, google docker reduce image size</p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/29232090" target="_blank" rel="external">Kubernetes 是什么？</a></p>
</li>
</ul>
<h3 id="frequently-asked-questions"><a href="https://github.com/NVIDIA/nvidia-docker/wiki/Frequently-Asked-Questions#does-it-have-a-performance-impact-on-my-gpu-workload" target="_blank" rel="external">Frequently Asked Questions</a></h3>
<blockquote>
<p><mark>Does it have a performance impact on my GPU workload?</mark><br>
No, usually the impact should be in the order of less than 1% and hardly noticeable.<br>
<mark>Do you support CUDA Multi Process Service (a.k.a. MPS)?</mark><br>
No, MPS is not supported at the moment. However we plan on supporting this feature in the future, and this issue will be updated accordingly.<br>
<strong>Do you support running a GPU-accelerated X server inside the container?</strong><br>
No, running a X server inside the container is not supported at the moment and there is no plan to support it in the near future (see also OpenGL support).<br>
<strong>I have multiple GPU devices, how can I isolate them between my containers?</strong><br>
GPU isolation is achieved through a container environment variable called NVIDIA_VISIBLE_DEVICES.<br>
Devices can be referenced by index (following the PCI bus order) or by UUID (refer to the documentation).<br>
<strong>Why is nvidia-smi inside the container not listing the running processes?</strong><br>
nvidia-smi and NVML are not compatible with PID namespaces.<br>
We recommend monitoring your processes on the host or inside a container using --pid=host.</p>
</blockquote>
<h1 id="command">Command</h1>
<ul>
<li>
<p><code>docker --help</code></p>
</li>
<li>
<p><code>docker ps/start/stop</code><br>
查看/停止/启动容器</p>
</li>
<li>
<p><code>docker list/rmi</code><br>
列出/删除本地镜像</p>
</li>
<li>
<p><code>run</code><br>
<code>docker run -it -p 8080:80 centos:latest /bin/bash</code>，表示用latest版本，shell为bash，<br>
<code>-p</code> 将container8080端口映射到80端口。<br>
<code>-d</code> 守护容器，就是后台运行，退出命令窗口容器也不会停止<br>
<code>-it</code> 交互式容器 退出命令窗口容器就停止运行了<br>
<code>-P</code> 将容器内部使用的网络端口映射到我们使用的主机上。<code>docker ps</code>会显示<strong>端口是如何映射的</strong><br>
<code>--runtime=nvidia</code> without it gpu and its drive wouldn’t be found.<br>
<code>--name your_name</code> assign a name to your container</p>
<ul>
<li>run centos image in background<sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup><br>
<mark><code>docker run --runtime=nvidia -t -d --name conda_hoomd timchen314/galamost3:3.0.9 /bin/bash</code></mark></li>
<li>automatically restart<br>
<code>--restart=always</code> 意味着无论容器因何种原因退出（包括正常退出），就立即重启。<br>
<code>--restart=on-failure:3</code>，意思是如果启动进程退出代码非0，则重启容器，最多重启3次。</li>
</ul>
</li>
<li>
<p><code>exec</code><br>
<code>docker exec -it your_container_name bash # login an existed container</code></p>
<ul>
<li>run source<br>
Source is not an executable (source is a bash shell built-in command that executes the content of the file passed as argument)<br>
<code>docker run --rm -ti _image_name_ bash -c 'source FILE'</code></li>
<li>Piping a file into docker run<br>
<code>echo 'export=$PATH:/opt/miniconda2/bin/' | docker exec -i conda_hoomd bash -c &quot;cat &gt;&gt; /etc/profile&quot;</code><br>
Note that it won’t work in this way: <code>docker exec -i conda_hoomd echo 'export=$PATH:/opt/miniconda2/bin/' &gt;&gt; /etc/profile</code></li>
</ul>
</li>
<li>
<p>pause/unpause</p>
</li>
<li>
<p><code>cp</code></p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker cp foo.txt mycontainer:/foo.txt</div><div class="line">docker cp mycontainer:/foo.txt foo.txt</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>rm</code><br>
remove all exited containers:<br>
<code>docker rm -v $(docker ps -aq -f status=exited)</code></p>
</li>
<li>
<p>attach<br>
直接进入容器 启动命令 的<strong>终端</strong>，不会启动新的进程。</p>
</li>
<li>
<p><code>system</code><br>
<code>docker system prune</code></p>
</li>
<li>
<p>tag<br>
每个仓库会有多个镜像，用tag标示，如果不加tag，默认使用latest镜像(不设tag，则默认为latest)<sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup>。<br>
[image name] = [repository]:[tag]<br>
注意！一个repo可以含有多个image！一个image可以打上多个tag！只有[repository]:[tag]唯一对应一个image！</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker tag myimage-v1.9.2 myrepo:1</div><div class="line">docker tag myimage-v1.9.2 myrepo:1.9</div><div class="line">docker tag myimage-v1.9.2 myrepo:1.9.2</div><div class="line">docker tag myimage-v1.9.2 myrepo:latest</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果执行下面的命令，之前的tag会自动覆盖掉。</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker tag myimage-v2.0.0 myrepo:latest</div></pre></td></tr></table></figure>
<ul>
<li>logs<br>
Docker daemon log: <code>/var/log/daemon.log | grep docker</code><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup></li>
</ul>
<ul>
<li>
<p>保存/加载tar格式的镜像</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker save -o centos.tar xianhu/centos:git    # 保存镜像, -o也可以是--output</div><div class="line">docker load -i centos.tar    # 加载镜像, -i也可以是--input</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>-H</code> 指定host IP<sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup></p>
<blockquote>
<p>默认配置下，Docker daemon 只能响应来自本地 Host 的客户端请求。如果要允许远程客户端请求，需要在配置文件中打开 TCP 监听，步骤如下：<br>
1.编辑配置文件 /etc/systemd/system/multi-user.target.wants/docker.service，在环境变量 ExecStart 后面添加 -H tcp://0.0.0.0，允许来自任意 IP 的客户端连接。</p>
</blockquote>
</li>
<li>
<p>根据已有容器，新建自有镜像</p>
<ol>
<li><code>docker commit -m &quot;centos with git&quot; -a &quot;your_name&quot; 72f1a8a0e394</code><br>
The last is container ID. <code>-a</code> means author<br>
<code>docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></li>
<li>Dockerfile</li>
</ol>
</li>
</ul>
<h2 id="show-info">show info</h2>
<ul>
<li><code>docker images</code> 显示已有docker</li>
<li><code>docker ps -a</code> 查看终止状态的容器</li>
<li><code>docker stats -a</code> Resource Usage</li>
<li><code>docker top NAMES</code> 查看容器内部运行的进程</li>
<li><code>docker system df</code> show the used space</li>
<li><code>docker history your_image</code></li>
<li>show tags<br>
For the images pulled to <a href="http://hub.docker.com" target="_blank" rel="external">hub.docker.com</a>, the tags can be found by：<br>
visit ‘<a href="https://hub.docker.com/r/library/debian/tags/" target="_blank" rel="external">https://hub.docker.com/r/library/debian/tags/</a>’ and you can see tags。<br>
By replace “/r/” in path to “/v2/repositories/” the tags can be downloaded and analysed.<br>
<code>curl 'https://registry.hub.docker.com/v2/repositories/library/debian/tags/'|jq '.&quot;results&quot;[][&quot;name&quot;]'</code> will <mark>List first 10 tags!</mark> <sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup><br>
Note: <code>jq</code> is a tool for processing JSON inputs. If all tags is needed, see reference<sup class="footnote-ref"><a href="#fn15" id="fnref15:1">[15]</a></sup>.<br>
VALIDATE: <code>curl 'https://registry.hub.docker.com/v2/repositories/library/python/tags/'|jq '.&quot;results&quot;[][&quot;name&quot;]'</code> does work!</li>
</ul>
<h2 id="build">build</h2>
<ul>
<li>
<p>注释符号<code>#</code></p>
</li>
<li>
<p>ADD<br>
与 COPY 类似，从 build context 复制文件到镜像。不同的是，如果 src 是归档文件（tar, zip, tgz, xz 等），文件会被自动解压到 dest。</p>
</li>
<li>
<p>ARG</p>
<blockquote>
<p>构建参数<sup class="footnote-ref"><a href="#fn4" id="fnref4:2">[4]</a></sup><br>
格式：ARG &lt;参数名&gt;[=&lt;默认值&gt;]<br>
构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。</p>
</blockquote>
</li>
</ul>
<ul>
<li>
<p>CMD<br>
三种格式<sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup></p>
<blockquote>
<ol>
<li>Exec 格式：CMD [“executable”,“param1”,“param2”]</li>
<li>这是 CMD 的推荐格式。<br>
CMD [“param1”,“param2”] 为 ENTRYPOINT 提供额外的参数，此时 ENTRYPOINT 必须使用 Exec 格式。</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>Shell 格式：CMD command param1 param2</li>
</ol>
</blockquote>
<blockquote>
<p><mark>指令就是用于指定默认的容器主进程的启动命令的。</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4:3">[4]</a></sup><br>
在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，<code>docker run -it ubuntu cat /etc/os-release</code><br>
在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 &quot;，而不要使用单引号。<br>
如果使用 shell 格式的话，实际的命令会被包装为 sh -c 的参数的形式进行执行。比如：<br>
<code>CMD echo $HOME</code><br>
在实际执行中，会将其变更为：<br>
<code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</code></p>
</blockquote>
</li>
</ul>
<p>另外，docker的主程序不能是退出或后台运行的状态：</p>
<blockquote>
<p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p>
</blockquote>
<ul>
<li>COPY<br>
支持两种形式：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">COPY src dest</div><div class="line">COPY [&quot;src&quot;, &quot;dest&quot;]</div></pre></td></tr></table></figure>
<ul>
<li>ENTRYPOINT<br>
<code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code><br>
ENTRYPOINT 不会被忽略，一定会被执行，即使运行 docker run 时指定了其他命令。
<blockquote>
<p><code>ENTRYPOINT [&quot;/bin/echo&quot;, &quot;Hello&quot;]</code><br>
<code>CMD [&quot;world&quot;]</code><br>
当容器通过 <code>docker run -it [image]</code> 启动时，输出为：<br>
Hello world<br>
而如果通过 <code>docker run -it [image] CloudMan</code> 启动，则输出为：<br>
Hello CloudMan</p>
</blockquote>
</li>
</ul>
<p>PS: 最佳实践<sup class="footnote-ref"><a href="#fn16" id="fnref16:1">[16]</a></sup></p>
<blockquote>
<p>使用 RUN 指令安装应用和软件包，构建镜像。<br>
如果 Docker 镜像的用途是运行应用程序或服务，比如运行一个 MySQL，应该优先使用 Exec 格式的 ENTRYPOINT 指令。CMD 可为 ENTRYPOINT 提供额外的默认参数，同时可利用 docker run 命令行替换默认参数。<br>
如果想为容器设置默认的启动命令，可使用 CMD 指令。用户可在 docker run 命令行中替换此默认命令。</p>
</blockquote>
<ul>
<li>ENV</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ENV MY_VERSION 1.3</div><div class="line">RUN apt-get install -y mypackage=$MY_VERSION</div></pre></td></tr></table></figure>
<p>以设置PATH为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ENV PATH=&quot;/opt/conda3/bin:$&#123;PATH&#125;&quot;</div></pre></td></tr></table></figure>
<ul>
<li>
<p>LABEL</p>
<blockquote>
<p>LABEL指令添加元数据到一个镜像。一个LABEL是一个键值对。要在LABEL值中包含空格，使用双引号和反斜杠(续行)。<br>
查看LABEL，可以用<code>docker inspect</code>。<br>
例子：</p>
</blockquote>
 <figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LABEL</span><span class="bash"> <span class="string">"com.example.vendor"</span>=<span class="string">"ACME Incorporated"</span></span></div><div class="line"><span class="keyword">LABEL</span><span class="bash"> com.example.label-with-value=<span class="string">"foo"</span></span></div><div class="line"><span class="keyword">LABEL</span><span class="bash"> version=<span class="string">"1.0"</span></span></div><div class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">"This text illustrates \</span></span></div><div class="line">that label-values can span multiple lines."</div></pre></td></tr></table></figure>
</li>
<li>
<p>MAINTAINER (depreciate)<br>
设置镜像的作者，可以是任意字符串。</p>
</li>
<li>
<p>其他<br>
EXPOSE VOLUME RUN</p>
</li>
</ul>
<h2 id="安装">安装</h2>
<ul>
<li>Mac OS<br>
homebrew直接安装<br>
<code>brew cask install docker</code></li>
<li>CentOS<br>
<a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/" target="_blank" rel="external">官网</a><br>
官网的方法是最正确的： <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Add the package repositories</span></div><div class="line">curl -s -L https://nvidia.github.io/nvidia-docker/centos7/x86_64/nvidia-docker.repo | \</div><div class="line">  sudo tee /etc/yum.repos.d/nvidia-docker.repo</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Install nvidia-docker2 and reload the Docker daemon configuration</span></div><div class="line">sudo yum install -y nvidia-docker2</div><div class="line">sudo pkill -SIGHUP dockerd</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> Test nvidia-smi with the latest official CUDA image</span></div><div class="line">docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</div></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="http://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="external">CentOS runoob</a><br>
单独安装docker-ce非常麻烦的，因为需要安装和配置nvidia-container-runtime：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo</div><div class="line">sudo yum install -y docker-ce</div><div class="line">sudo systemctl start docker</div><div class="line">sudo docker run hello-world</div><div class="line"><span class="meta">#</span><span class="bash"> install nvidia-container-runtime</span></div><div class="line">yum install -y nvidia-container-runtime</div><div class="line"><span class="meta">#</span><span class="bash"> Then you should follow the troublesome setting process <span class="keyword">in</span> https://github.com/nvidia/nvidia-container-runtime<span class="comment">#docker-engine-setup</span></span></div></pre></td></tr></table></figure>
<ul>
<li>Docker Machine
<blockquote>
<p>Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</p>
</blockquote>
</li>
</ul>
<h2 id="configuration">configuration</h2>
<ul>
<li>
<p>bash-completion</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ln -s /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion  </div><div class="line">ln -s /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion  </div><div class="line">ln -s /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>docker run hello-world</code> for test</p>
</li>
</ul>
<h2 id="error">error</h2>
<ul>
<li>&quot;Docker version reports bad response from Docker engine&quot;<br>
A lot of people encounter this error (<a href="https://forums.docker.com/t/docker-version-reports-bad-response-from-docker-engine/13395" target="_blank" rel="external">https://forums.docker.com/t/docker-version-reports-bad-response-from-docker-engine/13395</a>). For me, I sovled this by reset to factory defaults.</li>
</ul>
<h2 id="problem">problem</h2>
<h3 id="use-gcc5-x-solved"><mark>use gcc5.x (solved)</mark></h3>
<p>source /opt/rh/devtoolset-4/enable</p>
<h3 id="can-t-get-the-size-of-remote-image-unsolved">can’t get the size of remote image (unsolved)</h3>
<p>by google: docker remote image size, or docker image size in REPOSITORY, there is no cli command to do this.<br>
A complicate answer is:<br>
<a href="https://unix.stackexchange.com/questions/134186/docker-how-to-get-image-size" target="_blank" rel="external">Docker: How to get image size?</a></p>
<h1 id="reference">reference</h1>
<hr>
<ul>
<li>入门<br>
<a href="https://zhuanlan.zhihu.com/p/23599229" target="_blank" rel="external">只要一小时，零基础入门Docker</a><br>
<a href="http://www.runoob.com/docker/docker-container-usage.html" target="_blank" rel="external">runoob</a></li>
<li>进阶<br>
<a href="https://github.com/wsargent/docker-cheat-sheet#layers" target="_blank" rel="external">Docker Cheat Sheet</a><br>
<a href="https://docs.docker.com/get-started/" target="_blank" rel="external">官网 get started</a><br>
<a href="http://docker_practice.gitee.io/image/multistage-builds.html" target="_blank" rel="external">Docker — 从入门到实践</a></li>
<li>待读</li>
</ul>
<hr>
<p>Examples of Dockerfile:</p>
<ol>
<li>
<p>centos</p>
<figure class="highlight docker"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> scratch</div><div class="line"><span class="keyword">ADD</span><span class="bash"> centos-7-docker.tar.xz /</span></div><div class="line"></div><div class="line"><span class="keyword">LABEL</span><span class="bash"> name=<span class="string">"CentOS Base Image"</span> \</span></div><div class="line">    vendor=<span class="string">"CentOS"</span> \</div><div class="line">    license=<span class="string">"GPLv2"</span> \</div><div class="line">    build-date=<span class="string">"20180107"</span></div><div class="line"></div><div class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>]</span></div></pre></td></tr></table></figure>
</li>
<li></li>
</ol>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://blog.csdn.net/cbl709/article/details/43955687" target="_blank" rel="external">docker与虚拟机实现原理比较</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://docs.docker.com/engine/admin/resource_constraints/" target="_blank" rel="external">Limit a container’s resources</a> <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://www.zhihu.com/search?q=docker&amp;type=content" target="_blank" rel="external">docker在web开发中得使用流程是怎样的？</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="http://docker_practice.gitee.io/image/multistage-builds.html" target="_blank" rel="external">Docker — 从入门到实践</a> <a href="#fnref4" class="footnote-backref">↩</a> <a href="#fnref4:1" class="footnote-backref">↩</a> <a href="#fnref4:2" class="footnote-backref">↩</a> <a href="#fnref4:3" class="footnote-backref">↩</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/30713987" target="_blank" rel="external">【 全干货 】5 分钟带你看懂 Docker ！</a> <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
<li id="fn6" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/32383774" target="_blank" rel="external">每天5分钟玩转Docker容器技术（三）</a> <a href="#fnref6" class="footnote-backref">↩</a> <a href="#fnref6:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn7" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/32324673" target="_blank" rel="external">每天5分钟玩转Docker容器技术（一）</a> <a href="#fnref7" class="footnote-backref">↩</a></p>
</li>
<li id="fn8" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/19902938" target="_blank" rel="external">分布式机器学习的故事：Docker改变世界</a> <a href="#fnref8" class="footnote-backref">↩</a></p>
</li>
<li id="fn9" class="footnote-item"><p><a href="https://yq.aliyun.com/articles/113842" target="_blank" rel="external">一年之后重新审视 Docker —— 根本性缺陷和炒作</a> <a href="#fnref9" class="footnote-backref">↩</a></p>
</li>
<li id="fn10" class="footnote-item"><p><a href="http://www.sohu.com/a/155079445_120672" target="_blank" rel="external">Docker架构优缺点大剖析</a> <a href="#fnref10" class="footnote-backref">↩</a></p>
</li>
<li id="fn11" class="footnote-item"><p><a href="https://stackoverflow.com/questions/30209776/docker-container-will-automatically-stop-after-docker-run-d/30209974#30209974" target="_blank" rel="external">Docker container will automatically stop after “docker run -d”</a> <a href="#fnref11" class="footnote-backref">↩</a></p>
</li>
<li id="fn12" class="footnote-item"><p><a href="http://blog.csdn.net/cloudman6/article/details/72603130" target="_blank" rel="external">镜像命名的最佳实践 - 每天5分钟玩转 Docker 容器技术（18）</a> <a href="#fnref12" class="footnote-backref">↩</a></p>
</li>
<li id="fn13" class="footnote-item"><p><a href="https://stackoverflow.com/questions/30969435/where-is-the-docker-daemon-log" target="_blank" rel="external">Where is the Docker daemon log?</a> <a href="#fnref13" class="footnote-backref">↩</a></p>
</li>
<li id="fn14" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/32356831" target="_blank" rel="external">每天5分钟玩转Docker容器技术（二）</a> <a href="#fnref14" class="footnote-backref">↩</a></p>
</li>
<li id="fn15" class="footnote-item"><p><a href="http://www.googlinux.com/list-all-tags-of-docker-image/index.html" target="_blank" rel="external">How to list all tags of a docker image</a> <a href="#fnref15" class="footnote-backref">↩</a> <a href="#fnref15:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn16" class="footnote-item"><p><a href="https://www.cnblogs.com/CloudMan6/p/6875834.html" target="_blank" rel="external">RUN vs CMD vs ENTRYPOINT - 每天5分钟玩转 Doc<br>
ker 容器技术（17）</a> <a href="#fnref16" class="footnote-backref">↩</a> <a href="#fnref16:1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Official introduction:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications, whether on laptops, data center VMs, or the cloud.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我认为可以这样介绍：docker是没有性能损失的、打包软件及其运行运行环境(包括系统在内的)的虚拟机。“Build Once, Run Anywhere!”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/timchen314/galamost3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;galamost-3.0.9 docker&lt;/a&gt;测试&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;完全没有速度损失（docker vs. no-docker in 1080TI: 700 TPS vs. 700±20 TPS; IP: 101）。&lt;/li&gt;
&lt;li&gt;即使host上为cuda8.0而docker上为cuda9.0，速度也基本没有损失（docker vs. no-docker in 1080: 513 TPS vs. 533 TPS; IP: 106）。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="云计算" scheme="http://timchen314.com/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="docker" scheme="http://timchen314.com/tags/docker/"/>
    
      <category term="cloud computing" scheme="http://timchen314.com/tags/cloud-computing/"/>
    
  </entry>
  
  <entry>
    <title>linux命令之service</title>
    <link href="http://timchen314.com/linux_senior_service/"/>
    <id>http://timchen314.com/linux_senior_service/</id>
    <published>2017-12-17T19:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>service</code>，顾名思义，是用于对系统服务进行管理的命令。<br>
<strong>Basically, it’s a shell script! <code>vi</code> it!</strong><br>
Besides, <code>chkconfig</code> is a closely related command.</p>
<a id="more"></a>
<p>CentOS中的介绍：</p>
   <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> info service</span></div><div class="line">DESCRIPTION</div><div class="line">       service  runs  a  System V init script in as predictable environment as</div><div class="line">       possible, removing most environment variables and with current  working</div><div class="line">       directory set to /.</div><div class="line"></div><div class="line">       The  SCRIPT  parameter  specifies  a  System  V init script, located in</div><div class="line">       /etc/init.d/SCRIPT.  The supported values  of  COMMAND  depend  on  the</div><div class="line">       invoked  script,  service  passes  COMMAND  and  OPTIONS it to the init</div><div class="line">       script unmodified.  All scripts should support at least the  start  and</div><div class="line">       stop  commands.   As  a special case, if COMMAND is --full-restart, the</div><div class="line">       script is run twice, first with the stop command, then with  the  start</div><div class="line">       command.</div><div class="line"></div><div class="line">       service --status-all runs all init scripts, in alphabetical order, with</div><div class="line">       the status command.</div><div class="line"></div><div class="line">       If the init script file does not exist, the script tries to use  legacy</div><div class="line">       actions.   If  there  is no suitable legacy action found and COMMAND is</div><div class="line">       one of actions specified in LSB Core Specification, input is redirected</div><div class="line">       to the systemctl.  Otherwise the command fails with return code 2.</div></pre></td></tr></table></figure>
<p>[TOC]</p>
<h2 id="service命令">service命令</h2>
<p><code>service network start</code>就相当于<code>/etc/init.d/network start</code>。</p>
<ul>
<li>
<p>An example of service command:</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> service netconsole</span></div><div class="line">Usage: /etc/init.d/netconsole &#123;start|stop|status|restart|condrestart&#125;</div></pre></td></tr></table></figure>
<p>Comman used option include “start|stop|status|restart”</p>
</li>
<li>
<p>An example of init service script:</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">case "$1" in</div><div class="line">    start)</div><div class="line">        do start-thing;</div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        do stop-thing;</div><div class="line">        ;;</div><div class="line">    restart)</div><div class="line">        do restart-thing;</div><div class="line">        ;;</div><div class="line">    ...</div><div class="line">esac</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="chkconfig命令">chkconfig命令</h2>
<p>service与chkconfig的关系归纳为：<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<blockquote>
<p>先要注册成为系统服务(即service可以调用)，然后才能使用chkconfig控制运行级别。<br>
service是chkconfig的前提条件。</p>
</blockquote>
<p><strong>注意</strong>：谨记chkconfig不是立即自动禁止或激活一个服务，它只是简单的改变了<code>/etc/rc*.d</code>中的符号连接。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<ul>
<li>
<p><code>chkconfig --list</code><br>
If you want to list systemd services use ‘systemctl list-unit-files’.</p>
</li>
<li>
<p><code>chkconfig --add/del SERVICE</code></p>
</li>
<li>
<p><code>chkconfig SERVICE on/off</code><br>
是否开机就执行</p>
</li>
<li>
<p><code>chkconfig --level SERVICE 3456</code><br>
只在3456级别下运行该SERVICE<br>
(<code>/etc/rc*.d</code>下)S开始的文件向脚本传递start参数<br>
K开始的文件向脚本传递stop参数<br>
K/S后面的数字代表开机启动脚本中的启动顺序，数组越大启动越晚。<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2]</a></sup></p>
</li>
<li>
<p>相应级别的文件在<code>/etc/rc*.d</code>之下</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ls /etc/rc*.d -d</span></div><div class="line">/etc/rc.d  /etc/rc0.d  /etc/rc1.d  /etc/rc2.d  /etc/rc3.d  /etc/rc4.d  /etc/rc5.d  /etc/rc6.d</div></pre></td></tr></table></figure>
</li>
<li>
<p>PS: <code>/etc/rc.d/rc*.d/</code>下的文件均为符号链接，最终绝大部分都是都是链接到<code>/etc/rc.d/init.d</code>下面。<code>/etc/rc.d/init.d</code>目录下面的都是开启启动脚本文件，用来启动相应的程序。</p>
</li>
<li>
<p>PPS: 开机顺序<br>
硬件自检 -&gt; 初始化启动bootloade -&gt; 加载内核 -&gt; 初始化硬件 -&gt; 加载根文件系统 -&gt; 加载驱动 -&gt; 启动一个init用户级程序</p>
</li>
<li>
<p>PPPS: 上面两次加载硬件，是因为驱动分成两种：<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p>
<blockquote>
<p>1.随内核加载的驱动，一般是中断控制器，串口，定时器，时钟，各种总线等；这种驱动的初始化函数一般会放到一个特殊的初始化段中，在内核初始化时调用；<br>
2.编译成模块的驱动，在内核初始化完成，也就是初始线程创建完成，出现shell时，根据应用程序的需要或者脚本按需加载。</p>
</blockquote>
</li>
</ul>
<h2 id="reference">reference</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://www.cnblogs.com/wangtao_20/archive/2014/04/04/3645690.html" target="_blank" rel="external">linux中注册系统服务—service命令的原理通俗</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="http://blog.csdn.net/taiyang1987912/article/details/41698817" target="_blank" rel="external">linux启动脚本和service、chkconfig</a> <a href="#fnref2" class="footnote-backref">↩</a> <a href="#fnref2:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://www.zhihu.com/question/35619555/answer/150110115" target="_blank" rel="external">古斟布衣</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;service&lt;/code&gt;，顾名思义，是用于对系统服务进行管理的命令。&lt;br&gt;
&lt;strong&gt;Basically, it’s a shell script! &lt;code&gt;vi&lt;/code&gt; it!&lt;/strong&gt;&lt;br&gt;
Besides, &lt;code&gt;chkconfig&lt;/code&gt; is a closely related command.&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://timchen314.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://timchen314.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>tools for MD analysis</title>
    <link href="http://timchen314.com/tools_for_MD_analysis/"/>
    <id>http://timchen314.com/tools_for_MD_analysis/</id>
    <published>2017-12-08T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>+</code> and <code>-</code> means pro and con of the tool!<br>
The conclusion: MDTraj seems a powerful tools, but once in a while it still feel troublesome.</p>
<a id="more"></a>
<h2 id="mdtraj">MDTraj</h2>
<p><code>+ convert files are awesome</code><br>
<code>- most of it is coded by python</code><br>
<code>- suck for xml (e.g. can't read image)</code><br>
<code>- the rotation utilities is hard to use.</code></p>
<h2 id="mdanalysis">MDAnalysis</h2>
<p><code>- Python2 only</code></p>
<h2 id="cpptraj">CPPTRAJ</h2>
<p><code>- for Amber</code></p>
<h2 id="st-analyzer">ST-analyzer</h2>
<p><code>+ with GUI</code></p>
<h2 id="loos">LOOS</h2>
<p><code>+ OO</code></p>
<p><code>- for structural analysis</code></p>
<h2 id="pteros">Pteros</h2>
<p><code>- developed by only one person</code></p>
<hr>
<p><a href="http://blog.csdn.net/garfielder007/article/details/51056048" target="_blank" rel="external">Python Tools for Machine Learning</a></p>
<ul>
<li>scikit-learn: SVM and others</li>
<li>Deep learning: Theano</li>
</ul>
<h1 id="reference">reference</h1>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; means pro and con of the tool!&lt;br&gt;
The conclusion: MDTraj seems a powerful tools, but once in a while it still feel troublesome.&lt;/p&gt;
    
    </summary>
    
      <category term="MD simulation" scheme="http://timchen314.com/categories/MD-simulation/"/>
    
    
      <category term="MD simulation" scheme="http://timchen314.com/tags/MD-simulation/"/>
    
  </entry>
  
  <entry>
    <title>solving linux problem</title>
    <link href="http://timchen314.com/linux_problem/"/>
    <id>http://timchen314.com/linux_problem/</id>
    <published>2017-11-05T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>解决各种linux问题。</p>
<a id="more"></a>
<h2 id="linux挂载2t以上硬盘">linux挂载2T以上硬盘</h2>
<ol start="0">
<li>
<p>找到硬盘编号<br>
<code>ls /dev/sd*</code><br>
结果一般为：<br>
<code>/dev/sda /dev/sda1 /dev/sda2 /dev/sda3 /dev/sdb</code><br>
后面跟很多数字的是系统盘，上面的例子中系统盘是<code>/dev/sda</code>；那么<code>/dev/sdb</code>就是新安装的备份盘。</p>
</li>
<li>
<p>root下，执行<code>parted /dev/sdb</code>以建立分区列表<br>
mklabel gpt  #(有不同选项，如MS-DOS gpt Mac) 3T/4T盘必须要手动建立分区列表<br>
mkpart + Enter键<br>
ext4 + Enter键<br>
&quot;Start&quot;&quot; 2048s + Enter键<br>
&quot;End&quot; -1s  + Enter键  #（s是单位2048s留给分区列表）<br>
<strong>可选步骤，对齐分区以最优化硬盘性能：</strong><br>
align-check TYPE + Enter键<br>
opt + Enter键<br>
&quot;partition number?&quot; 1 + Enter键</p>
</li>
<li>
<p><code>mkfs.ext4 /dev/sdb/</code> # 格式化硬盘</p>
</li>
<li>
<p><code>mount # 挂载</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir /home/your_name/backup <span class="comment">#建立文件夹</span></div><div class="line">mount -t ext4 /dev/sdb /home/your_name/backup <span class="comment">#挂载文件夹</span></div><div class="line">chown -R your_name:your_name /home/your_name/backup</div></pre></td></tr></table></figure>
</li>
<li>
<p>修改<code>/etc/fstab</code> # 设置开机后自动挂载备份硬盘<br>
得到硬盘的UUID：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@node34 ~]$ uuidgen /dev/sda</div><div class="line">c6af66d2-f6dc-4a4b-8d83-40ce2b8d0b75</div></pre></td></tr></table></figure>
<p>打开<code>/etc/fstabe</code>，加入备份盘的UUID：<br>
<code>UUID=c6af66d2-f6dc-4a4b-8d83-40ce2b8d0b75 /home/your_name/backup/ ext4 defaults 1 2</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决各种linux问题。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://timchen314.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://timchen314.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>numpy notes</title>
    <link href="http://timchen314.com/numpy/"/>
    <id>http://timchen314.com/numpy/</id>
    <published>2017-10-31T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]<br>
The fundamental package for scientific computing with Python.</p>
<a id="more"></a>
<h4 id="introduction">Introduction</h4>
<ol>
<li>
<p><mark>Best tutorial: <a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html#tricks-and-tips" target="_blank" rel="external">Quickstart tutorial</a></mark></p>
</li>
<li>
<p>Since pythoner usually do <code>import numpy as np</code>, in most scenes <mark>‘np’ measn ‘numpy’</mark></p>
</li>
<li>
<p><strong>Note: an 1d array in numpy acts like a row vector in linear algebra, but most lienar algebra textbook are written in column form!<br>
In text book: matrix x column vector = column vector<br>
In numpy: row vector x matrix.T = row vector</strong></p>
</li>
<li>
<p><mark>string type numpy array automatically encode the string to bytes!</mark></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new_a = a.astype(<span class="string">'U'</span>) <span class="comment"># get string instead of bytes</span></div></pre></td></tr></table></figure>
</li>
<li>
<p>帮助：<code>np.info</code><br>
例如<code>np.info(np.random)</code></p>
</li>
</ol>
<h4 id="broadcasting"><a href="https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html" target="_blank" rel="external">broadcasting</a></h4>
<p>Broadcasting is one of most error-prone concept in numpy.</p>
<blockquote>
<p>When operating on two arrays, NumPy compares their shapes element-wise. It starts with the trailing dimensions, and works its way forward. Two dimensions are compatible when:</p>
<ol>
<li>they are equal, or</li>
<li>one of them is 1</li>
</ol>
</blockquote>
<ol>
<li>
<p>reshape can turn off the broadcast</p>
</li>
<li>
<p>an telling example</p>
<blockquote>
<p>A      (4d array):  8 x 1 x 6 x 1<br>
B      (3d array):      7 x 1 x 5<br>
Result (4d array):  8 x 7 x 6 x 5</p>
</blockquote>
<p>So for a single dimension, the broadcast means numpy will expand (6 x 1) to (6 x 5)， and then do element-wise operation.</p>
</li>
</ol>
<h4 id="ndarray学习">ndarray学习</h4>
<p><a href="http://blog.csdn.net/qq403977698/article/details/47254597" target="_blank" rel="external">numpy中的ndarray方法和属性</a></p>
<ul>
<li>
<p>ndarray.mean(axis=None, dtype=None, out=None)：返回指定轴的数组元素均值</p>
</li>
<li>
<p>ndarray.var(axis=None, dtype=None, out=None, ddof=0)：返回数组的方差，沿指定的轴。</p>
</li>
<li>
<p>ndarray.std(axis=None, dtype=None, out=None, ddof=0)：沿给定的轴返回数则的标准差<br>
注意std默认是除以N而不是N-1的，如果要除以N-1，将ddof设为1；另外，pandas中std是除以N-1的。</p>
</li>
<li>
<p>ndarray.trace(offset=0, axis1=0, axis2=1, dtype=None, out=None)：返回沿对角线的数组元素之和</p>
</li>
<li>
<p>ndarray.diagonal(offset=0, axis1=0, axis2=1)：返回对角线的所有元素。</p>
</li>
<li>
<p>最大/小值</p>
<ul>
<li>ndarray.argmin(axis=None, out=None):返回指定轴最小元素的索引。</li>
<li>darray.min(axis=None, out=None)：返回指定轴的最小值</li>
</ul>
</li>
<li>
<p>flat/flatten</p>
<ul>
<li>ndarray.flat 和 ndarray.T 一样不是函数调用</li>
</ul>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; x = X.flat</div><div class="line">   &gt;&gt;&gt; x</div><div class="line">&lt;numpy.flatiter object at <span class="number">0x9e82278</span>&gt;</div><div class="line">                            <span class="comment"># 不直接返回一维数组</span></div><div class="line">                            <span class="comment"># 但可直接索引</span></div></pre></td></tr></table></figure>
<ul>
<li>flatten()是函数调用，可以指定平坦化的参数。<br>
<code>ndarray.flatten(order='C')</code><br>
可选参数，order：<br>
（1）’C’：C-style，行序优先<br>
（2）’F’：Fortran-style，列序优先<br>
（3）’A’：保持<br>
（4）默认为’C’</li>
</ul>
</li>
<li>
<p>ndarray.transpose(*axes) :返回矩阵的转置矩阵</p>
</li>
<li>
<p>ndarray.take(indices, axis=None, out=None, mode=’raise’):获得数组的指定索引的数据，如：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; a.take([<span class="number">1</span>,<span class="number">3</span>],axis=<span class="number">1</span>) <span class="comment">#提取1，3列的数据</span></div><div class="line">array([[ <span class="number">1</span>,  <span class="number">3</span>],</div><div class="line">[ <span class="number">5</span>,  <span class="number">7</span>],</div><div class="line">[ <span class="number">9</span>, <span class="number">11</span>]])</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>numpy.argmax(a, axis=None, out=None)</code> <mark>非常有用</mark><br>
Returns the indices of the maximum values along an axis. <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argmax.html" target="_blank" rel="external">doc</a></p>
</li>
</ul>
<h4 id="构造矩阵">构造矩阵</h4>
<ul>
<li>arange()/linspace()</li>
<li>numpy.zeros，numpy.ones，numpy.eye, numpy.empty((2,3)), numpy.full((2,2),7) <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; <span class="keyword">print</span> np.zeros((<span class="number">3</span>,<span class="number">4</span>))</div><div class="line">[[ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]]</div><div class="line">   &gt;&gt;&gt; <span class="keyword">print</span> np.ones((<span class="number">3</span>,<span class="number">4</span>))</div><div class="line">[[ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>  <span class="number">1.</span>]]</div><div class="line">   &gt;&gt;&gt; <span class="keyword">print</span> np.eye(<span class="number">3</span>)</div><div class="line">[[ <span class="number">1.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span>]]</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="矩阵indexing">矩阵indexing</h4>
<ol>
<li>
<p>automatic reshaping</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; a = np.arange(30)</div><div class="line">   &gt;&gt;&gt; a.shape = 2,-1,3  # -1 means &quot;whatever is needed&quot;</div><div class="line">   &gt;&gt;&gt; a.shape</div><div class="line">(2, 5, 3)</div></pre></td></tr></table></figure>
</li>
<li>
<p>Indexing with Arrays of Indices</p>
</li>
</ol>
<ul>
<li>Suppose a and idx is a np.array, then <code>a[i].shape == idx.shape</code></li>
<li>Supose a, idx_i and idx_j is a np.array, if <code>idx_i.shape == idx_j.shape</code>, then <code>a[i,j].shape == idx_i.shape</code>, idx_i is the first axis index of array a, idx_j is the second axis index of array a. <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list_ij=[i,j]</div><div class="line">a[list_ij] == a[i,j] <span class="comment"># this statement is true</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li>Indexing with Boolean Arrays<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; a = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">   &gt;&gt;&gt; b = a &gt; <span class="number">4</span></div><div class="line">   &gt;&gt;&gt; b                                          <span class="comment"># b is a boolean with a's shape</span></div><div class="line">array([[<span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>],</div><div class="line">       [<span class="keyword">False</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>],</div><div class="line">       [ <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>]], dtype=bool)</div><div class="line">   &gt;&gt;&gt; a[b]                                       <span class="comment"># 1d array with the selected elements</span></div><div class="line">array([ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>])</div><div class="line">   &gt;&gt;&gt; a[b]=<span class="number">0</span></div><div class="line">   &gt;&gt;&gt; a</div><div class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">       [<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Note that a[b] is a 1d array! But a[b]=0 is a 2d array! This is because if you don’t assign a value to the ‘False’ element, there is no value for that element.</p>
<h4 id="数据添加与拷贝">数据添加与拷贝</h4>
<ul>
<li>
<p><code>c=a.copy</code>深拷贝</p>
</li>
<li>
<p>vstack和hstack函数：<br>
vstack、hstack是<mark>深拷贝</mark></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; a = np.ones((<span class="number">2</span>,<span class="number">2</span>))</div><div class="line">   &gt;&gt;&gt; b = np.eye(<span class="number">2</span>)</div><div class="line">   &gt;&gt;&gt; <span class="keyword">print</span> np.vstack((a,b))</div><div class="line">[[ <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>]</div><div class="line"> [ <span class="number">1.</span>  <span class="number">0.</span>]</div><div class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>]]</div></pre></td></tr></table></figure>
</li>
<li>
<p><code>row_stack(matrix,a_row)</code> 向二维矩阵尾部添加一行</p>
</li>
</ul>
<h4 id="numpy-linalg">numpy.linalg</h4>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; <span class="keyword">import</span> numpy.linalg <span class="keyword">as</span> nplg</div><div class="line">   &gt;&gt;&gt; a = np.array([[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">3</span>]])</div><div class="line">   &gt;&gt;&gt; <span class="keyword">print</span> nplg.eig(a)</div><div class="line">(array([ <span class="number">3.</span>,  <span class="number">1.</span>]), array([[ <span class="number">0.</span>        ,  <span class="number">0.70710678</span>],</div><div class="line">       [ <span class="number">1.</span>        , <span class="number">-0.70710678</span>]]))</div></pre></td></tr></table></figure>
<h4 id="comparison">comparison</h4>
<ul>
<li>a == b #逐个元素比较</li>
<li>a &lt; 2</li>
<li><code>np.array_equal(a,b)</code></li>
</ul>
<h4 id="arithmetic-operation">arithmetic operation</h4>
<ul>
<li>+, -, *, / #element-wise</li>
<li>np.dot(a,b) # matrix multiply</li>
</ul>
<h4 id="i-o">I/O</h4>
<ul>
<li>np.save(‘myarray’,a)</li>
<li>np.savez(‘myarray.npz’,a,b)</li>
<li>np.save(‘myarray.npy’,a)</li>
<li>np.loadtxt/savetxt/genfromtxt</li>
</ul>
<h4 id="other">Other</h4>
<ul>
<li>np.newaxis</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a=np.array([1,2,3,4,5])</div><div class="line">b=a[np.newaxis,:]</div><div class="line">print(a.shape,b.shape)</div><div class="line">(5,) (1, 5)</div><div class="line"></div><div class="line">a=np.array([1,2,3,4,5])</div><div class="line">b=a[:,np.newaxis]</div><div class="line">print(a.shape,b.shape)</div><div class="line">(5,) (5, 1)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;br&gt;
The fundamental package for scientific computing with Python.&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://timchen314.com/categories/python/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
      <category term="编程语言" scheme="http://timchen314.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>python notes</title>
    <link href="http://timchen314.com/python_notes/"/>
    <id>http://timchen314.com/python_notes/</id>
    <published>2017-10-02T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]<br>
Python features a dynamic type system and automatic memory management and supports multiple programming paradigms.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<a id="more"></a>
<h2 id="python-syntax">Python Syntax</h2>
<h3 id="python-doc">Python doc</h3>
<p><a href="https://docs.python.org" target="_blank" rel="external">Python doc</a></p>
<h3 id="builtin-function">builtin function</h3>
<p><a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="external">builtin functions</a> (import builtin<strong>s</strong>)</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><s>abs()</s></td>
<td><s>dict()</s></td>
<td><s>help()</s></td>
<td><s>min()</s></td>
<td><s>setattr()</s></td>
</tr>
<tr>
<td><s>all()</s></td>
<td>dir()</td>
<td><s>hex()</s></td>
<td><s>next()</s></td>
<td>slice()</td>
</tr>
<tr>
<td><s>any()</s></td>
<td>divmod()</td>
<td><s>id()</s></td>
<td><s>object()</s></td>
<td>sorted()</td>
</tr>
<tr>
<td>ascii()</td>
<td><s>enumerate()</s></td>
<td><s>input()</s></td>
<td><s>oct()</s></td>
<td>staticmethod()</td>
</tr>
<tr>
<td>bin()</td>
<td>eval()</td>
<td><s>int()</s></td>
<td><s>open()</s></td>
<td><s>str()</s></td>
</tr>
<tr>
<td><s>bool()</s></td>
<td>exec()</td>
<td><s>isinstance()</s></td>
<td>ord()</td>
<td><s>sum()</s></td>
</tr>
<tr>
<td>bytearray()</td>
<td>filter()</td>
<td>issubclass()</td>
<td>pow()</td>
<td>super()</td>
</tr>
<tr>
<td>bytes()</td>
<td><s>float()</s></td>
<td><s>iter()</s></td>
<td><s>print()</s></td>
<td><s>tuple()</s></td>
</tr>
<tr>
<td>callable()</td>
<td>format()</td>
<td><s>len()</s></td>
<td>property()</td>
<td><s>type()</s></td>
</tr>
<tr>
<td><s>chr()</s></td>
<td>frozenset()</td>
<td><s>list()</s></td>
<td><s>range()</s></td>
<td>vars()</td>
</tr>
<tr>
<td>classmethod()</td>
<td><s>getattr()</s></td>
<td>locals()</td>
<td><s>repr()</s></td>
<td><s>zip()</s></td>
</tr>
<tr>
<td>compile()</td>
<td>globals()</td>
<td><s>map()</s></td>
<td>reversed()</td>
<td>__import__()</td>
</tr>
<tr>
<td>complex()</td>
<td><s>hasattr()</s></td>
<td><s>max()</s></td>
<td>round()</td>
<td></td>
</tr>
<tr>
<td><s>delattr()</s></td>
<td>hash()</td>
<td>memoryview()</td>
<td><s>set()</s></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="dict">dict</h4>
<ul>
<li>
<p>mydict.items() 将项以list返回<br>
<code>for key,val in myd3.items():</code></p>
</li>
<li>
<p>check if dict has element<br>
Note: I think this method is not easy to read for noobs.<br>
为了方便记忆，可以将<code>bool()</code>读作有东西，例如：<br>
<code>if bool(mydict):</code>可以独坐如果<code>mydict</code>中有东西;<br>
<code>if not bool(mylist):</code>可以独坐如果<code>mylist</code>中有东西</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; mydict = &#123;&#125;</div><div class="line">   &gt;&gt;&gt; bool(mydict)</div><div class="line">False</div></pre></td></tr></table></figure>
</li>
<li>
<p><s>iteriterms()返回迭代器，节省内存</s> <strong>Only for python2</strong></p>
</li>
<li>
<p>dict.pop()<br>
<code>pop(key[,default])</code><br>
key: 要删除的键值<br>
default: 如果没有 key，返回 default 值</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mydict.pop(<span class="string">'mykey'</span>, <span class="keyword">None</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>PS: 或者也可以:</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> key <span class="keyword">in</span> mydict:</div><div class="line">    <span class="keyword">del</span> mydict[key]</div></pre></td></tr></table></figure>
<ul>
<li>
<p>dict comprehension</p>
<ul>
<li><strong>filter a dictionary according condition</strong><br>
<code>{k: v for k, v in points.items() if v[0] &lt; 5 and v[1] &lt; 5}</code></li>
</ul>
</li>
<li>
<p>dict.get()<br>
doc:<br>
dict.get(k[,d]) -&gt; dict[k] if k in dict, else d.  d defaults to None.<br>
Note taht if k is not in dict, dict.get won’t add k to dict</p>
</li>
<li>
<p>dict initialize<br>
Following two ways are equivalent:</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myd = dict(age=<span class="number">27</span>)</div><div class="line">myd = &#123;<span class="string">"age"</span>:<span class="number">27</span>&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="tuple">tuple</h4>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">my_tuple = (<span class="string">'haha'</span>,)  <span class="comment"># This is the right way to initialize an one-element tuple </span></div><div class="line">var = (<span class="string">'haha'</span>)</div><div class="line">type(var)  <span class="comment"># result is string</span></div></pre></td></tr></table></figure>
<h4 id="set">set</h4>
<p>交集，并集，差集，对称差集:</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s1 &amp; s2</div><div class="line">s1 | s2</div><div class="line">s1 - s2</div><div class="line">s1 ^ s2</div></pre></td></tr></table></figure>
<h4 id="max">max()</h4>
<p><a href="https://docs.python.org/3/library/functions.html#max" target="_blank" rel="external">max()</a></p>
<blockquote>
<p>max(iterable, *[, key, default])<br>
max(arg1, arg2, *args[, key])</p>
</blockquote>
<blockquote>
<p>Return the largest item in an iterable or the largest of two or more arguments.</p>
</blockquote>
<blockquote>
<p><strong>If one positional argument is provided, it should be an iterable.</strong> The largest item in the iterable is returned. <strong>If two or more positional arguments are provided, the largest of the positional arguments is returned.</strong></p>
</blockquote>
<blockquote>
<p>There are two optional keyword-only arguments. The key argument specifies a one-argument ordering function like that used for list.sort(). The default argument specifies an object to return if the provided iterable is empty. If the iterable is empty and default is not provided, a ValueError is raised.</p>
</blockquote>
<blockquote>
<p>If multiple items are maximal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as sorted(iterable, key=keyfunc, reverse=True)[0] and heapq.nlargest(1, iterable,key=keyfunc).</p>
</blockquote>
<ul>
<li><a href="http://www.cnblogs.com/whatisfantasy/p/6273913.html" target="_blank" rel="external">几个例子</a></li>
</ul>
<h4 id="all-any"><code>all()/any()</code></h4>
<blockquote>
<p>Return True if all elements of the iterable are true (or if the iterable is empty). Equivalent to:</p>
</blockquote>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(iterable)</span>:</span></div><div class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<h4 id="eval-repr">eval/repr</h4>
<p><code>repr</code>将<code>obj</code>转化为字符串格式。<br>
<code>obj==eval(repr(obj))</code><br>
example of <code>repr</code>:</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; dict = &#123;<span class="string">'runoob'</span>: <span class="string">'runoob.com'</span>, <span class="string">'google'</span>: <span class="string">'google.com'</span>&#125;;</div><div class="line">   &gt;&gt;&gt; repr(dict)</div><div class="line"><span class="string">"&#123;'google': 'google.com', 'runoob': 'runoob.com'&#125;"</span></div></pre></td></tr></table></figure>
<h4 id="filter">filter</h4>
<p>把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。<br>
python3起，filter 函数返回的对象从列表改为 filter object（迭代器）。</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">[item <span class="keyword">for</span> item <span class="keyword">in</span> filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]) ]</div></pre></td></tr></table></figure>
<h4 id="getattr-setattr-hasattr-delattr">getattr()/setattr()/hasattr()/delattr()</h4>
<blockquote>
<p>getattr(x, ‘foobar’) is equivalent to x.foobar</p>
</blockquote>
<p>All these function are similar. See <strong>docs</strong> for more.</p>
<h4 id="enumerate">enumerate</h4>
<p>如果mylist是一个二维数组：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i,line <span class="keyword">in</span> enumerate(mylist):</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p><strong>line是元组</strong></p>
<h4 id="next-iterator-default">next(iterator[, default])</h4>
<h4 id="print">print</h4>
<ul>
<li><code>print(end='str')</code></li>
</ul>
<h4 id="staticmethod-function">staticmethod(function)</h4>
<p>PS:</p>
<blockquote>
<p>@classmethod means: when this method is called, we pass the class as the first argument instead of the instance of that class (as we normally do with methods). This means you can use the class and its properties inside that method rather than a particular instance.<br>
@staticmethod means: when this method is called, we don’t pass an instance of the class to it (as we normally do with methods). This means you can put a function inside a class but you can’t access the instance of that class (this is useful when your method does not use the instance).</p>
</blockquote>
<p>classmethod涉及类，不涉及类的实例；staticmethod两者都不涉及，但与类有紧密的联系<br>
<a href="https://www.zhihu.com/question/20021164" target="_blank" rel="external">ref:</a></p>
<h4 id="sum">sum()</h4>
<p>sum(iterable[, start]) ，iterable</p>
<h4 id="vars">vars()</h4>
<p>From python doc:</p>
<blockquote>
<p><strong>Return the __dict__</strong> attribute for a module, class, instance, or any other object with a __dict__ attribute.</p>
</blockquote>
<h3 id="python-类属性-实例属性">Python——类属性/实例属性</h3>
<p><a href="http://blog.csdn.net/bolike/article/details/21554901" target="_blank" rel="external">Python——类属性/实例属性</a><br>
<a href="http://www.cnblogs.com/dream-for/p/5199308.html" target="_blank" rel="external">Python类属性，实例属性</a> #非常好</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">C.__name__     <span class="comment"># 类C的名字（字符串）</span></div><div class="line">C.__doc__      <span class="comment"># 类C的文档字符串</span></div><div class="line">C.__bases__    <span class="comment"># 类C的所有父类构成的元组</span></div><div class="line">C.__dict__     <span class="comment"># 类C的属性</span></div><div class="line">C.__module__   <span class="comment"># 类C定义所在的模块</span></div><div class="line">C.__class__    <span class="comment"># 实例C对应的类</span></div></pre></td></tr></table></figure>
<ul>
<li>module.<strong>file</strong><br>
<strong>含有module的路径！</strong></li>
</ul>
<h3 id="file">file</h3>
<ol>
<li>
<p><code>f.readline()/readlines()/write()/writelines()</code></p>
<ul>
<li><code>readline()</code>#每次读入一行</li>
<li><code>readlines()</code> #以list的形式存储每一行</li>
<li><code>write()</code> #自动换行</li>
<li><code>writelines()</code> #不自动换行</li>
</ul>
</li>
<li>
<p>f.closed<br>
注意closed是一个变量，值为True/False</p>
</li>
<li>
<p><code>for line in f:</code>用法<br>
下面程序将打印出<code>f</code>的内容</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">    print(line,end=<span class="string">''</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="list-comprehension">list comprehension</h3>
<ul>
<li>two fold list comprehension <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">content = f.readlines()</div><div class="line">word_list=[word <span class="keyword">for</span> line <span class="keyword">in</span> content <span class="keyword">for</span> word <span class="keyword">in</span> line.split()]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>语法结构的理解：<br>
list comprehension是将：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ...</div><div class="line">    <span class="keyword">for</span>/<span class="keyword">if</span> ...</div><div class="line">        do something ...</div></pre></td></tr></table></figure>
<p>写成为：<br>
<code>do something ... for ... for/if ...</code></p>
<h3 id="string">string</h3>
<h4 id="1-strip-s-chars-去掉首尾的字符">1. strip(s[, chars]) 去掉首尾的字符</h4>
<p>默认情况下strip() 去掉首尾的whitespace 【whitespace include \n, \t and \r】。</p>
<blockquote>
<p>The charsargument is not a prefix or suffix; rather, all combinations of its values are stripped:</p>
</blockquote>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; <span class="string">'www.example.com'</span>.strip(<span class="string">'cmowz.'</span>) </div><div class="line"><span class="string">'example'</span></div></pre></td></tr></table></figure>
<h4 id="2-format">2. format</h4>
<ul>
<li>
<p>significant digital(有效数字)</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; format(<span class="number">12.456789</span>, <span class="string">'.3g'</span>)</div><div class="line"><span class="string">'12.5'</span></div><div class="line">   &gt;&gt;&gt; format(<span class="number">12.456789</span>, <span class="string">'.3f'</span>)</div><div class="line"><span class="string">'12.457'</span></div><div class="line">   &gt;&gt;&gt; format(<span class="number">12.456789</span>, <span class="string">'.3e'</span>)</div><div class="line"><span class="string">'1.246e+01'</span></div><div class="line">   &gt;&gt;&gt; format(<span class="number">12.456789</span>, <span class="string">'.3%'</span>)</div><div class="line"><span class="string">'1245.679%'</span></div></pre></td></tr></table></figure>
</li>
<li>
<p><code>'{0:.2f} {1:s} {2:d}'.format( v0[,v1[v2...] )</code></p>
</li>
<li>
<p><code>'{:,.2f}'</code>中逗号表示较大的数字用逗号分隔，比如100万: <code>1, 000, 000</code></p>
</li>
<li>
<p>可以使用关键词</p>
</li>
<li>
<p>应用时转化：{!s}、{!r}</p>
</li>
<li>
<p>旧式字符串格式化符号是 %，如：{0:%.4f}</p>
</li>
</ul>
<h5 id="custom-object-define-format-in-a-class">custom object(define __format__ in a class)</h5>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HAL9000</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__format__</span><span class="params">(self, format)</span>:</span></div><div class="line">        <span class="keyword">if</span> (format == <span class="string">'open-the-pod-bay-doors'</span>):</div><div class="line">            <span class="keyword">return</span> <span class="string">"I'm afraid I can't do that."</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'HAL 9000'</span></div></pre></td></tr></table></figure>
<h5 id="datetime">datetime</h5>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="string">'&#123;:%Y-%m-%d %H:%M&#125;'</span>.format(datetime(<span class="number">2001</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</div></pre></td></tr></table></figure>
<p>Another Example:</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># expiry and timestamp is string like 2018-06-29T12:00:00.000Z and 2018-04-19T18:44:44.320Z</span></div><div class="line">FMT = <span class="string">'%Y-%m-%dT%H:%M:%S'</span></div><div class="line">time_delta = datetime.strptime(expiry, FMT) - datetime.strptime(timestamp, FMT)</div></pre></td></tr></table></figure>
<h5 id="named-placeholder">named placeholder</h5>
<p>use key to hold the place. <strong>input the dictionary as elements</strong></p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data = &#123;<span class="string">'first'</span>: <span class="string">'Hodor'</span>, <span class="string">'last'</span>: <span class="string">'Hodor!'</span>&#125;</div><div class="line"><span class="string">'&#123;first&#125; &#123;last&#125;'</span>.format(**data)</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="string">'&#123;first&#125; &#123;last&#125;'</span>.format(first=<span class="string">'Hodor'</span>, last=<span class="string">'Hodor!'</span>)</div></pre></td></tr></table></figure>
<h5 id="getitem-and-getattr">Getitem and Getattr</h5>
<h5 id="parametrized-formats">Parametrized formats</h5>
<h4 id="3-rjust-width-fillchar-ljust-center-is-similar">3. rjust(width[, fillchar])  【ljust(), center() is similar】</h4>
<h4 id="4-zfill-n-左侧填充0至n位">4. zfill(n) 左侧填充0至n位</h4>
<p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串。</p>
<h4 id="5-split-str-num-string-count-str-str-and-num-is-not-a-kewword">5. split(str=&quot;&quot;, num=string.count(str)) # str and num is not a kewword</h4>
<ul>
<li>num – 分割次数。</li>
<li><strong>注意split后常会产生空字符</strong></li>
</ul>
<h4 id="6-join">6. join</h4>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">out.write(<span class="string">" "</span>.join(mylist))</div><div class="line"><span class="comment"># 用" "链接mylist中的iterm</span></div></pre></td></tr></table></figure>
<ul>
<li>elegant use <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">out.write(<span class="string">" "</span>.join( map(str,iterable)  ))</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="7-encode-decode">7. encode()/decode()</h4>
<ul>
<li>str.encode(encoding=“utf-8”, errors=“strict”)
<blockquote>
<p>设置不同错误的处理方案。默认为 ‘strict’,意为编码错误引起一个UnicodeError。 其他可能得值有 ‘ignore’, ‘replace’, ‘xmlcharrefreplace’, ‘backslashreplace’ 以及通过 codecs.register_error() 注册的任何值。</p>
</blockquote>
</li>
</ul>
<h3 id="or-and-operator">or / and operator</h3>
<p>ref: <a href="https://www.quora.com/How-do-the-and-and-or-operators-work-in-Python" target="_blank" rel="external">How do the “and” and “or” operators work in Python?</a><br>
two additional functionality:</p>
<ul>
<li>short circuiting(短路求值) <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> param <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> param[<span class="string">'foo'</span>] == <span class="number">3</span>:</div><div class="line">	<span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>becasue of short circuiting, even if <code>param</code> doesn’t exist,  <code>param['foo']</code> won’t report error.</p>
<ul>
<li>
<p>Objects can have a boolean value</p>
<blockquote>
<p>Objects can have a boolean value, and boolean operators respect that.</p>
</blockquote>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">my_list = [<span class="string">"abc"</span>, <span class="string">"123"</span>]</div><div class="line">[<span class="string">"abc"</span>, <span class="string">"123"</span>] <span class="keyword">or</span> []</div><div class="line">   &gt;&gt;&gt; [<span class="string">"abc"</span>, <span class="string">"123"</span>]</div></pre></td></tr></table></figure>
</li>
<li>
<p>short circuiting when objects have a boolean value<br>
Still take a list as an example:</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[] <span class="keyword">and</span> [<span class="string">"abc"</span>, <span class="string">"123"</span>]</div><div class="line">   &gt;&gt;&gt; []</div><div class="line"><span class="comment">#<span class="doctag">NOTE:</span></span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>] <span class="keyword">and</span> [<span class="string">"abc"</span>, <span class="string">"123"</span>]</div><div class="line">   &gt;&gt;&gt; [<span class="string">"abc"</span>, <span class="string">"123"</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="ternary-operator">ternary operator</h3>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result=<span class="string">'5 is larger than 3'</span> <span class="keyword">if</span> <span class="number">5</span>&gt;<span class="number">3</span> <span class="keyword">else</span> <span class="string">'5 is not larger than 3'</span></div></pre></td></tr></table></figure>
<h3 id="deep-copy">deep copy</h3>
<ul>
<li><code>import copy</code></li>
<li><code>dict.copy(mydict)</code></li>
</ul>
<h3 id="cli">CLI</h3>
<ul>
<li><code>python -c &quot;print('hello world')&quot;</code></li>
<li><code>python -m mymodule</code>
<ol>
<li>sys.path is changed</li>
<li>it’s equal to <code>python mymodule.py</code></li>
</ol>
</li>
</ul>
<h2 id="other-useful-things">other useful things</h2>
<h3 id="try-exception">try-exception</h3>
<p>ref: <a href="https://stackoverflow.com/questions/16138232/is-it-a-good-practice-to-use-try-except-else-in-python" target="_blank" rel="external">Is it a good practice to use try-except-else in Python? (Answer is: Yes)</a></p>
<ol>
<li>
<p>这种用法是标准用法</p>
</li>
<li>
<p>so-called race-condition<br>
如果用<code>if</code>语句，错误可能出现在你检测之后，问题才出现（比如你检查磁盘是否有足够空间，可能你检查之后，磁盘又没有空间了）。try-exception则没有这个问题。</p>
</li>
<li>
<p>try-exception is very efficient<br>
CPython already implements code for exception checking at every step, regardless of whether you actually use exceptions or not</p>
</li>
<li>
<p><code>finally:</code> 之后的语句一定会被执行，哪怕之前已经执行了<code>return</code>语句! <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p>
<blockquote>
<p><code>finally</code> will execute no matter what, even if another line is being evaluated with a return statement.</p>
</blockquote>
</li>
</ol>
<p>e.g.<sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3]</a></sup>:</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    try_this(whatever)</div><div class="line"><span class="keyword">except</span> SomeException <span class="keyword">as</span> the_exception:</div><div class="line">    handle_SomeException(the_exception)</div><div class="line"><span class="keyword">else</span>: </div><div class="line">    <span class="keyword">return</span> something()</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>NOTE: 这个过程中，<code>something()</code>将会被调用执行，但不会被返回！因为<code>finally</code>劫持了程序，最终返回值为<code>True</code>.</p>
<ol start="5">
<li>
<p><code>raise</code> or <code>raise ... from</code>! Don’t <code>raise Error</code><br>
Always <code>raise</code> (not <code>raise Error</code>) because in this way stacktrace will be kept.<br>
Or <code>raise ... from</code>, this can preserve the backtrace with exception chaining too:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    try_this(whatever)</div><div class="line"><span class="keyword">except</span> SomeException <span class="keyword">as</span> the_exception:</div><div class="line">    handle(the_exception)</div><div class="line">    <span class="keyword">raise</span> <span class="comment"># simplly raise it to upper level. This can keep stacktrace</span></div><div class="line">    <span class="comment"># or do it like this:</span></div><div class="line">    <span class="comment"># raise DifferentException from the_exception</span></div></pre></td></tr></table></figure>
</li>
<li>
<p>args of error<br>
e.g.:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">raise</span> ValueError(<span class="string">"Bala bala"</span>, <span class="number">3.14</span>)</div><div class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</div><div class="line">    print(e.args)</div><div class="line">    <span class="comment"># output is "Bala bala", 3.14</span></div><div class="line"></div><div class="line">    <span class="comment"># print traceback</span></div><div class="line">    print(traceback.format_exc())</div><div class="line">    <span class="comment"># or </span></div><div class="line">    print(traceback.format_tb( sys.exc_info()[<span class="number">2</span>] ))</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注意<code>raise</code>，没有写<code>raise</code>相当于没有错误发生！例子如下：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    ValueError(<span class="string">"Bala bala"</span>, <span class="number">3.14</span>)</div><div class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</div><div class="line">    print(e.args)</div><div class="line">    <span class="comment"># no output</span></div></pre></td></tr></table></figure>
<ol start="7">
<li>traceback<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">raise</span> ValueError(<span class="string">"Bala bala"</span>, <span class="number">3.14</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    print(sys.exc_info())</div><div class="line">    <span class="comment"># exc_info contains three object: a type object, a Error object and a traceback object</span></div><div class="line">    <span class="comment"># Note: if Error is catched by 'except' statement, then in 'finally:' statement `print(sys.exc_info())` has no output</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="best-practice">best practice</h4>
<p>ref: <a href="http://yosefk.com/blog/error-codes-vs-exceptions-critical-code-vs-typical-code.html" target="_blank" rel="external">Error codes vs exceptions: critical code vs typical code</a><br>
如果你真的对可能出现的错误了如指掌，这时候采用error code；一般情况下，都要用exception，它使你很容易debug。</p>
<h4 id="tips">TIPS</h4>
<p><a href="https://stackoverflow.com/questions/6278426/raising-exceptions-when-an-exception-is-already-present-in-python-3" target="_blank" rel="external">Raising exceptions when an exception is already present in Python 3</a></p>
<h3 id="ipython">ipython</h3>
<ol>
<li><a href="https://www.cnblogs.com/cuiyubo/p/6823478.html" target="_blank" rel="external">入门</a></li>
</ol>
<ul>
<li>“?” 帮助与显示信息<br>
<code>?save</code> 会给出save命令的用法、对象的签名<br>
<code>??your_function</code> 显示源代码</li>
<li><code>!pwd</code> 加!执行shell command</li>
<li><code>%hist</code></li>
<li><code>%edit</code> 使用编辑器打开</li>
</ul>
<ol start="2">
<li><code>%save your_filename 1-30</code></li>
</ol>
<h3 id="conda">conda</h3>
<ul>
<li>
<p>minicoda<br>
<code># pip install conda # does not work!</code><br>
<mark>You have to download miniconda to use conda as package manager.</mark></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/22678445" target="_blank" rel="external">使用conda管理python环境</a></p>
</li>
<li>
<p>anaconda<br>
<a href="http://python.jobbole.com/86236/" target="_blank" rel="external">Anaconda使用总结</a></p>
</li>
<li>
<p>conda install scipy #安装scipy</p>
<ul>
<li><code>conda install --download-only ipython-notebook</code></li>
<li><code>conda install --offline -f ***.tar.bz2</code> 离线安装</li>
</ul>
</li>
<li>
<p>conda list #列出已安装的包</p>
</li>
<li>
<p>环境<br>
<code>conda create -n env_name python=2.7 # create new env</code><br>
<code>conda env list # list all env</code><br>
<code>conda env export &gt; environment.yml # export to file</code><br>
<code>source activate your_env_name # enter your env.</code><br>
<code>source activate root # to switch back</code></p>
</li>
<li>
<p>update python major version<br>
Search a lot by google and finally I just <code>rf -rf ~/Anaconda</code> and re-install it.<br>
What was said in <a href="https://stackoverflow.com/questions/41535881/how-do-i-upgrade-to-python-3-6-with-conda" target="_blank" rel="external">stackoverflow: How do I upgrade to Python 3.6 with conda?</a> is true. It’s very hard to update python major version in-place.</p>
</li>
<li>
<p>upgrade pip in anaconda!<br>
<code>pip install --upgrade your_package</code><br>
此时pip会试图更细，并删掉老版本pip。<br>
然而mac上更新pip是需要root权限的！这就导致老版本被删掉，而新版本没有被安装！<br>
解决：easy_install pip</p>
</li>
</ul>
<h3 id="pip">pip</h3>
<ul>
<li>Usage：<code>pip --help</code><br>
<a href="http://www.tuicool.com/articles/NFV3yaJ" target="_blank" rel="external">for more info</a></li>
<li>install<br>
<a href="https://www.cnblogs.com/mangoVic/p/6428369.html" target="_blank" rel="external">centos7下使用yum安装pip</a>
<blockquote>
<p>首先安装epel扩展源：<br>
　　yum -y install epel-release<br>
　　更新完成之后，就可安装pip：<br>
　　yum -y install python-pip<br>
　　安装完成之后清除cache：<br>
　　yum clean all</p>
</blockquote>
</li>
<li>更新<br>
<code>pip install --upgrade your_package</code></li>
</ul>
<h4 id="error">error</h4>
<ul>
<li>
<p>Could not fetch URL <a href="https://pypi.python.org/simple/pytest-cov/" target="_blank" rel="external">https://pypi.python.org/simple/pytest-cov/</a>…</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   Could not fetch URL https://pypi.python.org/simple/pytest-cov/: There was a problem confirming the ssl certificate: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:600) - skipping</div><div class="line">  Could not find a version that satisfies the requirement pytest-cov (from versions: )</div><div class="line">No matching distribution found for pytest-cov</div></pre></td></tr></table></figure>
<p>解决：</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --trusted-host pypi.python.org pytest-xdist</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="my-snippet">My Snippet</h3>
<ul>
<li>translate in one line:<br>
Translate word by word: <code>[ your_dict[i] if i in your_dict else i for i in some_words ]</code></li>
<li>string to number: commas as thousands separators <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> locale</div><div class="line">locale.setlocale( locale.LC_ALL, <span class="string">'en_US.UTF-8'</span>  ) </div><div class="line">locale.atoi(<span class="string">'1,000,000'</span>)</div><div class="line">locale.atof(<span class="string">'1,000,000.53'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>circleci2.0</li>
<li><a href="https://docs.python.org/3/library/" target="_blank" rel="external">python标准库列表</a></li>
</ul>
<h2 id="工程能力">工程能力</h2>
<h3 id="oop">OOP</h3>
<ul>
<li>
<p>工厂函数<br>
见python核心编程：工厂函数看上去有点像函数，实质上他们是类，当你调用它们时，实际上是生成了该类型的一个实例，就像工厂生产货物一样.<br>
e.g., <code>list()</code>, <code>set()</code>就是工厂函数，输入Iterable对象，它们就会生产出list或set的实例。</p>
</li>
<li>
<p>关联，聚合，组合三者的异同<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>  <sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup><br>
相同点：都是说两个类的关系，下面以class A和class B为例。<br>
不同点：A和B之间的依赖程度不同</p>
<table>
<thead>
<tr>
<th></th>
<th>关联</th>
<th>聚合</th>
<th>组合</th>
</tr>
</thead>
<tbody>
<tr>
<td>依赖程度</td>
<td>A可以没有B<br>B可以没有A</td>
<td>A可以没有B</td>
<td>A不可以没有B</td>
</tr>
<tr>
<td>例子</td>
<td>B是A的朋友<br>AB为关联关系</td>
<td>B是A的衬衫<br>AB为聚合关系</td>
<td>B是A的心脏<br>AB为组合关系</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><code>__init__</code><br>
Some people may think <a href="https://stackoverflow.com/questions/20661448/python-should-all-member-variables-be-initialized-in-init" target="_blank" rel="external">setting all instance variables in the __init__ is cleaner</a>.<br>
However, notice that setting a class attribute will make this attribute accessible in the class, even if you just want this attribute accessible to some method.<br>
So my point is instance and initialize variables unless you need it.</p>
</li>
<li>
<p>TIPS</p>
<ul>
<li>UML(Unified Modeling Language)本身很少有应用了，但是提出的概念广为人知，并且很有用。</li>
</ul>
</li>
</ul>
<h3 id="best-practice-v2">best practice</h3>
<ul>
<li><code>my_return= my_funct(para=para)</code>是可以的<br>
上面左边的<code>para</code>是参数名，右边的是变量名，这样写是可以的，而且是明了的。</li>
</ul>
<h3 id="debug">debug</h3>
<p>要融汇的方法<sup class="footnote-ref"><a href="#fn3" id="fnref3:2">[3]</a></sup>：</p>
<blockquote>
<p>回答先在本地重现的就算了吧……那么容易就能重现通常说明最基本的代码逻辑覆盖测试都没做好。相比起C/C++来说，动态语言还是比较幸福的，异常都有详细的堆栈，只要打印到日志里就行了，错误信息通常也比较明确。要点在于该打印的日志一点都不能少，严禁在出现异常的时候只打印错误信息而不打堆栈。但归根结底来说，发现和解决bug靠的是良好的程序结构，必要的defensive（关键函数的参数合法性校验等），自动化的测试流程，线上调试只是亡羊补牢。</p>
</blockquote>
<h3 id="test">test</h3>
<p>pytest比较好！从它入门 ！<br>
<a href="https://stackoverflow.com/questions/28408750/unittest-vs-pytest-vs-nose" target="_blank" rel="external">unittest vs pytest vs nose </a><br>
<a href="http://pythontesting.net/transcripts/2-pytest-vs-unittest-vs-nose/" target="_blank" rel="external">Pytest vs Unittest vs Nose</a> 【详细的对比】<br>
待读！：<br>
<a href="https://stackoverflow.com/questions/3371255/writing-unit-tests-in-python-how-do-i-start" target="_blank" rel="external">Writing unit tests in Python: How do I start? </a><br>
<a href="https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing/" target="_blank" rel="external">Improve Your Python: Understanding Unit Testing</a><br>
<a href="http://www.cnblogs.com/beer/p/5075619.html" target="_blank" rel="external">python自动化测试</a> 【先读】<br>
<a href="http://www.cnblogs.com/yufeihlf/p/5752146.html" target="_blank" rel="external">最完整的自动化测试流程</a></p>
<h3 id="tips-v2">TIPS</h3>
<h4 id="unrar-file-with-password-in-python">unrar file with password in python?</h4>
<p>IT IS VERY HARD! STOP IT.<br>
Just run <code>unrar x 001.rar -ppassword</code> in shell!</p>
<ul>
<li>pyunpack + patool + unrar (sucks!)<br>
To unrar a file, you need install 2 python lib and 1 shell command(unrar).<br>
And it comes to an end that you can’t unrar files with password!</li>
</ul>
<h2 id="python缺点">python缺点</h2>
<ul>
<li>efficiency
<ul>
<li>slow than java</li>
<li>global lock, which makes multi-threads suck</li>
</ul>
</li>
<li>hard to distribution (compare to JAVA et al., python is dependent to package)</li>
<li>easily decompiled
<ul>
<li>workaround<br>
Encapsulate the whole program to a web service; compile by cpython? (I’m not sure how this works)</li>
</ul>
</li>
</ul>
<h3 id="和其他语言的对比">和其他语言的对比</h3>
<ul>
<li>ruby<br>
ruby最大的优势在于Ruby on Rails</li>
</ul>
<h3 id="我的经验">我的经验</h3>
<ul>
<li>都说python有很多包、方便，然而包里有可能有很多坑（bug or bad practice），比如Pillow中遇到过<code>**karg</code>的滥用。这些特点使得python很容易开发原型，但很难构建稳定、高效、一致的大型应用。</li>
<li>有不少不符合直觉的&quot;feature&quot;<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2]</a></sup><br>
例如： <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; a = ([<span class="number">1</span>], [<span class="number">2</span>])</div><div class="line">   &gt;&gt;&gt; a[<span class="number">0</span>] += [<span class="number">3</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">""</span>, line <span class="number">1</span>, <span class="keyword">in</span> </div><div class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</div><div class="line">   &gt;&gt;&gt; a</div><div class="line">([<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>])</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="reference">reference</h2>
<!-- ^6~^8 is used in logging module -->
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)#Features_and_philosophy" target="_blank" rel="external">Python</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://www.zhihu.com/question/66941121" target="_blank" rel="external">有哪些明明是 bug，却被说成是 feature 的例子？</a> <a href="#fnref2" class="footnote-backref">↩</a> <a href="#fnref2:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://www.zhihu.com/people/ling-jian-94/answers" target="_blank" rel="external">老程序员解bug有那些通用套路？</a> <a href="#fnref3" class="footnote-backref">↩</a> <a href="#fnref3:1" class="footnote-backref">↩</a> <a href="#fnref3:2" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://stackoverflow.com/questions/19861785/composition-and-aggregation-in-python/37910618#37910618" target="_blank" rel="external">N Randhawa’s answer</a> <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
<li id="fn5" class="footnote-item"><p><a href="http://www.cnblogs.com/angushine/archive/2008/06/16/1223055.html" target="_blank" rel="external">关联，聚合，组合</a> <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;br&gt;
Python features a dynamic type system and automatic memory management and supports multiple programming paradigms.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://timchen314.com/categories/python/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
      <category term="编程语言" scheme="http://timchen314.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>python modules</title>
    <link href="http://timchen314.com/python_modules/"/>
    <id>http://timchen314.com/python_modules/</id>
    <published>2017-10-02T10:00:00.000Z</published>
    <updated>2019-06-14T07:37:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]<br>
Python features a dynamic type system and automatic memory management and supports multiple programming paradigms.</p>
<a id="more"></a>
<h2 id="module">module</h2>
<p><a href="http://funhacks.net/2016/12/27/regular_expression/#match-%E6%96%B9%E6%B3%95" target="_blank" rel="external">Python 正则表达式 re 模块</a></p>
<h3 id="asyncio">asyncio</h3>
<p><a href="https://zhuanlan.zhihu.com/p/27258289" target="_blank" rel="external">ref1: Python Async/Await入门指南</a></p>
<p>Note: asynchronous generators and asynchronous comprehensions is added until python3.6</p>
<blockquote>
<p>Python中常见的四种函数形式：</p>
</blockquote>
<ol>
<li>普通函数</li>
<li>生成器函数<br>
在3.5过后，我们可以使用async修饰将普通函数和生成器函数包装成异步函数和异步生成器。</li>
<li>异步函数（协程）</li>
<li>异步生成器</li>
</ol>
<h4 id="coroutine">coroutine</h4>
<ol>
<li>
<p>直接调用异步函数不会返回结果，而是返回一个coroutine对象：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(async_function())</div><div class="line"><span class="comment"># &lt;coroutine object async_function at 0x102ff67d8&gt;</span></div></pre></td></tr></table></figure>
</li>
<li>
<p>协程需要通过其他方式来驱动，因此可以使用这个协程对象的send方法给协程发送一个值：<br>
<code>print(async_function().send(None))</code><br>
不幸的是，如果通过上面的调用会抛出一个异常：<br>
<code>StopIteration: 1</code><br>
因为<strong>生成器/协程在正常返回退出时会抛出一个StopIteration异常，而原来的返回值会存放在StopIteration对象的value属性中，通过以下捕获可以获取协程真正的返回值</strong>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(coroutine)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        coroutine.send(<span class="keyword">None</span>)</div><div class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">return</span> e.value</div></pre></td></tr></table></figure>
</li>
<li>
<p>await<br>
await: suspends the execution of the coroutine until the awaitable it takes completes and returns the result.</p>
</li>
</ol>
<p>await语法只能出现在通过async修饰的函数中，否则会报SyntaxError错误。</p>
<blockquote>
<p>原理：<br>
await后面的对象需要是一个Awaitable，或者实现了相关的协议。<br>
查看Awaitable抽象类的代码，表明了只要一个类实现了<code>__await__</code>方法，那么通过它构造出来的实例就是一个Awaitable：<br>
Coroutine类继承了Awaitable，而且实现了send，throw和close方法。所以await一个调用异步函数返回的协程对象是合法的。<br>
For more details see ref1.</p>
</blockquote>
<h4 id="event">event</h4>
<ul>
<li>
<p>run_until_complete</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">loop = asyncio.get_event_loop()  </div><div class="line">...</div><div class="line">loop.run_until_complete() <span class="comment"># it's blocking (阻塞)</span></div></pre></td></tr></table></figure>
</li>
<li>
<p><code>Event loop is closed</code><br>
Jupyter的一个project就是一个进程，而一个进程中默认只有一个event。例如：</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; <span class="keyword">import</span> asyncio</div><div class="line">   &gt;&gt;&gt; asyncio.get_event_loop().close()</div><div class="line">   &gt;&gt;&gt; asyncio.get_event_loop().is_closed()</div><div class="line"><span class="keyword">True</span></div><div class="line">   &gt;&gt;&gt; asyncio.get_event_loop().run_until_complete(asyncio.sleep(<span class="number">1</span>))</div><div class="line">.....</div><div class="line">RuntimeError: Event loop <span class="keyword">is</span> closed</div></pre></td></tr></table></figure>
</li>
</ul>
<p>event loop在asyncio中有复杂的机制，引用Flask作者著名的文章<a href="http://lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio/" target="_blank" rel="external">I don’t understand Python’s Asyncio</a></p>
<blockquote>
<p>On the surface it looks like each thread has one event loop but that’s not really how it works.</p>
</blockquote>
<ul>
<li>if you are the main thread an event loop is created when you call asyncio.get_event_loop()</li>
<li>if you are any other thread, a runtime error is raised from asyncio.get_event_loop()</li>
<li>You can at any point asyncio.set_event_loop() to bind an event loop with the current thread. Such an event loop can be created with the asyncio.new_event_loop() function.</li>
<li>Event loops can be used without being bound to the current thread.</li>
<li>asyncio.get_event_loop() returns the thread bound event loop, it does not return the currently running event loop.</li>
</ul>
<p>更详细的讨论请参见原文，总之这里有许多问题。</p>
<p>如果想避免之前的示例问题，参考<a href="https://juejin.im/post/59c381aaf265da064c3860d8" target="_blank" rel="external">在一段Python程序中使用多次事件循环</a>一文，可以如下操作：</p>
<blockquote>
<p>我们可以使用asyncio.new_event_loop函数建立一个新的事件循环，并使用asyncio.set_event_loop设置全局的事件循环，这时候就可以多次运行异步的事件循环了，不过最好保存默认的asyncio.get_event_loop并在事件循环结束的时候还原回去。</p>
</blockquote>
   <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import asyncio</div><div class="line">async def doAsync():</div><div class="line">    await asyncio.sleep(0)</div><div class="line">    #...</div><div class="line">def runEventLoop()</div><div class="line">    loop = asyncio.new_event_loop()</div><div class="line">    asyncio.set_event_loop(loop)</div><div class="line">    loop.run_until_complete(doAsync())</div><div class="line">    loop.close()</div><div class="line">if __name__ == "__main__":</div><div class="line">    oldloop = asyncio.get_event_loop()</div><div class="line">    runEventLoop()</div><div class="line">    runEventLoop()</div><div class="line">    asyncio.set_event_loop(oldloop)</div></pre></td></tr></table></figure>
<h4 id="gather">gather</h4>
<p><a href="https://stackoverflow.com/questions/32456881/getting-values-from-functions-that-run-as-asyncio-tasks" target="_blank" rel="external">ref: Getting values from functions that run as asyncio tasks</a></p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">loop = asyncio.get_event_loop()</div><div class="line">tasks = func_normal(), func_infinite()</div><div class="line">a, b = loop.run_until_complete(asyncio.gather(*tasks))</div><div class="line">print(<span class="string">"func_normal()=&#123;a&#125;, func_infinite()=&#123;b&#125;"</span>.format(**vars()))  <span class="comment"># 这段输出的代买没看懂</span></div><div class="line">loop.close()</div></pre></td></tr></table></figure>
<p>另外，run_until_complete也会返回函数结果：</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">done, _ = loop.run_until_complete(asyncio.wait(tasks))</div><div class="line"><span class="keyword">for</span> fut <span class="keyword">in</span> done:</div><div class="line">    print(<span class="string">"return value is &#123;&#125;"</span>.format(fut.result()))</div><div class="line">loop.close()</div></pre></td></tr></table></figure>
<h4 id="tips">Tips</h4>
<ul>
<li><code>asyncio.run()</code> is added in python3.7</li>
<li><code>asyncio.sleep(1)</code><br>
异步 I/O 里面的 sleep() 方法, 它也是一个协程, 异步 I/O 里面不能使用 time.sleep(), time.sleep() 会阻塞整个线程</li>
</ul>
<ul>
<li><code>RuntimeError: This event loop is already running</code> problem<br>
This problem happens because:
<blockquote>
<p>The kernel itself runs on an event loop, and as of Tornado 5.0, it’s using the asyncio event loop. So the asyncio event loop is always running in the kernel.</p>
</blockquote>
</li>
</ul>
<p><a href="https://github.com/jupyter/notebook/issues/3397" target="_blank" rel="external">Can’t invoke asyncio event_loop after tornado 5.0 update</a><br>
Solvation:<br>
<code>pip3 install tornado==4.5.3</code> and restart notebook</p>
<h3 id="aiohttp">aiohttp</h3>
<p><a href="https://blog.csdn.net/u014595019/article/details/52295642" target="_blank" rel="external">ref: 异步爬虫: async/await 与 aiohttp的使用，以及例子</a></p>
<ul>
<li>
<p>get</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="keyword">with</span> aiohttp.get(<span class="string">'https://github.com'</span>) <span class="keyword">as</span> r:</div><div class="line">        <span class="keyword">await</span> r.text()</div></pre></td></tr></table></figure>
</li>
<li>
<p>timeout</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> aiohttp.Timeout(<span class="number">0.001</span>):</div><div class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.get(<span class="string">'https://github.com'</span>) <span class="keyword">as</span> r:</div><div class="line">        <span class="keyword">await</span> r.text()</div></pre></td></tr></table></figure>
</li>
<li>
<p>session</p>
<blockquote>
<p>session可以进行多项操作，比如post, get, put, head等等</p>
</blockquote>
</li>
</ul>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(url,res_list)</span>:</span></div><div class="line">    headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span>&#125;</div><div class="line">    <span class="comment">### example of proxy and cookie</span></div><div class="line">    <span class="comment"># conn = aiohttp.ProxyConnector(proxy="http://127.0.0.1:8087")</span></div><div class="line">    <span class="comment"># session.get(url,headers=headers, connector=conn)</span></div><div class="line">    <span class="comment"># async with ClientSession(&#123;'cookies_are': 'working'&#125;) as session:</span></div><div class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</div><div class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url,headers=headers) <span class="keyword">as</span> resp:</div><div class="line">            <span class="keyword">assert</span> resp.status==<span class="number">200</span></div><div class="line">            res_list.append(<span class="keyword">await</span> resp.text())</div></pre></td></tr></table></figure>
<h3 id="atexit">atexit</h3>
<p>ref:  <a href="https://www.jb51.net/article/107630.htm" target="_blank" rel="external">深入理解python中的atexit模块</a> 非常好的简介，如果需要进一步了解，可以参考。</p>
<blockquote>
<p>atexit 模块介绍<br>
python atexit 模块定义了一个 register 函数，用于在 python 解释器中注册一个退出函数，这个函数在解释器正常终止时自动执行,一般用来做一些资源清理的操作。 atexit 按注册的相反顺序执行这些函数; 例如注册A、B、C，在解释器终止时按顺序C，B，A运行。<br>
Note：如果程序是非正常crash，或者通过os._exit()退出，注册的退出函数将不会被调用。</p>
</blockquote>
<h3 id="heapq-heap-queue-algorithm">heapq (Heap queue algorithm)</h3>
<ul>
<li>nlargest/nsmallest <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">nums = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">18</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">37</span>, <span class="number">2</span>]</div><div class="line">heapq.nlargest(<span class="number">3</span>, nums)</div><div class="line"><span class="comment"># or more complicated:</span></div><div class="line">portfolio = [</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'IBM'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>: <span class="number">91.1</span>&#125;,</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'AAPL'</span>, <span class="string">'shares'</span>: <span class="number">50</span>, <span class="string">'price'</span>: <span class="number">543.22</span>&#125;,</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'FB'</span>, <span class="string">'shares'</span>: <span class="number">200</span>, <span class="string">'price'</span>: <span class="number">21.09</span>&#125;,</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'HPQ'</span>, <span class="string">'shares'</span>: <span class="number">35</span>, <span class="string">'price'</span>: <span class="number">31.75</span>&#125;,</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'YHOO'</span>, <span class="string">'shares'</span>: <span class="number">45</span>, <span class="string">'price'</span>: <span class="number">16.35</span>&#125;,</div><div class="line">    &#123;<span class="string">'name'</span>: <span class="string">'ACME'</span>, <span class="string">'shares'</span>: <span class="number">75</span>, <span class="string">'price'</span>: <span class="number">115.65</span>&#125;</div><div class="line">]</div><div class="line">cheap = heapq.nsmallest(<span class="number">3</span>, portfolio, key=<span class="keyword">lambda</span> s: s[<span class="string">'price'</span>])</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="re-module">re module</h3>
<h4 id="compile">compile</h4>
<p>[Python Regex Flags] (<a href="http://xahlee.info/python/python_regex_flags.html" target="_blank" rel="external">http://xahlee.info/python/python_regex_flags.html</a>)</p>
<ol>
<li>
<p>compile(r’[0-9]+’)<br>
Usage:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">pattern = re.compile(<span class="string">r'[0-9]+'</span>)</div><div class="line">frist_number = pattern.match(your_str).group(<span class="number">0</span>)</div></pre></td></tr></table></figure>
</li>
<li>
<p>another example</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">mys = <span class="string">'abe(ac)ad)'</span></div><div class="line">p1 = re.compile(<span class="string">r'[(](.*?)[)]'</span>, re.S)  </div><div class="line">match_list = re.findall(p1, mys) <span class="comment"># findall return a list of matched string</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="other-func">other func</h4>
<ol>
<li>
<p>replace(str1, str2)</p>
</li>
<li>
<p>split()</p>
<blockquote>
<p>string 对象的 split() 方法只适应于非常简单的字符串分割情形， 它并不允许有多个分隔符或者是分隔符周围不确定的空格。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; line = <span class="string">'asdf fjdk; afed, fjek,asdf, foo'</span></div><div class="line">   &gt;&gt;&gt; re.split(<span class="string">r'[;,\s]\s*'</span>, line)</div><div class="line">[<span class="string">'asdf'</span>, <span class="string">'fjdk'</span>, <span class="string">'afed'</span>, <span class="string">'fjek'</span>, <span class="string">'asdf'</span>, <span class="string">'foo'</span>]</div></pre></td></tr></table></figure>
<blockquote>
<p>当你使用 re.split() 函数时候，需要特别注意的是正则表达式中是否包含一个括号捕获分组。 如果使用了捕获分组，那么被匹配的文本也将出现在结果列表中。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; fields = re.split(<span class="string">r'(;|,|\s)\s*'</span>, line)</div><div class="line">   &gt;&gt;&gt; fields</div><div class="line">[<span class="string">'asdf'</span>, <span class="string">' '</span>, <span class="string">'fjdk'</span>, <span class="string">';'</span>, <span class="string">'afed'</span>, <span class="string">','</span>, <span class="string">'fjek'</span>, <span class="string">','</span>, <span class="string">'asdf'</span>, <span class="string">','</span>, <span class="string">'foo'</span>]</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="sys-module">sys module</h3>
<ul>
<li>sys.version/version_info(version_info is a object)</li>
</ul>
<h3 id="os-module">os module</h3>
<h4 id="1-about-path">1. about path</h4>
<p><a href="http://www.cnblogs.com/dkblog/archive/2011/03/25/1995537.html" target="_blank" rel="external">os.path模块</a></p>
<ul>
<li>
<p>about path</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">os.getcwd()</div><div class="line">os.chdir(<span class="string">'../'</span>)</div><div class="line">os.listdir()</div><div class="line">os.chdir(<span class="string">'../'</span>)</div><div class="line">os.path.exist   <span class="comment">#determine if a file or dir exists</span></div></pre></td></tr></table></figure>
</li>
<li>
<p>os.remove<br>
remove a file; if file does not exists, an Error will be throwed out.</p>
</li>
<li>
<p>os.rmdir<br>
remove a dir</p>
</li>
<li>
<p>os.path.splitext(path)<br>
Split the pathname path into a pair (root, ext)</p>
</li>
<li>
<p>os.path.basename(your_path)</p>
</li>
</ul>
<h4 id="2-os-popen">2. <s>os.popen</s></h4>
<ol>
<li>
<p><strong>shell cmd is executed in background and you can’t change it</strong></p>
</li>
<li>
<p>inplemented by <em>subprocess.Popen</em>, so why not you use <em>subprocess</em>?</p>
</li>
</ol>
<p><a href="https://docs.python.org/3.5/library/os.html?highlight=os.popen#os.popen" target="_blank" rel="external">python doc</a></p>
<h3 id="time-calendar">time &amp; calendar</h3>
<p><a href="http://www.runoob.com/python/python-date-time.html" target="_blank" rel="external">Python 日期和时间 runoob</a></p>
<ul>
<li>
<p>‘datetime’ object &amp; ‘timedelta’ object</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; datetime.strptime(<span class="string">"2018-11-28T19:57:01.522Z"</span>,FMT)</div><div class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">11</span>, <span class="number">28</span>, <span class="number">19</span>, <span class="number">57</span>, <span class="number">1</span>, <span class="number">522000</span>)</div><div class="line">   &gt;&gt;&gt; datetime.strptime(<span class="string">"2018-11-28T19:56:55.557Z"</span>,FMT) - datetime.strptime(<span class="string">"2018-11-28T19:57:01.522Z"</span>,FMT)</div><div class="line">datetime.timedelta(<span class="number">-1</span>, <span class="number">86394</span>, <span class="number">35000</span>)</div></pre></td></tr></table></figure>
</li>
<li>
<p>time.time()	<br>
Return the current time in seconds since the Epoch.</p>
</li>
<li>
<p>mktime(tupletime)</p>
</li>
<li>
<p>localtime()		<br>
Convert seconds since the Epoch to a time tuple expressing local time.<br>
When ‘seconds’ is not passed in, convert the current time instead.</p>
</li>
<li>
<p>strftime()	<br>
<code>strftime(format[, tuple]) # -&gt; string</code></p>
</li>
<li>
<p>strptime()	<br>
<code>strptime(string, format) # -&gt; struct_time</code><br>
Parse a string to a time tuple according to a format specification.</p>
</li>
<li>
<p>time.sleep(secs)</p>
</li>
<li>
<p>calendar.isleap(year)</p>
</li>
<li>
<p>calendar.weekday(year,month,day)</p>
</li>
</ul>
<h3 id="subprocess-module">subprocess module</h3>
<p><a href="https://docs.python.org/3.5/library/subprocess.html?highlight=subprocess#frequently-used-arguments" target="_blank" rel="external">python doc</a></p>
<h4 id="1-for-cmd-that-needn-t-stdout">1.  For cmd that needn’t stdout</h4>
<p><code>subprocess.run(&quot;cp standard_py/*py .&quot;, shell=True, check=True)</code></p>
<ul>
<li><em>shell=True</em><br>
you can use a string instead of a series of args!</li>
<li><em>check=True</em><br>
throw an Error if shell cmd exit wrong!</li>
</ul>
<h4 id="2-for-cmd-needing-stdout">2. For cmd needing stdout</h4>
<p>An example:</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ret = subprocess.run(<span class="string">"ls standard_py/*py"</span>, shell=<span class="keyword">True</span>, check=<span class="keyword">True</span>, universal_newlines=<span class="keyword">True</span>, stdout=PIPE)</div><div class="line">print(ret.stdout, end=<span class="string">""</span>)</div></pre></td></tr></table></figure>
<ul>
<li>
<p><em>universal_newlines=True</em><br>
stdout<br>
Captured stdout from the child process. A bytes sequence, or a string if run() was called with universal_newlines=True. None if stdout was not captured.</p>
</li>
<li>
<p>stdout=PIPE<br>
without this argument, stdout will be printed as stdout of python script, instead of captured, as from python doc:</p>
<blockquote>
<p>This(ct: means <em>run</em>) does not capture stdout or stderr by default. To do so, pass PIPE for the stdout and/or stderr arguments.</p>
</blockquote>
</li>
</ul>
<h3 id="glob-module">glob module</h3>
<p>The glob module finds all the pathnames matching a specified pattern</p>
<ul>
<li>glob.glob(pathname, *, recursive=False)</li>
<li>glob.iglob(pathname, recursive=False)<br>
Return an iterator which yields the same values as glob()</li>
</ul>
<h3 id="collections-module">collections module</h3>
<p><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431953239820157155d21c494e5786fce303f3018c86000" target="_blank" rel="external">廖雪峰</a></p>
<ul>
<li>
<p>Counter</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   &gt;&gt;&gt; Counter([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>])</div><div class="line">Counter(&#123;<span class="number">1</span>: <span class="number">5</span>, <span class="number">2</span>: <span class="number">3</span>, <span class="number">3</span>: <span class="number">2</span>&#125;)</div></pre></td></tr></table></figure>
</li>
<li>
<p><a href="https://docs.python.org/3.5/library/collections.html" target="_blank" rel="external">deque (double-ended queue, pronounced as ‘Deck’)</a><br>
doc: <code>deque([iterable[, maxlen]])</code><br>
method: pop(popleft) / append / extend; clear / copy (It’s shadow copy  ) / insert / remove; count / index ; reverse / rotate</p>
</li>
<li>
<p><a href="https://docs.python.org/3.7/library/collections.html#ordereddict-examples-and-recipes" target="_blank" rel="external">python doc: OrderedDict</a><br>
This dict will record the <strong>insert</strong> order!  And this is the only difference between OrderedDict and dict<br>
<strong>NOTE: OrderedDict may looks like a list of tuple, but it’s definitely not!</strong></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> collections</div><div class="line">dic = collections.OrderedDict()</div><div class="line">dic[<span class="string">'k1'</span>] = <span class="string">'v1'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>Standard Usage:</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dictionary sorted by key</span></div><div class="line">OrderedDict(sorted(d.items(), key=<span class="keyword">lambda</span> t: t[<span class="number">0</span>]))</div><div class="line"><span class="comment"># dictionary sorted by value</span></div><div class="line">od = OrderedDict(sorted(mydict.items(), key=<span class="keyword">lambda</span> t: t[<span class="number">1</span>], reverse=<span class="keyword">True</span>))</div></pre></td></tr></table></figure>
<h3 id="pil">PIL</h3>
<ul>
<li><code>img = Image.open(‘origin.png’) #支持多种格式</code><br>
注意：类似于.htm和.html，.jpg和.jpeg没有区别，只是两种写法</li>
<li>font<br>
<code>font = ImageFont.truetype(&quot;FreeMono.ttf&quot;, 28, encoding=&quot;unic&quot;)</code></li>
<li><code>img2.save('./test_image_data/cat_001_blur.jpeg','jpeg')</code> #save(‘path’,‘format’)</li>
<li>resize()、rotate()、convert(mode=‘your_mode’)</li>
<li>Coordinates (0, 0) in the upper left corner.</li>
<li><code>draw = ImageDraw.Draw(img)</code> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#img is from:</div><div class="line">#img = Image.open(&apos;./test_image_data/cat_001.jpg&apos;)</div><div class="line">draw.text((width - add_width, 0), number, font=font, fill=fillcolor) # first parameter is the start point of the draw</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="random">random</h3>
<p><a href="https://docs.python.org/3/library/random.html" target="_blank" rel="external">doc</a></p>
<ul>
<li>random.seed(a=None, version=2)</li>
</ul>
<h4 id="functions-for-integers">functions for integers</h4>
<ul>
<li>random.randrange(start, stop[, step])</li>
<li>random.randint(a, b)
<blockquote>
<p>return a random integer N such that a &lt;= N &lt;= b. Alias for randrange(a, b+1).</p>
</blockquote>
</li>
</ul>
<h4 id="real-valued-distributions">real-valued distributions</h4>
<ul>
<li>random.random()
<blockquote>
<p>Return the next random floating point number in the range [0.0, 1.0).</p>
</blockquote>
</li>
<li>random.uniform(a, b)</li>
<li>random.gauss(mu, sigma)</li>
</ul>
<h3 id="shutil">shutil</h3>
<blockquote>
<p>The shutil module offers a number of high-level operations on files and collections of files. In particular, functions are provided which support file copying and removal.</p>
</blockquote>
<p><code>shutil.copyfile(src, dst)</code></p>
<h3 id="logging">logging<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>  <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h3>
<ul>
<li>A sample example:<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2]</a></sup> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line">logging.warning(<span class="string">'Watch out!'</span>)  <span class="comment"># will print a message to the console</span></div><div class="line">logging.info(<span class="string">'I told you so'</span>)  <span class="comment"># will not print anything</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>result is : <code>WARNING:root:Watch out!</code></p>
<ul>
<li>Used in program:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import logging</div><div class="line"></div><div class="line">logger = logging.getLogger()</div><div class="line">handler = logging.StreamHandler()</div><div class="line">formatter = logging.Formatter(</div><div class="line">        &apos;%(asctime)s %(name)-12s %(levelname)-8s %(message)s&apos;)</div><div class="line">handler.setFormatter(formatter)</div><div class="line">logger.addHandler(handler)</div><div class="line">logger.setLevel(logging.DEBUG)</div><div class="line"></div><div class="line">logger.debug(&apos;often makes a very good meal of %s&apos;, &apos;visiting tourists&apos;)</div></pre></td></tr></table></figure>
<ul>
<li>
<p>logging.warn() vs. logging.warning()<br>
<code>logging.warning()</code> just logs something at the WARNING level, while <code>logging.warn</code> will raise an exception.<br>
ref: <a href="https://stackoverflow.com/questions/9595009/python-warnings-warn-vs-logging-warning" target="_blank" rel="external">Python warnings.warn() vs. logging.warning()</a></p>
</li>
<li>
<p>filter<br>
一般都是用继承<code>logging.Filter</code>类的方法，再写<code>filter</code> method。<br>
官方说3.2版本之后，用个函数就可以作为filter，但是没有示例程序。</p>
</li>
</ul>
<h3 id="functools">functools</h3>
<h4 id="wraps">wraps</h4>
<p>ref: <a href="https://stackoverflow.com/questions/308999/what-does-functools-wraps-do" target="_blank" rel="external">What does functools.wraps do?</a><br>
普通decorator，会导致被修改的函数的属性产生变化（比如func_1，加decorator后，名字会被修改）。</p>
   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @wraps(func) # 只比正常的闭包多了这一句</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">with_logging</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> func.__name__ + <span class="string">" was called"</span></div><div class="line">        <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">    <span class="keyword">return</span> with_logging</div></pre></td></tr></table></figure>
<p>简而言之：decorator都需要functools.wraps</p>
<h3 id="pickle">pickle</h3>
<p>pickle.load是从file-like object中导入数据；对应的，pickle.dump也是针对file-like object。<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p>
<ul>
<li>TIPS<br>
一个存有bs4.element.Tag类型的对象，并不一定能pickle。<br>
因为pickle要求数据可以遍历，而bs4.element.Tag类型的对象可能有环？或者单纯是我的数据中，bs4.element.Tag类型的数量太多了？</li>
</ul>
<h3 id="beautifulsoup4">BeautifulSoup4</h3>
<ul>
<li><a href="https://www.jianshu.com/p/96433d9ee923" target="_blank" rel="external">beautifulsoup4</a>
<ul>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#id25" target="_blank" rel="external">文档</a></li>
<li><code>find_all(text=&quot;your_text&quot;)</code>不好用！</li>
<li>‘html5lib’ engine is slower but more robust than ‘lxml’！</li>
<li><code>soup.prettify()</code> and <code>&lt;tag&gt;.prettify()</code><br>
Formatting html</li>
</ul>
</li>
</ul>
<h4 id="四大对象种类">四大对象种类<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h4>
<ul>
<li>Tag: 通俗点讲就是 HTML 中的一个个标签<br>
如何抓取超链接？<br>
因为超链接不是显示存储的。要想得到超链接的字符串，需要下面的操作： <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> isinstance(i, bs4.element.Tag) <span class="keyword">and</span> i.has_attr(<span class="string">'href'</span>):</div><div class="line">            con_str.append(i[<span class="string">'href'</span>] )</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>NavigableString: <code>print(type(soup.p.string))</code>, that’s it.</li>
<li>BeautifulSoup: 一个文档的全部内容.大部分时候可以把它当作是一个特殊的 Tag</li>
<li>Comment: 注释</li>
</ul>
<h3 id="selenium">Selenium</h3>
<ul>
<li>
<p>initialize</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chromePath = <span class="string">r'/usr/local/bin/chromedriver'</span></div><div class="line">wd = webdriver.Chrome(executable_path= chromePath)</div></pre></td></tr></table></figure>
</li>
<li>
<p>usage</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wd.find_element_by_id(<span class="string">'login_pwd'</span>)</div><div class="line">wd.find_element_by_class_name(<span class="string">'radiocheck'</span>).click()</div><div class="line">wd.find_element_by_xpath(<span class="string">'//*[@id="sendpck"]/img'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>NOTE:<br>
1. you can search an element and then <code>click()</code><br>
2. you can get xpath in source code page.</p>
<ul>
<li>login website<br>
Please refer to login fucntion in download_voice.ipynb</li>
</ul>
<h4 id="tips-v2">TIPS</h4>
<ul>
<li>断网<br>
有时候断网后，selenium就一直无法重新连接，尽管你在浏览器中手动访问网站是可以的。<br>
这时可以手动刷新一下selenium要访问的页面，问题可能就解决了。<br>
我猜，这可能是因为selenium保留了上次访问的失败状态，这导致重新链接到网络后，selenium仍然无法正常工作。</li>
</ul>
<h2 id="reference">reference</h2>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><a href="http://docs.python-guide.org/en/latest/writing/logging/" target="_blank" rel="external">THe hitchhiker’s guide to python</a> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://docs.python.org/3/howto/logging.html" target="_blank" rel="external">Official Logging How to </a> <a href="#fnref2" class="footnote-backref">↩</a> <a href="#fnref2:1" class="footnote-backref">↩</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://stackoverflow.com/questions/48498929/what-is-file-like-object-what-is-file-pickle-load-and-pickle-loads" target="_blank" rel="external">about pickle</a> <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="http://wiki.jikexueyuan.com/project/python-crawler-guide/beautiful-soup.html" target="_blank" rel="external">Beautiful Soup 的用法</a> <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;br&gt;
Python features a dynamic type system and automatic memory management and supports multiple programming paradigms.&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://timchen314.com/categories/python/"/>
    
    
      <category term="python" scheme="http://timchen314.com/tags/python/"/>
    
      <category term="编程语言" scheme="http://timchen314.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
